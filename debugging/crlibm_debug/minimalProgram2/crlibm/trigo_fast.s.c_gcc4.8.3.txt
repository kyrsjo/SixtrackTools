   1              		.file	"trigo_fast.c"
   2              	# GNU C (GCC) version 4.8.3 20140911 (Red Hat 4.8.3-9) (x86_64-redhat-linux)
   3              	#	compiled by GNU C version 4.8.3 20140911 (Red Hat 4.8.3-9), GMP version 5.1.1, MPFR version 3.1.1
   4              	# warning: GMP header version 5.1.1 differs from library version 6.0.0.
   5              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   6              	# options passed:  -I . -imultilib 32 -D LINUX_INLINE -D HAVE_CONFIG_H
   7              	# trigo_fast.c -m32 -mtune=generic -march=x86-64 -g -O1 -Wall -Wshadow
   8              	# -Wpointer-arith -Wcast-align -Wconversion -Waggregate-return
   9              	# -Wstrict-prototypes -Wnested-externs -Wlong-long -Winline -Wpedantic
  10              	# -std=c99 -fPIC -fno-strict-aliasing -fverbose-asm
  11              	# options enabled:  -fPIC -faggressive-loop-optimizations
  12              	# -fasynchronous-unwind-tables -fauto-inc-dec -fbranch-count-reg
  13              	# -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  14              	# -fdefer-pop -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  15              	# -fearly-inlining -feliminate-unused-debug-types -fforward-propagate
  16              	# -ffunction-cse -fgcse-lm -fgnu-runtime -fgnu-unique
  17              	# -fguess-branch-probability -fident -fif-conversion -fif-conversion2
  18              	# -finline -finline-atomics -finline-functions-called-once -fipa-profile
  19              	# -fipa-pure-const -fipa-reference -fira-hoist-pressure
  20              	# -fira-share-save-slots -fira-share-spill-slots -fivopts
  21              	# -fkeep-static-consts -fleading-underscore -fmath-errno -fmerge-constants
  22              	# -fmerge-debug-strings -fmove-loop-invariants -fomit-frame-pointer
  23              	# -fpcc-struct-return -fpeephole -fprefetch-loop-arrays
  24              	# -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  25              	# -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  26              	# -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  27              	# -fsched-stalled-insns-dep -fshow-column -fshrink-wrap -fsigned-zeros
  28              	# -fsplit-ivs-in-unroller -fsplit-wide-types -fstrict-volatile-bitfields
  29              	# -fsync-libcalls -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  30              	# -ftree-ccp -ftree-ch -ftree-coalesce-vars -ftree-copy-prop
  31              	# -ftree-copyrename -ftree-cselim -ftree-dce -ftree-dominator-opts
  32              	# -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  33              	# -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  34              	# -ftree-parallelize-loops= -ftree-phiprop -ftree-pta -ftree-reassoc
  35              	# -ftree-scev-cprop -ftree-sink -ftree-slp-vectorize -ftree-slsr -ftree-sra
  36              	# -ftree-ter -ftree-vect-loop-version -funit-at-a-time -funwind-tables
  37              	# -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  38              	# -fzero-initialized-in-bss -m32 -m80387 -m96bit-long-double
  39              	# -maccumulate-outgoing-args -malign-stringops -mfancy-math-387
  40              	# -mfp-ret-in-387 -mfxsr -mglibc -mieee-fp -mlong-double-80 -mmmx
  41              	# -mno-red-zone -mno-sse4 -mpush-args -msahf -msse -msse2
  42              	# -mtls-direct-seg-refs
  43              	
  44              		.text
  45              	.Ltext0:
  46              		.section	.rodata.str1.1,"aMS",@progbits,1
  47              	.LC2:
  48 0000 4D756C31 		.string	"Mul12"
  48      3200
  49              		.section	.rodata.str1.4,"aMS",@progbits,1
  50              		.align 4
  51              	.LC3:
  52 0000 72683D25 		.string	"rh=%.20e, rl=%.20e, u=%.20e, v=%.20e\n"
  52      2E323065 
  52      2C20726C 
  52      3D252E32 
  52      30652C20 
  53              		.section	.rodata.str1.1
  54              	.LC4:
  55 0006 5F753D25 		.string	"_u=%.20e, _v=%.20e\n"
  55      2E323065 
  55      2C205F76 
  55      3D252E32 
  55      30650A00 
  56              	.LC6:
  57 001a 75703D25 		.string	"up=%.20e vp=%.20e\n"
  57      2E323065 
  57      2076703D 
  57      252E3230 
  57      650A00
  58              	.LC7:
  59 002d 75313D25 		.string	"u1=%.20e v1=%.20e\n"
  59      2E323065 
  59      2076313D 
  59      252E3230 
  59      650A00
  60              	.LC8:
  61 0040 75323D25 		.string	"u2=%.20e v2=%.20e\n"
  61      2E323065 
  61      2076323D 
  61      252E3230 
  61      650A00
  62              	.LC9:
  63 0053 72683D25 		.string	"rh=%.20e,rl=%.20e\n"
  63      2E323065 
  63      2C726C3D 
  63      252E3230 
  63      650A00
  64              	.LC10:
  65 0066 65787072 		.string	"expr=%.20e\n"
  65      3D252E32 
  65      30650A00 
  66              		.text
  68              	do_cos:
  69              	.LFB8:
  70              		.file 1 "trigo_fast.c"
   1:trigo_fast.c  **** #include <stdio.h>
   2:trigo_fast.c  **** #include <stdlib.h>
   3:trigo_fast.c  **** #include "crlibm.h"
   4:trigo_fast.c  **** #include "crlibm_private.h"
   5:trigo_fast.c  **** #include "trigo_fast.h"
   6:trigo_fast.c  **** #include "coefpi2.h"
   7:trigo_fast.c  **** 
   8:trigo_fast.c  **** 
   9:trigo_fast.c  **** extern double scs_sin_rn(double);
  10:trigo_fast.c  **** extern double scs_sin_ru(double);
  11:trigo_fast.c  **** extern double scs_sin_rd(double);
  12:trigo_fast.c  **** extern double scs_sin_rz(double);
  13:trigo_fast.c  **** extern double scs_cos_rn(double);
  14:trigo_fast.c  **** extern double scs_cos_ru(double);
  15:trigo_fast.c  **** extern double scs_cos_rd(double);
  16:trigo_fast.c  **** extern double scs_cos_rz(double);
  17:trigo_fast.c  **** extern double scs_tan_rn(double); 
  18:trigo_fast.c  **** extern double scs_tan_rd(double);  
  19:trigo_fast.c  **** extern double scs_tan_ru(double);  
  20:trigo_fast.c  **** extern double scs_tan_rz(double);  
  21:trigo_fast.c  **** 
  22:trigo_fast.c  **** #define DEBUG 0
  23:trigo_fast.c  **** 
  24:trigo_fast.c  **** #define INLINE_SINCOS 0
  25:trigo_fast.c  **** 
  26:trigo_fast.c  **** 
  27:trigo_fast.c  **** 
  28:trigo_fast.c  **** #if INLINE_SINCOS
  29:trigo_fast.c  **** 
  30:trigo_fast.c  **** #define DO_SIN(sh,sl)  {\
  31:trigo_fast.c  ****   double thi, tlo, cahyh_h, cahyh_l, yh2;\
  32:trigo_fast.c  ****   yh2 = yh*yh;\
  33:trigo_fast.c  ****   if(sah==0.0)\
  34:trigo_fast.c  ****     { \
  35:trigo_fast.c  ****       ts = yh2 * (s3.d + yh2*(s5.d + yh2*s7.d));\
  36:trigo_fast.c  ****       Add12(sh,sl,   yh, yl+ ts*yh);\
  37:trigo_fast.c  ****     }\
  38:trigo_fast.c  ****   else {\
  39:trigo_fast.c  ****     Mul12(&cahyh_h,&cahyh_l, cah, yh);\
  40:trigo_fast.c  ****     Add12(thi, tlo,     sah,cahyh_h);\
  41:trigo_fast.c  ****     ts = yh2 * (s3.d + yh2*(s5.d + yh2*s7.d));\
  42:trigo_fast.c  ****     tc = yh2 * (c2.d + yh2*(c4.d + yh2*c6.d ));\
  43:trigo_fast.c  ****     tlo = tc*sah + (ts*cahyh_h  +(sal + (tlo + (cahyh_l  + (cal*yh + cah*yl))))) ; \
  44:trigo_fast.c  ****     Add12(sh,sl,  thi, tlo );  \
  45:trigo_fast.c  ****   }\
  46:trigo_fast.c  **** }
  47:trigo_fast.c  **** 
  48:trigo_fast.c  **** #define DO_COS(ch,cl) {\
  49:trigo_fast.c  ****   double thi, tlo, sahyh_h,sahyh_l, yh2; \
  50:trigo_fast.c  ****   yh2 = yh*yh ;\
  51:trigo_fast.c  ****   if(sah==0.0) { \
  52:trigo_fast.c  ****     tc = yh2 * (c2.d + yh2*(c4.d + yh2*c6.d ));\
  53:trigo_fast.c  ****       Add12(*ch,*cl, 1., tc);\
  54:trigo_fast.c  ****     }\
  55:trigo_fast.c  ****   else {\
  56:trigo_fast.c  ****   Mul12(&sahyh_h,&sahyh_l, sah, yh);\
  57:trigo_fast.c  ****   ts = yh2 * (s3.d + yh2*(s5.d + yh2*s7.d));\
  58:trigo_fast.c  ****   tc = yh2 * (c2.d + yh2*(c4.d + yh2*(c6.d)));\
  59:trigo_fast.c  ****   Add12(thi, tlo,  cah, -sahyh_h);\
  60:trigo_fast.c  ****   tlo = tc*cah - (ts*sahyh_h -  (cal + (tlo  - (sahyh_l + (sal*yh + sah*yl)) ))) ; \
  61:trigo_fast.c  ****   Add12(ch, cl,    thi, tlo ); \
  62:trigo_fast.c  **** }}
  63:trigo_fast.c  **** 
  64:trigo_fast.c  **** 
  65:trigo_fast.c  **** #else /* INLINE_SINCOS */
  66:trigo_fast.c  **** 
  67:trigo_fast.c  **** static double sah,sal,cah,cal;
  68:trigo_fast.c  **** 
  69:trigo_fast.c  **** 
  70:trigo_fast.c  **** static void do_sin(double* sh, double* sl, double yh, double yl) {
  71:trigo_fast.c  ****   double thi, tlo, cahyh_h, cahyh_l, yh2, ts, tc;
  72:trigo_fast.c  **** 
  73:trigo_fast.c  ****   /* Add optimizations for small yh / k  here */
  74:trigo_fast.c  **** 
  75:trigo_fast.c  ****   yh2 = yh*yh;
  76:trigo_fast.c  **** 
  77:trigo_fast.c  ****   if(sah==0.0)
  78:trigo_fast.c  ****     { /*  sa=0 and ca=1, which simplifies computations */
  79:trigo_fast.c  ****       ts = yh2 * (s3.d + yh2*(s5.d + yh2*s7.d));
  80:trigo_fast.c  ****       /* (1+ts)*(yh+yl) is an approx to sin(yh+yl) */
  81:trigo_fast.c  ****       /* Now we need to compute (1+ts)*(yh+yl) */
  82:trigo_fast.c  ****       Add12(*sh,*sl,   yh, yl+ ts*yh);
  83:trigo_fast.c  ****     }
  84:trigo_fast.c  ****   else {
  85:trigo_fast.c  ****    
  86:trigo_fast.c  ****     Mul12(&cahyh_h,&cahyh_l, cah, yh);
  87:trigo_fast.c  ****     Add12(thi, tlo, sah,cahyh_h);
  88:trigo_fast.c  ****     
  89:trigo_fast.c  ****     ts = yh2 * (s3.d + yh2*(s5.d + yh2*s7.d));
  90:trigo_fast.c  ****     /* (1+ts)*(yh+yl) is an approx to sin(yh+yl) */
  91:trigo_fast.c  ****     
  92:trigo_fast.c  ****     tc = yh2 * (c2.d + yh2*(c4.d + yh2*c6.d ));
  93:trigo_fast.c  ****     /* 1+ tc is an approx to cos(yh+yl) */
  94:trigo_fast.c  **** 
  95:trigo_fast.c  ****     /* now we compute an approximation to cos(a)sin(x) + sin(a)cos(x)   */
  96:trigo_fast.c  ****     tlo = tc*sah + (ts*cahyh_h  +(sal + (tlo + (cahyh_l  + (cal*yh + cah*yl))))) ;
  97:trigo_fast.c  ****     Add12(*sh,*sl,  thi, tlo );
  98:trigo_fast.c  ****   }
  99:trigo_fast.c  **** }
 100:trigo_fast.c  **** 
 101:trigo_fast.c  **** 
 102:trigo_fast.c  **** static void do_cos(double* ch, double* cl, double yh, double yl) {
  71              		.loc 1 102 0
  72              		.cfi_startproc
  73              	.LVL0:
  74 0000 57       		pushl	%edi	#
  75              		.cfi_def_cfa_offset 8
  76              		.cfi_offset 7, -8
  77 0001 56       		pushl	%esi	#
  78              		.cfi_def_cfa_offset 12
  79              		.cfi_offset 6, -12
  80 0002 53       		pushl	%ebx	#
  81              		.cfi_def_cfa_offset 16
  82              		.cfi_offset 3, -16
  83 0003 81ECA000 		subl	$160, %esp	#,
  83      0000
  84              		.cfi_def_cfa_offset 176
  85 0009 E8FCFFFF 		call	__x86.get_pc_thunk.bx	#
  85      FF
  86 000e 81C30200 		addl	$_GLOBAL_OFFSET_TABLE_, %ebx	#,
  86      0000
  87 0014 89C7     		movl	%eax, %edi	# ch, ch
  88 0016 89D6     		movl	%edx, %esi	# cl, cl
  89 0018 DD8424B0 		fldl	176(%esp)	# yh
  89      000000
  90 001f DD542448 		fstl	72(%esp)	# %sfp
  91 0023 DD8424B8 		fldl	184(%esp)	# yl
  91      000000
  92 002a DD9C2490 		fstpl	144(%esp)	# %sfp
  92      000000
 103:trigo_fast.c  ****   double yh2, ts, tc, thi, tlo, sahyh_h,sahyh_l; 
 104:trigo_fast.c  **** 
 105:trigo_fast.c  ****   yh2 = yh*yh ;
  93              		.loc 1 105 0
  94 0031 D9C0     		fld	%st(0)	#
  95 0033 DB7C2430 		fstpt	48(%esp)	# %sfp
  96 0037 D9C0     		fld	%st(0)	#
  97 0039 DEC9     		fmulp	%st, %st(1)	#,
  98 003b DD9C2498 		fstpl	152(%esp)	#
  98      000000
  99 0042 DD842498 		fldl	152(%esp)	#
  99      000000
 100 0049 DD542458 		fstl	88(%esp)	# %sfp
 101              	.LVL1:
 106:trigo_fast.c  **** 
 107:trigo_fast.c  ****   if(sah==0.0)
 102              		.loc 1 107 0
 103 004d D9EE     		fldz
 104              	.LVL2:
 105 004f DD831800 		fldl	sah@GOTOFF(%ebx)	# sah
 105      0000
 106 0055 DFE9     		fucomip	%st(1), %st	#,
 107 0057 DDD8     		fstp	%st(0)	#
 108 0059 7A57     		jp	.L7	#,
 109 005b 7559     		jne	.L8	#,
 110              	.LVL3:
 108:trigo_fast.c  ****     { /*  sa=0 and ca=1, which simplifies computations */
 109:trigo_fast.c  ****     tc = yh2 * (c2.d + yh2*(c4.d + yh2*c6.d ));
 111              		.loc 1 109 0
 112 005d D9C0     		fld	%st(0)	#
 113 005f DC8B2808 		fmull	c6@GOTOFF(%ebx)	# c6.d
 113      0000
 114              	.LVL4:
 115 0065 DC833008 		faddl	c4@GOTOFF(%ebx)	# c4.d
 115      0000
 116 006b D8C9     		fmul	%st(1), %st	#,
 117 006d DC833808 		faddl	c2@GOTOFF(%ebx)	# c2.d
 117      0000
 118 0073 DEC9     		fmulp	%st, %st(1)	#,
 119 0075 DD9C2498 		fstpl	152(%esp)	#
 119      000000
 120              	.LVL5:
 121 007c DD842498 		fldl	152(%esp)	#
 121      000000
 122              	.LBB2:
 110:trigo_fast.c  ****     /* 1+ tc is an approx to cos(yh+yl) */
 111:trigo_fast.c  **** 
 112:trigo_fast.c  ****       /* Now we need to compute 1+tc */
 113:trigo_fast.c  ****       Add12(*ch,*cl, 1., tc);
 123              		.loc 1 113 0
 124 0083 D9E8     		fld1
 125 0085 D9C1     		fld	%st(1)	#
 126 0087 D8C1     		fadd	%st(1), %st	#,
 127 0089 DD9C2498 		fstpl	152(%esp)	#
 127      000000
 128 0090 DD842498 		fldl	152(%esp)	#
 128      000000
 129 0097 DD10     		fstl	(%eax)	# *ch_24(D)
 130              	.LVL6:
 131 0099 DEE1     		fsubp	%st, %st(1)	#,
 132 009b DD9C2498 		fstpl	152(%esp)	#
 132      000000
 133 00a2 DD842498 		fldl	152(%esp)	#
 133      000000
 134              	.LVL7:
 135 00a9 DEE9     		fsubrp	%st, %st(1)	#,
 136 00ab DD1A     		fstpl	(%edx)	# *cl_32(D)
 137              	.LBE2:
 138 00ad E9150300 		jmp	.L1	#
 138      00
 139              	.LVL8:
 140              	.L7:
 141 00b2 DDD8     		fstp	%st(0)	#
 142 00b4 EB02     		jmp	.L2	#
 143              	.L8:
 144 00b6 DDD8     		fstp	%st(0)	#
 145              	.L2:
 146              	.LBB3:
 114:trigo_fast.c  ****     }
 115:trigo_fast.c  ****   else {
 116:trigo_fast.c  ****   
 117:trigo_fast.c  ****   /* now we compute an approximation to cos(a)cos(x) - sin(a)sin(x)   */
 118:trigo_fast.c  ****   
 119:trigo_fast.c  ****   Mul12(&sahyh_h,&sahyh_l, sah, yh);
 147              		.loc 1 119 0
 148 00b8 8D830000 		leal	.LC2@GOTOFF(%ebx), %eax	#, tmp223
 148      0000
 149              	.LVL9:
 150 00be 890424   		movl	%eax, (%esp)	# tmp223,
 151 00c1 E8FCFFFF 		call	puts@PLT	#
 151      FF
 152              	.LVL10:
 153 00c6 F20F1044 		movsd	72(%esp), %xmm0	# %sfp, yh
 153      2448
 154 00cc F20F1144 		movsd	%xmm0, 28(%esp)	# yh,
 154      241C
 155 00d2 DD831800 		fldl	sah@GOTOFF(%ebx)	# sah
 155      0000
 156 00d8 DD5C2414 		fstpl	20(%esp)	#
 157 00dc D9EE     		fldz
 158 00de DD54240C 		fstl	12(%esp)	#
 159 00e2 DD5C2404 		fstpl	4(%esp)	#
 160 00e6 8D830000 		leal	.LC3@GOTOFF(%ebx), %eax	#, tmp225
 160      0000
 161 00ec 890424   		movl	%eax, (%esp)	# tmp225,
 162 00ef E8FCFFFF 		call	printf@PLT	#
 162      FF
 163              	.LVL11:
 164 00f4 DD831800 		fldl	sah@GOTOFF(%ebx)	# sah
 164      0000
 165 00fa DD5C2450 		fstpl	80(%esp)	# %sfp
 166              	.LVL12:
 167 00fe F20F1044 		movsd	72(%esp), %xmm0	# %sfp, yh
 167      2448
 168 0104 F20F1144 		movsd	%xmm0, 12(%esp)	# yh,
 168      240C
 169 010a F20F1064 		movsd	80(%esp), %xmm4	# %sfp, _u
 169      2450
 170 0110 F20F1164 		movsd	%xmm4, 4(%esp)	# _u,
 170      2404
 171 0116 8D830000 		leal	.LC4@GOTOFF(%ebx), %eax	#, tmp226
 171      0000
 172 011c 890424   		movl	%eax, (%esp)	# tmp226,
 173 011f E8FCFFFF 		call	printf@PLT	#
 173      FF
 174              	.LVL13:
 175 0124 DD442450 		fldl	80(%esp)	# %sfp
 176 0128 DD830000 		fldl	.LC5@GOTOFF(%ebx)	#
 176      0000
 177 012e D9C9     		fxch	%st(1)	#
 178 0130 D9C0     		fld	%st(0)	#
 179 0132 DB7C2460 		fstpt	96(%esp)	# %sfp
 180 0136 D8C9     		fmul	%st(1), %st	#,
 181 0138 DD5C2448 		fstpl	72(%esp)	# %sfp
 182              	.LVL14:
 183 013c DB6C2430 		fldt	48(%esp)	# %sfp
 184 0140 DEC9     		fmulp	%st, %st(1)	#,
 185 0142 DD5C2450 		fstpl	80(%esp)	# %sfp
 186              	.LVL15:
 187 0146 F20F106C 		movsd	80(%esp), %xmm5	# %sfp, vp
 187      2450
 188 014c F20F116C 		movsd	%xmm5, 12(%esp)	# vp,
 188      240C
 189 0152 F20F1074 		movsd	72(%esp), %xmm6	# %sfp, up
 189      2448
 190 0158 F20F1174 		movsd	%xmm6, 4(%esp)	# up,
 190      2404
 191 015e 8D830000 		leal	.LC6@GOTOFF(%ebx), %eax	#, tmp233
 191      0000
 192 0164 890424   		movl	%eax, (%esp)	# tmp233,
 193 0167 E8FCFFFF 		call	printf@PLT	#
 193      FF
 194              	.LVL16:
 195 016c DD442448 		fldl	72(%esp)	# %sfp
 196 0170 DB7C2470 		fstpt	112(%esp)	# %sfp
 197              	.LVL17:
 198 0174 DD442450 		fldl	80(%esp)	# %sfp
 199 0178 DBBC2480 		fstpt	128(%esp)	# %sfp
 199      000000
 200              	.LVL18:
 201 017f F20F104C 		movsd	80(%esp), %xmm1	# %sfp, vp
 201      2450
 202 0185 F20F114C 		movsd	%xmm1, 12(%esp)	# vp,
 202      240C
 203 018b F20F1054 		movsd	72(%esp), %xmm2	# %sfp, up
 203      2448
 204 0191 F20F1154 		movsd	%xmm2, 4(%esp)	# up,
 204      2404
 205 0197 8D830000 		leal	.LC7@GOTOFF(%ebx), %eax	#, tmp234
 205      0000
 206 019d 890424   		movl	%eax, (%esp)	# tmp234,
 207 01a0 E8FCFFFF 		call	printf@PLT	#
 207      FF
 208              	.LVL19:
 209 01a5 DB6C2460 		fldt	96(%esp)	# %sfp
 210 01a9 DB6C2470 		fldt	112(%esp)	# %sfp
 211 01ad DCE9     		fsubr	%st, %st(1)	#,
 212 01af DEC1     		faddp	%st, %st(1)	#,
 213 01b1 DD9C2498 		fstpl	152(%esp)	#
 213      000000
 214 01b8 DD842498 		fldl	152(%esp)	#
 214      000000
 215 01bf DB7C2470 		fstpt	112(%esp)	# %sfp
 216              	.LVL20:
 217 01c3 DBAC2480 		fldt	128(%esp)	# %sfp
 217      000000
 218 01ca D9C0     		fld	%st(0)	#
 219 01cc DB6C2430 		fldt	48(%esp)	# %sfp
 220 01d0 DEE1     		fsubp	%st, %st(1)	#,
 221 01d2 DEC1     		faddp	%st, %st(1)	#,
 222 01d4 DD9C2498 		fstpl	152(%esp)	#
 222      000000
 223 01db DD842498 		fldl	152(%esp)	#
 223      000000
 224 01e2 DBBC2480 		fstpt	128(%esp)	# %sfp
 224      000000
 225              	.LVL21:
 226 01e9 F20F104C 		movsd	80(%esp), %xmm1	# %sfp, vp
 226      2450
 227 01ef F20F114C 		movsd	%xmm1, 12(%esp)	# vp,
 227      240C
 228 01f5 F20F1054 		movsd	72(%esp), %xmm2	# %sfp, up
 228      2448
 229 01fb F20F1154 		movsd	%xmm2, 4(%esp)	# up,
 229      2404
 230 0201 8D830000 		leal	.LC8@GOTOFF(%ebx), %eax	#, tmp241
 230      0000
 231 0207 890424   		movl	%eax, (%esp)	# tmp241,
 232 020a E8FCFFFF 		call	printf@PLT	#
 232      FF
 233              	.LVL22:
 234 020f DB6C2460 		fldt	96(%esp)	# %sfp
 235 0213 D9C0     		fld	%st(0)	#
 236 0215 DB6C2430 		fldt	48(%esp)	# %sfp
 237 0219 DCC9     		fmul	%st, %st(1)	#,
 238 021b D9C9     		fxch	%st(1)	#
 239 021d DD9C2498 		fstpl	152(%esp)	#
 239      000000
 240 0224 DD842498 		fldl	152(%esp)	#
 240      000000
 241 022b DD542450 		fstl	80(%esp)	# %sfp
 242              	.LVL23:
 243 022f DBAC2480 		fldt	128(%esp)	# %sfp
 243      000000
 244              	.LVL24:
 245 0236 D9C0     		fld	%st(0)	#
 246 0238 DEEB     		fsubrp	%st, %st(3)	#,
 247 023a D9CA     		fxch	%st(2)	#
 248 023c DD9C2498 		fstpl	152(%esp)	#
 248      000000
 249              	.LVL25:
 250 0243 DD842498 		fldl	152(%esp)	#
 250      000000
 251 024a DB6C2470 		fldt	112(%esp)	# %sfp
 252 024e DCEC     		fsubr	%st, %st(4)	#,
 253 0250 D9CC     		fxch	%st(4)	#
 254 0252 DD9C2498 		fstpl	152(%esp)	#
 254      000000
 255 0259 DD842498 		fldl	152(%esp)	#
 255      000000
 256 0260 D9C3     		fld	%st(3)	#
 257 0262 D8CD     		fmul	%st(5), %st	#,
 258 0264 D9CB     		fxch	%st(3)	#
 259 0266 D9C0     		fld	%st(0)	#
 260 0268 DB7C2460 		fstpt	96(%esp)	# %sfp
 261              	.LVL26:
 262 026c DEEB     		fsubrp	%st, %st(3)	#,
 263 026e D9CC     		fxch	%st(4)	#
 264 0270 D8C9     		fmul	%st(1), %st	#,
 265 0272 DEC2     		faddp	%st, %st(2)	#,
 266 0274 D9CA     		fxch	%st(2)	#
 267 0276 D8CB     		fmul	%st(3), %st	#,
 268 0278 DEC1     		faddp	%st, %st(1)	#,
 269 027a D9C9     		fxch	%st(1)	#
 270 027c DECA     		fmulp	%st, %st(2)	#,
 271 027e DEC1     		faddp	%st, %st(1)	#,
 272 0280 DD5C2448 		fstpl	72(%esp)	# %sfp
 273              	.LVL27:
 274 0284 F20F105C 		movsd	72(%esp), %xmm3	# %sfp, sahyh_l.39
 274      2448
 275 028a F20F115C 		movsd	%xmm3, 12(%esp)	# sahyh_l.39,
 275      240C
 276 0290 F20F107C 		movsd	80(%esp), %xmm7	# %sfp, sahyh_h.38
 276      2450
 277 0296 F20F117C 		movsd	%xmm7, 4(%esp)	# sahyh_h.38,
 277      2404
 278 029c 8D830000 		leal	.LC9@GOTOFF(%ebx), %eax	#, tmp255
 278      0000
 279 02a2 890424   		movl	%eax, (%esp)	# tmp255,
 280 02a5 E8FCFFFF 		call	printf@PLT	#
 280      FF
 281              	.LVL28:
 282 02aa F20F105C 		movsd	72(%esp), %xmm3	# %sfp, sahyh_l.39
 282      2448
 283 02b0 F20F115C 		movsd	%xmm3, 4(%esp)	# sahyh_l.39,
 283      2404
 284 02b6 8D830000 		leal	.LC10@GOTOFF(%ebx), %eax	#, tmp256
 284      0000
 285 02bc 890424   		movl	%eax, (%esp)	# tmp256,
 286 02bf E8FCFFFF 		call	printf@PLT	#
 286      FF
 287              	.LVL29:
 288              	.LBE3:
 120:trigo_fast.c  **** 
 121:trigo_fast.c  ****   ts = yh2 * (s3.d + yh2*(s5.d + yh2*s7.d));
 289              		.loc 1 121 0
 290 02c4 DD442458 		fldl	88(%esp)	# %sfp
 291              	.LVL30:
 292              	.LBB4:
 122:trigo_fast.c  ****   /* (1+ts)*(yh+yl) is an approx to sin(yh+yl) */
 123:trigo_fast.c  **** 
 124:trigo_fast.c  ****   tc = yh2 * (c2.d + yh2*(c4.d + yh2*(c6.d)));
 125:trigo_fast.c  ****   /* 1+ tc is an approx to cos(yh+yl) */
 126:trigo_fast.c  ****   
 127:trigo_fast.c  ****   Add12(thi, tlo,  cah, -sahyh_h);
 293              		.loc 1 127 0
 294 02c8 DD830800 		fldl	cah@GOTOFF(%ebx)	# cah
 294      0000
 295              	.LVL31:
 296 02ce DD442450 		fldl	80(%esp)	# %sfp
 297 02d2 D9E0     		fchs
 298              	.LVL32:
 299 02d4 D9C1     		fld	%st(1)	#
 300              	.LVL33:
 301 02d6 D8C1     		fadd	%st(1), %st	#,
 302 02d8 DD9C2498 		fstpl	152(%esp)	#
 302      000000
 303 02df DD842498 		fldl	152(%esp)	#
 303      000000
 304              	.LVL34:
 305              	.LBE4:
 124:trigo_fast.c  ****   tc = yh2 * (c2.d + yh2*(c4.d + yh2*(c6.d)));
 306              		.loc 1 124 0
 307 02e6 D9C3     		fld	%st(3)	#
 308              	.LVL35:
 309 02e8 DC8B2808 		fmull	c6@GOTOFF(%ebx)	# c6.d
 309      0000
 310 02ee DC833008 		faddl	c4@GOTOFF(%ebx)	# c4.d
 310      0000
 311 02f4 D8CC     		fmul	%st(4), %st	#,
 312 02f6 DC833808 		faddl	c2@GOTOFF(%ebx)	# c2.d
 312      0000
 313 02fc D8CC     		fmul	%st(4), %st	#,
 314 02fe DD9C2498 		fstpl	152(%esp)	#
 314      000000
 315 0305 DD842498 		fldl	152(%esp)	#
 315      000000
 128:trigo_fast.c  ****   tlo = tc*cah - (ts*sahyh_h -  (cal + (tlo  - (sahyh_l + (sal*yh + sah*yl)) ))) ;
 316              		.loc 1 128 0
 317 030c D8CB     		fmul	%st(3), %st	#,
 121:trigo_fast.c  ****   ts = yh2 * (s3.d + yh2*(s5.d + yh2*s7.d));
 318              		.loc 1 121 0
 319 030e D9C4     		fld	%st(4)	#
 320 0310 DC8B4808 		fmull	s7@GOTOFF(%ebx)	# s7.d
 320      0000
 321 0316 DC835008 		faddl	s5@GOTOFF(%ebx)	# s5.d
 321      0000
 322 031c D8CD     		fmul	%st(5), %st	#,
 323 031e DC835808 		faddl	s3@GOTOFF(%ebx)	# s3.d
 323      0000
 324 0324 DECD     		fmulp	%st, %st(5)	#,
 325 0326 D9CC     		fxch	%st(4)	#
 326 0328 DD9C2498 		fstpl	152(%esp)	#
 326      000000
 327 032f DD842498 		fldl	152(%esp)	#
 327      000000
 328              		.loc 1 128 0
 329 0336 DB6C2460 		fldt	96(%esp)	# %sfp
 330 033a DEC9     		fmulp	%st, %st(1)	#,
 331 033c DD830000 		fldl	cal@GOTOFF(%ebx)	# cal
 331      0000
 332 0342 D9CC     		fxch	%st(4)	#
 333              	.LBB5:
 127:trigo_fast.c  ****   Add12(thi, tlo,  cah, -sahyh_h);
 334              		.loc 1 127 0
 335 0344 D8EA     		fsubr	%st(2), %st	#,
 336 0346 DD9C2498 		fstpl	152(%esp)	#
 336      000000
 337 034d DD842498 		fldl	152(%esp)	#
 337      000000
 338 0354 DEEB     		fsubrp	%st, %st(3)	#,
 339 0356 D9CA     		fxch	%st(2)	#
 340 0358 DD9C2498 		fstpl	152(%esp)	#
 340      000000
 341 035f DD842498 		fldl	152(%esp)	#
 341      000000
 342              	.LBE5:
 343              		.loc 1 128 0
 344 0366 DB6C2430 		fldt	48(%esp)	# %sfp
 345 036a DC8B1000 		fmull	sal@GOTOFF(%ebx)	# sal
 345      0000
 346 0370 DD842490 		fldl	144(%esp)	# %sfp
 346      000000
 347 0377 DC8B1800 		fmull	sah@GOTOFF(%ebx)	# sah
 347      0000
 348 037d DEC1     		faddp	%st, %st(1)	#,
 349 037f DC442448 		faddl	72(%esp)	# %sfp
 350 0383 DEE9     		fsubrp	%st, %st(1)	#,
 351 0385 DEC3     		faddp	%st, %st(3)	#,
 352 0387 D9CA     		fxch	%st(2)	#
 353 0389 DEE9     		fsubrp	%st, %st(1)	#,
 354 038b DEEA     		fsubrp	%st, %st(2)	#,
 355 038d D9C9     		fxch	%st(1)	#
 356 038f DD9C2498 		fstpl	152(%esp)	#
 356      000000
 357 0396 DD842498 		fldl	152(%esp)	#
 357      000000
 358              	.LBB6:
 129:trigo_fast.c  ****   Add12(*ch, *cl,    thi, tlo );
 359              		.loc 1 129 0
 360 039d D9C1     		fld	%st(1)	#
 361 039f D8C1     		fadd	%st(1), %st	#,
 362 03a1 DD9C2498 		fstpl	152(%esp)	#
 362      000000
 363 03a8 DD842498 		fldl	152(%esp)	#
 363      000000
 364 03af DD17     		fstl	(%edi)	# *ch_24(D)
 365              	.LVL36:
 366 03b1 DEE2     		fsubp	%st, %st(2)	#,
 367              	.LVL37:
 368 03b3 D9C9     		fxch	%st(1)	#
 369              	.LVL38:
 370 03b5 DD9C2498 		fstpl	152(%esp)	#
 370      000000
 371              	.LVL39:
 372 03bc DD842498 		fldl	152(%esp)	#
 372      000000
 373              	.LVL40:
 374 03c3 DEE9     		fsubrp	%st, %st(1)	#,
 375 03c5 DD1E     		fstpl	(%esi)	# *cl_32(D)
 376              	.LVL41:
 377              	.L1:
 378              	.LBE6:
 130:trigo_fast.c  ****   }
 131:trigo_fast.c  **** }
 379              		.loc 1 131 0
 380 03c7 81C4A000 		addl	$160, %esp	#,
 380      0000
 381              		.cfi_def_cfa_offset 16
 382 03cd 5B       		popl	%ebx	#
 383              		.cfi_restore 3
 384              		.cfi_def_cfa_offset 12
 385 03ce 5E       		popl	%esi	#
 386              		.cfi_restore 6
 387              		.cfi_def_cfa_offset 8
 388              	.LVL42:
 389 03cf 5F       		popl	%edi	#
 390              		.cfi_restore 7
 391              		.cfi_def_cfa_offset 4
 392              	.LVL43:
 393 03d0 C3       		ret
 394              		.cfi_endproc
 395              	.LFE8:
 398              	do_sin:
 399              	.LFB7:
  70:trigo_fast.c  **** static void do_sin(double* sh, double* sl, double yh, double yl) {
 400              		.loc 1 70 0
 401              		.cfi_startproc
 402              	.LVL44:
 403 03d1 57       		pushl	%edi	#
 404              		.cfi_def_cfa_offset 8
 405              		.cfi_offset 7, -8
 406 03d2 56       		pushl	%esi	#
 407              		.cfi_def_cfa_offset 12
 408              		.cfi_offset 6, -12
 409 03d3 53       		pushl	%ebx	#
 410              		.cfi_def_cfa_offset 16
 411              		.cfi_offset 3, -16
 412 03d4 81ECA000 		subl	$160, %esp	#,
 412      0000
 413              		.cfi_def_cfa_offset 176
 414 03da E8FCFFFF 		call	__x86.get_pc_thunk.bx	#
 414      FF
 415 03df 81C30200 		addl	$_GLOBAL_OFFSET_TABLE_, %ebx	#,
 415      0000
 416 03e5 89C7     		movl	%eax, %edi	# sh, sh
 417 03e7 89D6     		movl	%edx, %esi	# sl, sl
 418 03e9 DD8424B0 		fldl	176(%esp)	# yh
 418      000000
 419 03f0 DD542450 		fstl	80(%esp)	# %sfp
 420 03f4 DD8424B8 		fldl	184(%esp)	# yl
 420      000000
 421 03fb DD942490 		fstl	144(%esp)	# %sfp
 421      000000
 422 0402 D9C9     		fxch	%st(1)	#
  75:trigo_fast.c  ****   yh2 = yh*yh;
 423              		.loc 1 75 0
 424 0404 D9C0     		fld	%st(0)	#
 425 0406 DB7C2430 		fstpt	48(%esp)	# %sfp
 426 040a D9C0     		fld	%st(0)	#
 427 040c D8C9     		fmul	%st(1), %st	#,
 428 040e DD9C2498 		fstpl	152(%esp)	#
 428      000000
 429 0415 DD842498 		fldl	152(%esp)	#
 429      000000
 430 041c DD542458 		fstl	88(%esp)	# %sfp
 431              	.LVL45:
  77:trigo_fast.c  ****   if(sah==0.0)
 432              		.loc 1 77 0
 433 0420 D9EE     		fldz
 434              	.LVL46:
 435 0422 DD831800 		fldl	sah@GOTOFF(%ebx)	# sah
 435      0000
 436 0428 DFE9     		fucomip	%st(1), %st	#,
 437 042a DDD8     		fstp	%st(0)	#
 438 042c 7A6B     		jp	.L15	#,
 439 042e 7571     		jne	.L16	#,
 440              	.LVL47:
  79:trigo_fast.c  ****       ts = yh2 * (s3.d + yh2*(s5.d + yh2*s7.d));
 441              		.loc 1 79 0
 442 0430 D9C0     		fld	%st(0)	#
 443 0432 DC8B4808 		fmull	s7@GOTOFF(%ebx)	# s7.d
 443      0000
 444              	.LVL48:
 445 0438 DC835008 		faddl	s5@GOTOFF(%ebx)	# s5.d
 445      0000
 446 043e D8C9     		fmul	%st(1), %st	#,
 447 0440 DC835808 		faddl	s3@GOTOFF(%ebx)	# s3.d
 447      0000
 448 0446 DEC9     		fmulp	%st, %st(1)	#,
 449 0448 DD9C2498 		fstpl	152(%esp)	#
 449      000000
 450              	.LVL49:
 451 044f DD842498 		fldl	152(%esp)	#
 451      000000
 452              	.LBB7:
  82:trigo_fast.c  ****       Add12(*sh,*sl,   yh, yl+ ts*yh);
 453              		.loc 1 82 0
 454 0456 D8C9     		fmul	%st(1), %st	#,
 455 0458 DEC2     		faddp	%st, %st(2)	#,
 456 045a D9C9     		fxch	%st(1)	#
 457 045c DD9C2498 		fstpl	152(%esp)	#
 457      000000
 458 0463 DD842498 		fldl	152(%esp)	#
 458      000000
 459 046a D9C1     		fld	%st(1)	#
 460 046c D8C1     		fadd	%st(1), %st	#,
 461 046e DD9C2498 		fstpl	152(%esp)	#
 461      000000
 462 0475 DD842498 		fldl	152(%esp)	#
 462      000000
 463 047c DD10     		fstl	(%eax)	# *sh_30(D)
 464              	.LVL50:
 465 047e DEE2     		fsubp	%st, %st(2)	#,
 466              	.LVL51:
 467 0480 D9C9     		fxch	%st(1)	#
 468 0482 DD9C2498 		fstpl	152(%esp)	#
 468      000000
 469 0489 DD842498 		fldl	152(%esp)	#
 469      000000
 470 0490 DEE9     		fsubrp	%st, %st(1)	#,
 471 0492 DD1A     		fstpl	(%edx)	# *sl_38(D)
 472              	.LBE7:
 473 0494 E9130300 		jmp	.L9	#
 473      00
 474              	.LVL52:
 475              	.L15:
 476 0499 DDD8     		fstp	%st(0)	#
 477 049b DDD8     		fstp	%st(0)	#
 478 049d DDD8     		fstp	%st(0)	#
 479 049f EB06     		jmp	.L10	#
 480              	.L16:
 481 04a1 DDD8     		fstp	%st(0)	#
 482 04a3 DDD8     		fstp	%st(0)	#
 483 04a5 DDD8     		fstp	%st(0)	#
 484              	.L10:
 485              	.LBB8:
  86:trigo_fast.c  ****     Mul12(&cahyh_h,&cahyh_l, cah, yh);
 486              		.loc 1 86 0
 487 04a7 8D830000 		leal	.LC2@GOTOFF(%ebx), %eax	#, tmp227
 487      0000
 488              	.LVL53:
 489 04ad 890424   		movl	%eax, (%esp)	# tmp227,
 490 04b0 E8FCFFFF 		call	puts@PLT	#
 490      FF
 491              	.LVL54:
 492 04b5 F20F1044 		movsd	80(%esp), %xmm0	# %sfp, yh
 492      2450
 493 04bb F20F1144 		movsd	%xmm0, 28(%esp)	# yh,
 493      241C
 494 04c1 DD830800 		fldl	cah@GOTOFF(%ebx)	# cah
 494      0000
 495 04c7 DD5C2414 		fstpl	20(%esp)	#
 496 04cb D9EE     		fldz
 497 04cd DD54240C 		fstl	12(%esp)	#
 498 04d1 DD5C2404 		fstpl	4(%esp)	#
 499 04d5 8D830000 		leal	.LC3@GOTOFF(%ebx), %eax	#, tmp229
 499      0000
 500 04db 890424   		movl	%eax, (%esp)	# tmp229,
 501 04de E8FCFFFF 		call	printf@PLT	#
 501      FF
 502              	.LVL55:
 503 04e3 DD830800 		fldl	cah@GOTOFF(%ebx)	# cah
 503      0000
 504 04e9 DD5C2440 		fstpl	64(%esp)	# %sfp
 505              	.LVL56:
 506 04ed F20F1044 		movsd	80(%esp), %xmm0	# %sfp, yh
 506      2450
 507 04f3 F20F1144 		movsd	%xmm0, 12(%esp)	# yh,
 507      240C
 508 04f9 F20F1064 		movsd	64(%esp), %xmm4	# %sfp, _u
 508      2440
 509 04ff F20F1164 		movsd	%xmm4, 4(%esp)	# _u,
 509      2404
 510 0505 8D830000 		leal	.LC4@GOTOFF(%ebx), %eax	#, tmp230
 510      0000
 511 050b 890424   		movl	%eax, (%esp)	# tmp230,
 512 050e E8FCFFFF 		call	printf@PLT	#
 512      FF
 513              	.LVL57:
 514 0513 DD442440 		fldl	64(%esp)	# %sfp
 515 0517 DD830000 		fldl	.LC5@GOTOFF(%ebx)	#
 515      0000
 516 051d D9C9     		fxch	%st(1)	#
 517 051f D9C0     		fld	%st(0)	#
 518 0521 DB7C2460 		fstpt	96(%esp)	# %sfp
 519 0525 D8C9     		fmul	%st(1), %st	#,
 520 0527 DD5C2450 		fstpl	80(%esp)	# %sfp
 521              	.LVL58:
 522 052b DB6C2430 		fldt	48(%esp)	# %sfp
 523 052f DEC9     		fmulp	%st, %st(1)	#,
 524 0531 DD5C2440 		fstpl	64(%esp)	# %sfp
 525              	.LVL59:
 526 0535 F20F106C 		movsd	64(%esp), %xmm5	# %sfp, vp
 526      2440
 527 053b F20F116C 		movsd	%xmm5, 12(%esp)	# vp,
 527      240C
 528 0541 F20F1074 		movsd	80(%esp), %xmm6	# %sfp, up
 528      2450
 529 0547 F20F1174 		movsd	%xmm6, 4(%esp)	# up,
 529      2404
 530 054d 8D830000 		leal	.LC6@GOTOFF(%ebx), %eax	#, tmp237
 530      0000
 531 0553 890424   		movl	%eax, (%esp)	# tmp237,
 532 0556 E8FCFFFF 		call	printf@PLT	#
 532      FF
 533              	.LVL60:
 534 055b DD442450 		fldl	80(%esp)	# %sfp
 535 055f DB7C2470 		fstpt	112(%esp)	# %sfp
 536              	.LVL61:
 537 0563 DD442440 		fldl	64(%esp)	# %sfp
 538 0567 DBBC2480 		fstpt	128(%esp)	# %sfp
 538      000000
 539              	.LVL62:
 540 056e F20F104C 		movsd	64(%esp), %xmm1	# %sfp, vp
 540      2440
 541 0574 F20F114C 		movsd	%xmm1, 12(%esp)	# vp,
 541      240C
 542 057a F20F1054 		movsd	80(%esp), %xmm2	# %sfp, up
 542      2450
 543 0580 F20F1154 		movsd	%xmm2, 4(%esp)	# up,
 543      2404
 544 0586 8D830000 		leal	.LC7@GOTOFF(%ebx), %eax	#, tmp238
 544      0000
 545 058c 890424   		movl	%eax, (%esp)	# tmp238,
 546 058f E8FCFFFF 		call	printf@PLT	#
 546      FF
 547              	.LVL63:
 548 0594 DB6C2460 		fldt	96(%esp)	# %sfp
 549 0598 DB6C2470 		fldt	112(%esp)	# %sfp
 550 059c DCE9     		fsubr	%st, %st(1)	#,
 551 059e DEC1     		faddp	%st, %st(1)	#,
 552 05a0 DD9C2498 		fstpl	152(%esp)	#
 552      000000
 553 05a7 DD842498 		fldl	152(%esp)	#
 553      000000
 554 05ae DB7C2470 		fstpt	112(%esp)	# %sfp
 555              	.LVL64:
 556 05b2 DBAC2480 		fldt	128(%esp)	# %sfp
 556      000000
 557 05b9 D9C0     		fld	%st(0)	#
 558 05bb DB6C2430 		fldt	48(%esp)	# %sfp
 559 05bf DEE1     		fsubp	%st, %st(1)	#,
 560 05c1 DEC1     		faddp	%st, %st(1)	#,
 561 05c3 DD9C2498 		fstpl	152(%esp)	#
 561      000000
 562 05ca DD842498 		fldl	152(%esp)	#
 562      000000
 563 05d1 DBBC2480 		fstpt	128(%esp)	# %sfp
 563      000000
 564              	.LVL65:
 565 05d8 F20F104C 		movsd	64(%esp), %xmm1	# %sfp, vp
 565      2440
 566 05de F20F114C 		movsd	%xmm1, 12(%esp)	# vp,
 566      240C
 567 05e4 F20F1054 		movsd	80(%esp), %xmm2	# %sfp, up
 567      2450
 568 05ea F20F1154 		movsd	%xmm2, 4(%esp)	# up,
 568      2404
 569 05f0 8D830000 		leal	.LC8@GOTOFF(%ebx), %eax	#, tmp245
 569      0000
 570 05f6 890424   		movl	%eax, (%esp)	# tmp245,
 571 05f9 E8FCFFFF 		call	printf@PLT	#
 571      FF
 572              	.LVL66:
 573 05fe DB6C2460 		fldt	96(%esp)	# %sfp
 574 0602 D9C0     		fld	%st(0)	#
 575 0604 DB6C2430 		fldt	48(%esp)	# %sfp
 576 0608 DCC9     		fmul	%st, %st(1)	#,
 577 060a D9C9     		fxch	%st(1)	#
 578 060c DD9C2498 		fstpl	152(%esp)	#
 578      000000
 579 0613 DD842498 		fldl	152(%esp)	#
 579      000000
 580              	.LVL67:
 581 061a D9C0     		fld	%st(0)	#
 582              	.LVL68:
 583 061c DBAC2480 		fldt	128(%esp)	# %sfp
 583      000000
 584 0623 D9C0     		fld	%st(0)	#
 585 0625 DEEC     		fsubrp	%st, %st(4)	#,
 586 0627 D9CB     		fxch	%st(3)	#
 587 0629 DD9C2498 		fstpl	152(%esp)	#
 587      000000
 588              	.LVL69:
 589 0630 DD842498 		fldl	152(%esp)	#
 589      000000
 590 0637 DB6C2470 		fldt	112(%esp)	# %sfp
 591 063b DCED     		fsubr	%st, %st(5)	#,
 592 063d D9CD     		fxch	%st(5)	#
 593 063f DD9C2498 		fstpl	152(%esp)	#
 593      000000
 594 0646 DD842498 		fldl	152(%esp)	#
 594      000000
 595 064d D9C4     		fld	%st(4)	#
 596 064f D8CE     		fmul	%st(6), %st	#,
 597 0651 D9CB     		fxch	%st(3)	#
 598 0653 D9C0     		fld	%st(0)	#
 599 0655 DB7C2440 		fstpt	64(%esp)	# %sfp
 600              	.LVL70:
 601 0659 DEEB     		fsubrp	%st, %st(3)	#,
 602 065b D9CD     		fxch	%st(5)	#
 603 065d D8C9     		fmul	%st(1), %st	#,
 604 065f DEC2     		faddp	%st, %st(2)	#,
 605 0661 D9CB     		fxch	%st(3)	#
 606 0663 D8CC     		fmul	%st(4), %st	#,
 607 0665 DEC1     		faddp	%st, %st(1)	#,
 608 0667 D9CA     		fxch	%st(2)	#
 609 0669 DECB     		fmulp	%st, %st(3)	#,
 610 066b D9C9     		fxch	%st(1)	#
 611 066d DEC2     		faddp	%st, %st(2)	#,
 612 066f D9C9     		fxch	%st(1)	#
 613 0671 DD5C2450 		fstpl	80(%esp)	# %sfp
 614              	.LVL71:
 615 0675 F20F105C 		movsd	80(%esp), %xmm3	# %sfp, cahyh_l.48
 615      2450
 616 067b F20F115C 		movsd	%xmm3, 12(%esp)	# cahyh_l.48,
 616      240C
 617 0681 DD5C2404 		fstpl	4(%esp)	#
 618 0685 8D830000 		leal	.LC9@GOTOFF(%ebx), %eax	#, tmp259
 618      0000
 619 068b 890424   		movl	%eax, (%esp)	# tmp259,
 620 068e E8FCFFFF 		call	printf@PLT	#
 620      FF
 621              	.LVL72:
 622 0693 F20F105C 		movsd	80(%esp), %xmm3	# %sfp, cahyh_l.48
 622      2450
 623 0699 F20F115C 		movsd	%xmm3, 4(%esp)	# cahyh_l.48,
 623      2404
 624 069f 8D830000 		leal	.LC10@GOTOFF(%ebx), %eax	#, tmp260
 624      0000
 625 06a5 890424   		movl	%eax, (%esp)	# tmp260,
 626 06a8 E8FCFFFF 		call	printf@PLT	#
 626      FF
 627              	.LVL73:
 628              	.LBE8:
 629              	.LBB9:
  87:trigo_fast.c  ****     Add12(thi, tlo, sah,cahyh_h);
 630              		.loc 1 87 0
 631 06ad DD831800 		fldl	sah@GOTOFF(%ebx)	# sah
 631      0000
 632              	.LVL74:
 633 06b3 DB6C2440 		fldt	64(%esp)	# %sfp
 634              	.LVL75:
 635 06b7 D9C0     		fld	%st(0)	#
 636 06b9 D8C2     		fadd	%st(2), %st	#,
 637 06bb DD9C2498 		fstpl	152(%esp)	#
 637      000000
 638 06c2 DD842498 		fldl	152(%esp)	#
 638      000000
 639              	.LVL76:
 640              	.LBE9:
  89:trigo_fast.c  ****     ts = yh2 * (s3.d + yh2*(s5.d + yh2*s7.d));
 641              		.loc 1 89 0
 642 06c9 DD442458 		fldl	88(%esp)	# %sfp
 643              	.LVL77:
  92:trigo_fast.c  ****     tc = yh2 * (c2.d + yh2*(c4.d + yh2*c6.d ));
 644              		.loc 1 92 0
 645 06cd D9C0     		fld	%st(0)	#
 646 06cf DC8B2808 		fmull	c6@GOTOFF(%ebx)	# c6.d
 646      0000
 647              	.LVL78:
 648 06d5 DC833008 		faddl	c4@GOTOFF(%ebx)	# c4.d
 648      0000
 649              	.LVL79:
 650 06db D8C9     		fmul	%st(1), %st	#,
 651              	.LVL80:
 652 06dd DC833808 		faddl	c2@GOTOFF(%ebx)	# c2.d
 652      0000
 653 06e3 D8C9     		fmul	%st(1), %st	#,
 654 06e5 DD9C2498 		fstpl	152(%esp)	#
 654      000000
 655 06ec DD842498 		fldl	152(%esp)	#
 655      000000
  96:trigo_fast.c  ****     tlo = tc*sah + (ts*cahyh_h  +(sal + (tlo + (cahyh_l  + (cal*yh + cah*yl))))) ;
 656              		.loc 1 96 0
 657 06f3 D8CC     		fmul	%st(4), %st	#,
  89:trigo_fast.c  ****     ts = yh2 * (s3.d + yh2*(s5.d + yh2*s7.d));
 658              		.loc 1 89 0
 659 06f5 D9C1     		fld	%st(1)	#
 660 06f7 DC8B4808 		fmull	s7@GOTOFF(%ebx)	# s7.d
 660      0000
 661 06fd DC835008 		faddl	s5@GOTOFF(%ebx)	# s5.d
 661      0000
 662 0703 D8CA     		fmul	%st(2), %st	#,
 663 0705 DC835808 		faddl	s3@GOTOFF(%ebx)	# s3.d
 663      0000
 664 070b DECA     		fmulp	%st, %st(2)	#,
 665              	.LVL81:
 666 070d D9C9     		fxch	%st(1)	#
 667 070f DD9C2498 		fstpl	152(%esp)	#
 667      000000
 668 0716 DD842498 		fldl	152(%esp)	#
 668      000000
  96:trigo_fast.c  ****     tlo = tc*sah + (ts*cahyh_h  +(sal + (tlo + (cahyh_l  + (cal*yh + cah*yl))))) ;
 669              		.loc 1 96 0
 670 071d D8CB     		fmul	%st(3), %st	#,
 671 071f DD831000 		fldl	sal@GOTOFF(%ebx)	# sal
 671      0000
 672 0725 D9CD     		fxch	%st(5)	#
 673              	.LBB10:
  87:trigo_fast.c  ****     Add12(thi, tlo, sah,cahyh_h);
 674              		.loc 1 87 0
 675 0727 D8EB     		fsubr	%st(3), %st	#,
 676 0729 DD9C2498 		fstpl	152(%esp)	#
 676      000000
 677 0730 DD842498 		fldl	152(%esp)	#
 677      000000
 678 0737 DEEC     		fsubrp	%st, %st(4)	#,
 679 0739 D9CB     		fxch	%st(3)	#
 680 073b DD9C2498 		fstpl	152(%esp)	#
 680      000000
 681 0742 DD842498 		fldl	152(%esp)	#
 681      000000
 682              	.LBE10:
  96:trigo_fast.c  ****     tlo = tc*sah + (ts*cahyh_h  +(sal + (tlo + (cahyh_l  + (cal*yh + cah*yl))))) ;
 683              		.loc 1 96 0
 684 0749 DB6C2430 		fldt	48(%esp)	# %sfp
 685 074d DC8B0000 		fmull	cal@GOTOFF(%ebx)	# cal
 685      0000
 686 0753 DD842490 		fldl	144(%esp)	# %sfp
 686      000000
 687 075a DC8B0800 		fmull	cah@GOTOFF(%ebx)	# cah
 687      0000
 688 0760 DEC1     		faddp	%st, %st(1)	#,
 689 0762 DC442450 		faddl	80(%esp)	# %sfp
 690 0766 DEC1     		faddp	%st, %st(1)	#,
 691 0768 DEC4     		faddp	%st, %st(4)	#,
 692 076a D9CB     		fxch	%st(3)	#
 693 076c DEC2     		faddp	%st, %st(2)	#,
 694 076e D9C9     		fxch	%st(1)	#
 695 0770 DEC2     		faddp	%st, %st(2)	#,
 696 0772 D9C9     		fxch	%st(1)	#
 697 0774 DD9C2498 		fstpl	152(%esp)	#
 697      000000
 698 077b DD842498 		fldl	152(%esp)	#
 698      000000
 699              	.LBB11:
  97:trigo_fast.c  ****     Add12(*sh,*sl,  thi, tlo );
 700              		.loc 1 97 0
 701 0782 D9C1     		fld	%st(1)	#
 702 0784 D8C1     		fadd	%st(1), %st	#,
 703 0786 DD9C2498 		fstpl	152(%esp)	#
 703      000000
 704 078d DD842498 		fldl	152(%esp)	#
 704      000000
 705 0794 DD17     		fstl	(%edi)	# *sh_30(D)
 706              	.LVL82:
 707 0796 DEE2     		fsubp	%st, %st(2)	#,
 708              	.LVL83:
 709 0798 D9C9     		fxch	%st(1)	#
 710 079a DD9C2498 		fstpl	152(%esp)	#
 710      000000
 711 07a1 DD842498 		fldl	152(%esp)	#
 711      000000
 712 07a8 DEE9     		fsubrp	%st, %st(1)	#,
 713 07aa DD1E     		fstpl	(%esi)	# *sl_38(D)
 714              	.LVL84:
 715              	.L9:
 716              	.LBE11:
  99:trigo_fast.c  **** }
 717              		.loc 1 99 0
 718 07ac 81C4A000 		addl	$160, %esp	#,
 718      0000
 719              		.cfi_def_cfa_offset 16
 720 07b2 5B       		popl	%ebx	#
 721              		.cfi_restore 3
 722              		.cfi_def_cfa_offset 12
 723 07b3 5E       		popl	%esi	#
 724              		.cfi_restore 6
 725              		.cfi_def_cfa_offset 8
 726              	.LVL85:
 727 07b4 5F       		popl	%edi	#
 728              		.cfi_restore 7
 729              		.cfi_def_cfa_offset 4
 730              	.LVL86:
 731 07b5 C3       		ret
 732              		.cfi_endproc
 733              	.LFE7:
 735              		.section	.rodata.str1.1
 736              	.LC11:
 737 0072 496E7369 		.string	"Inside range reduction!"
 737      64652072 
 737      616E6765 
 737      20726564 
 737      75637469 
 738              	.LC12:
 739 008a 783D252E 		.string	"x=%.20e absxhi=%i\n"
 739      32306520 
 739      61627378 
 739      68693D25 
 739      690A00
 740              	.LC13:
 741 009d 7079683D 		.string	"pyh=%.20e, pyl=%.20e\n"
 741      252E3230 
 741      652C2070 
 741      796C3D25 
 741      2E323065 
 742              	.LC14:
 743 00b3 584D4158 		.string	"XMAX_CODY_WAITE_3=%i\n"
 743      5F434F44 
 743      595F5741 
 743      4954455F 
 743      333D2569 
 744              	.LC16:
 745 00c9 494E565F 		.string	"INV_PIO256       =%.20e\n"
 745      50494F32 
 745      35362020 
 745      20202020 
 745      203D252E 
 746              	.LC18:
 747 00e2 52525F44 		.string	"RR_DD_MCH        =%.20e\n"
 747      445F4D43 
 747      48202020 
 747      20202020 
 747      203D252E 
 748              	.LC21:
 749 00fb 6B3D2569 		.string	"k=%i\n"
 749      0A00
 750              	.LC22:
 751 0101 6B643D25 		.string	"kd=%.20e\n"
 751      2E323065 
 751      0A00
 752              	.LC23:
 753 010b 59455320 		.string	"YES (k&127) == 0"
 753      286B2631 
 753      32372920 
 753      3D3D2030 
 753      00
 754              		.section	.rodata.str1.4
 755 0026 0000     		.align 4
 756              	.LC24:
 757 0028 6B63685F 		.string	"kch_h=%.20e kch_l=%.20e kd=%.20e\n\n"
 757      683D252E 
 757      32306520 
 757      6B63685F 
 757      6C3D252E 
 758 004b 00       		.align 4
 759              	.LC28:
 760 004c 6B63685F 		.string	"kch_h=%.20e kch_l=%.20e kd=%.20e\n"
 760      683D252E 
 760      32306520 
 760      6B63685F 
 760      6C3D252E 
 761 006e 0000     		.align 4
 762              	.LC29:
 763 0070 6B636D5F 		.string	"kcm_h=%.20e kcm_l=%.20e kd=%.20e\n\n"
 763      683D252E 
 763      32306520 
 763      6B636D5F 
 763      6C3D252E 
 764              		.text
 766              	trig_range_reduction:
 767              	.LFB9:
 132:trigo_fast.c  **** 
 133:trigo_fast.c  **** #endif /* INLINE_SINCOS */
 134:trigo_fast.c  **** 
 135:trigo_fast.c  **** 
 136:trigo_fast.c  **** 
 137:trigo_fast.c  ****  
 138:trigo_fast.c  **** 
 139:trigo_fast.c  **** 
 140:trigo_fast.c  **** 
 141:trigo_fast.c  **** 
 142:trigo_fast.c  **** 
 143:trigo_fast.c  **** int static trig_range_reduction(double* pyh, double* pyl, 
 144:trigo_fast.c  **** 				double x, int absxhi, 
 145:trigo_fast.c  **** 				double (*scs_fun)(double)   ) {
 768              		.loc 1 145 0
 769              		.cfi_startproc
 770              	.LVL87:
 771 07b6 55       		pushl	%ebp	#
 772              		.cfi_def_cfa_offset 8
 773              		.cfi_offset 5, -8
 774 07b7 57       		pushl	%edi	#
 775              		.cfi_def_cfa_offset 12
 776              		.cfi_offset 7, -12
 777 07b8 56       		pushl	%esi	#
 778              		.cfi_def_cfa_offset 16
 779              		.cfi_offset 6, -16
 780 07b9 53       		pushl	%ebx	#
 781              		.cfi_def_cfa_offset 20
 782              		.cfi_offset 3, -20
 783 07ba 81ECBC01 		subl	$444, %esp	#,
 783      0000
 784              		.cfi_def_cfa_offset 464
 785 07c0 E8FCFFFF 		call	__x86.get_pc_thunk.bx	#
 785      FF
 786 07c5 81C30200 		addl	$_GLOBAL_OFFSET_TABLE_, %ebx	#,
 786      0000
 787 07cb 89C6     		movl	%eax, %esi	# pyh, pyh
 788 07cd 89D5     		movl	%edx, %ebp	# pyl, pyl
 789 07cf 8954243C 		movl	%edx, 60(%esp)	# pyl, %sfp
 790 07d3 DD8424D0 		fldl	464(%esp)	# x
 790      010000
 791 07da DD5C2430 		fstpl	48(%esp)	# %sfp
 792 07de 8BBC24D8 		movl	472(%esp), %edi	# absxhi, absxhi
 792      010000
 146:trigo_fast.c  ****   printf ("Inside range reduction!\n");
 793              		.loc 1 146 0
 794 07e5 8D830000 		leal	.LC11@GOTOFF(%ebx), %eax	#, tmp286
 794      0000
 795              	.LVL88:
 796 07eb 890424   		movl	%eax, (%esp)	# tmp286,
 797 07ee E8FCFFFF 		call	puts@PLT	#
 797      FF
 798              	.LVL89:
 147:trigo_fast.c  ****   printf ("x=%.20e absxhi=%i\n", x,absxhi);
 799              		.loc 1 147 0
 800 07f3 897C240C 		movl	%edi, 12(%esp)	# absxhi,
 801 07f7 F20F1044 		movsd	48(%esp), %xmm0	# %sfp, x
 801      2430
 802 07fd F20F1144 		movsd	%xmm0, 4(%esp)	# x,
 802      2404
 803 0803 8D830000 		leal	.LC12@GOTOFF(%ebx), %eax	#, tmp287
 803      0000
 804 0809 890424   		movl	%eax, (%esp)	# tmp287,
 805 080c E8FCFFFF 		call	printf@PLT	#
 805      FF
 806              	.LVL90:
 148:trigo_fast.c  ****   printf ("pyh=%.20e, pyl=%.20e\n", *pyh,*pyl);
 807              		.loc 1 148 0
 808 0811 DD4500   		fldl	0(%ebp)	# *pyl_13(D)
 809 0814 DD5C240C 		fstpl	12(%esp)	#
 810 0818 DD06     		fldl	(%esi)	# *pyh_15(D)
 811 081a DD5C2404 		fstpl	4(%esp)	#
 812 081e 8D830000 		leal	.LC13@GOTOFF(%ebx), %eax	#, tmp290
 812      0000
 813 0824 890424   		movl	%eax, (%esp)	# tmp290,
 814 0827 E8FCFFFF 		call	printf@PLT	#
 814      FF
 815              	.LVL91:
 149:trigo_fast.c  ****   printf ("XMAX_CODY_WAITE_3=%i\n",XMAX_CODY_WAITE_3);
 816              		.loc 1 149 0
 817 082c C7442404 		movl	$1098457595, 4(%esp)	#,
 817      FB217941 
 818 0834 8D830000 		leal	.LC14@GOTOFF(%ebx), %eax	#, tmp291
 818      0000
 819 083a 890424   		movl	%eax, (%esp)	# tmp291,
 820 083d E8FCFFFF 		call	printf@PLT	#
 820      FF
 821              	.LVL92:
 150:trigo_fast.c  ****   printf ("INV_PIO256       =%.20e\n",INV_PIO256);
 822              		.loc 1 150 0
 823 0842 DD830000 		fldl	.LC15@GOTOFF(%ebx)	#
 823      0000
 824 0848 DD5C2404 		fstpl	4(%esp)	#
 825 084c 8D830000 		leal	.LC16@GOTOFF(%ebx), %eax	#, tmp293
 825      0000
 826 0852 890424   		movl	%eax, (%esp)	# tmp293,
 827 0855 E8FCFFFF 		call	printf@PLT	#
 827      FF
 828              	.LVL93:
 151:trigo_fast.c  ****   printf ("RR_DD_MCH        =%.20e\n",RR_DD_MCH);
 829              		.loc 1 151 0
 830 085a DD830000 		fldl	.LC17@GOTOFF(%ebx)	#
 830      0000
 831 0860 DD5C2404 		fstpl	4(%esp)	#
 832 0864 8D830000 		leal	.LC18@GOTOFF(%ebx), %eax	#, tmp295
 832      0000
 833 086a 890424   		movl	%eax, (%esp)	# tmp295,
 834 086d E8FCFFFF 		call	printf@PLT	#
 834      FF
 835              	.LVL94:
 152:trigo_fast.c  ****   int k;
 153:trigo_fast.c  ****   double kd;
 154:trigo_fast.c  ****   if  (absxhi < XMAX_CODY_WAITE_3) {
 836              		.loc 1 154 0
 837 0872 81FFFA21 		cmpl	$1098457594, %edi	#, absxhi
 837      7941
 838 0878 0F8FCE06 		jg	.L18	#,
 838      0000
 839              	.LBB12:
 155:trigo_fast.c  ****     DOUBLE2INT(k, x * INV_PIO256);
 840              		.loc 1 155 0
 841 087e DD442430 		fldl	48(%esp)	# %sfp
 842 0882 D9C0     		fld	%st(0)	#
 843 0884 DB7C2460 		fstpt	96(%esp)	# %sfp
 844 0888 DBAB0000 		fldt	.LC19@GOTOFF(%ebx)	#
 844      0000
 845 088e DEC9     		fmulp	%st, %st(1)	#,
 846 0890 D8830000 		fadds	.LC20@GOTOFF(%ebx)	#
 846      0000
 847 0896 DD9C2480 		fstpl	128(%esp)	# %sfp
 847      000000
 848 089d 8B842480 		movl	128(%esp), %eax	# %sfp, tmp612
 848      000000
 849 08a4 89C5     		movl	%eax, %ebp	# tmp612, k
 850              	.LVL95:
 851 08a6 89442430 		movl	%eax, 48(%esp)	# k, %sfp
 852              	.LVL96:
 853              	.LBE12:
 156:trigo_fast.c  ****     printf("k=%i\n", k);
 854              		.loc 1 156 0
 855 08aa 89442404 		movl	%eax, 4(%esp)	# tmp613,
 856 08ae 8D830000 		leal	.LC21@GOTOFF(%ebx), %eax	#, tmp302
 856      0000
 857              	.LVL97:
 858 08b4 890424   		movl	%eax, (%esp)	# tmp302,
 859 08b7 E8FCFFFF 		call	printf@PLT	#
 859      FF
 860              	.LVL98:
 157:trigo_fast.c  ****     kd = (double) k;
 861              		.loc 1 157 0
 862 08bc 89AC24DC 		movl	%ebp, 220(%esp)	# k,
 862      000000
 863 08c3 DB8424DC 		fildl	220(%esp)	#
 863      000000
 864 08ca DD9C2480 		fstpl	128(%esp)	# %sfp
 864      000000
 865              	.LVL99:
 158:trigo_fast.c  ****     printf("kd=%.20e\n", kd);
 866              		.loc 1 158 0
 867 08d1 F20F1094 		movsd	128(%esp), %xmm2	# %sfp, _u
 867      24800000 
 867      00
 868 08da F20F1154 		movsd	%xmm2, 4(%esp)	# _u,
 868      2404
 869 08e0 8D830000 		leal	.LC22@GOTOFF(%ebx), %eax	#, tmp303
 869      0000
 870 08e6 890424   		movl	%eax, (%esp)	# tmp303,
 871 08e9 E8FCFFFF 		call	printf@PLT	#
 871      FF
 872              	.LVL100:
 159:trigo_fast.c  ****     if(((k&127) == 0)) { 
 873              		.loc 1 159 0
 874 08ee F7C57F00 		testl	$127, %ebp	#, k
 874      0000
 875 08f4 0F851705 		jne	.L19	#,
 875      0000
 876              	.LBB13:
 160:trigo_fast.c  ****       printf("YES (k&127) == 0\n");
 877              		.loc 1 160 0
 878 08fa 8D830000 		leal	.LC23@GOTOFF(%ebx), %eax	#, tmp305
 878      0000
 879 0900 890424   		movl	%eax, (%esp)	# tmp305,
 880 0903 E8FCFFFF 		call	puts@PLT	#
 880      FF
 881              	.LVL101:
 161:trigo_fast.c  ****       /* Here we risk a large cancellation on yh+yl; 
 162:trigo_fast.c  **** 	 on the other hand we will have sa=0 and ca=1*/
 163:trigo_fast.c  ****       double kch_h,kch_l, kcm_h,kcm_l,  th, tl;
 164:trigo_fast.c  ****       /* TODO : improve this code by pre-splitting CH,  CM and k (as an int) 
 165:trigo_fast.c  **** 	 Then you can improve the precision by taking kmax into account */
 166:trigo_fast.c  ****       /* all this is exact */
 167:trigo_fast.c  ****       
 168:trigo_fast.c  ****       kch_h = 0.0;
 169:trigo_fast.c  ****       kch_l = 0.0;
 170:trigo_fast.c  **** 
 171:trigo_fast.c  ****       printf("kch_h=%.20e kch_l=%.20e kd=%.20e\n\n",kch_h,kch_l,kd);
 882              		.loc 1 171 0
 883 0908 F20F10B4 		movsd	128(%esp), %xmm6	# %sfp, _u
 883      24800000 
 883      00
 884 0911 F20F1174 		movsd	%xmm6, 20(%esp)	# _u,
 884      2414
 885 0917 D9EE     		fldz
 886 0919 DD54240C 		fstl	12(%esp)	#
 887 091d DD5C2404 		fstpl	4(%esp)	#
 888 0921 8D830000 		leal	.LC24@GOTOFF(%ebx), %eax	#, tmp308
 888      0000
 889 0927 890424   		movl	%eax, (%esp)	# tmp308,
 890 092a E8FCFFFF 		call	printf@PLT	#
 890      FF
 891              	.LVL102:
 892              	.LBB14:
 172:trigo_fast.c  ****       Mul12(&kch_h, &kch_l,   kd, RR_DD_MCH);
 893              		.loc 1 172 0
 894 092f 8D830000 		leal	.LC2@GOTOFF(%ebx), %eax	#, tmp309
 894      0000
 895 0935 89C5     		movl	%eax, %ebp	# tmp309, tmp309
 896              	.LVL103:
 897 0937 890424   		movl	%eax, (%esp)	# tmp309,
 898 093a E8FCFFFF 		call	puts@PLT	#
 898      FF
 899              	.LVL104:
 900 093f C744241C 		movl	$1413754136, 28(%esp)	#,
 900      182D4454 
 901 0947 C7442420 		movl	$-1081531909, 32(%esp)	#,
 901      FB2189BF 
 902 094f F20F10B4 		movsd	128(%esp), %xmm6	# %sfp, _u
 902      24800000 
 902      00
 903 0958 F20F1174 		movsd	%xmm6, 20(%esp)	# _u,
 903      2414
 904 095e D9EE     		fldz
 905 0960 DD54240C 		fstl	12(%esp)	#
 906 0964 DD5C2404 		fstpl	4(%esp)	#
 907 0968 8D830000 		leal	.LC3@GOTOFF(%ebx), %eax	#, tmp313
 907      0000
 908 096e 898424C0 		movl	%eax, 192(%esp)	# tmp313, %sfp
 908      000000
 909 0975 890424   		movl	%eax, (%esp)	# tmp313,
 910 0978 E8FCFFFF 		call	printf@PLT	#
 910      FF
 911              	.LVL105:
 912 097d C744240C 		movl	$1413754136, 12(%esp)	#,
 912      182D4454 
 913 0985 C7442410 		movl	$-1081531909, 16(%esp)	#,
 913      FB2189BF 
 914 098d F20F10B4 		movsd	128(%esp), %xmm6	# %sfp, _u
 914      24800000 
 914      00
 915 0996 F20F1174 		movsd	%xmm6, 4(%esp)	# _u,
 915      2404
 916 099c 8D8B0000 		leal	.LC4@GOTOFF(%ebx), %ecx	#, tmp315
 916      0000
 917 09a2 898C24C4 		movl	%ecx, 196(%esp)	# tmp315, %sfp
 917      000000
 918 09a9 890C24   		movl	%ecx, (%esp)	# tmp315,
 919 09ac E8FCFFFF 		call	printf@PLT	#
 919      FF
 920              	.LVL106:
 921 09b1 DD842480 		fldl	128(%esp)	# %sfp
 921      000000
 922 09b8 D9C0     		fld	%st(0)	#
 923 09ba DB7C2470 		fstpt	112(%esp)	# %sfp
 924 09be DC8B0000 		fmull	.LC5@GOTOFF(%ebx)	#
 924      0000
 925 09c4 DD5C2440 		fstpl	64(%esp)	# %sfp
 926              	.LVL107:
 927 09c8 C744240C 		movl	$1466461315, 12(%esp)	#,
 927      836C6857 
 928 09d0 C7442410 		movl	$-1053220357, 16(%esp)	#,
 928      FB2139C1 
 929 09d8 F20F107C 		movsd	64(%esp), %xmm7	# %sfp, up
 929      2440
 930 09de F20F117C 		movsd	%xmm7, 4(%esp)	# up,
 930      2404
 931 09e4 8D930000 		leal	.LC6@GOTOFF(%ebx), %edx	#, tmp320
 931      0000
 932 09ea 899424C8 		movl	%edx, 200(%esp)	# tmp320, %sfp
 932      000000
 933 09f1 891424   		movl	%edx, (%esp)	# tmp320,
 934 09f4 E8FCFFFF 		call	printf@PLT	#
 934      FF
 935              	.LVL108:
 936 09f9 DD442440 		fldl	64(%esp)	# %sfp
 937 09fd DB7C2450 		fstpt	80(%esp)	# %sfp
 938              	.LVL109:
 939 0a01 C744240C 		movl	$1466461315, 12(%esp)	#,
 939      836C6857 
 940 0a09 C7442410 		movl	$-1053220357, 16(%esp)	#,
 940      FB2139C1 
 941 0a11 F20F107C 		movsd	64(%esp), %xmm7	# %sfp, up
 941      2440
 942 0a17 F20F117C 		movsd	%xmm7, 4(%esp)	# up,
 942      2404
 943 0a1d 8DBB0000 		leal	.LC7@GOTOFF(%ebx), %edi	#, tmp322
 943      0000
 944 0a23 89BC24CC 		movl	%edi, 204(%esp)	# tmp322, %sfp
 944      000000
 945 0a2a 893C24   		movl	%edi, (%esp)	# tmp322,
 946 0a2d E8FCFFFF 		call	printf@PLT	#
 946      FF
 947              	.LVL110:
 948 0a32 DB6C2470 		fldt	112(%esp)	# %sfp
 949 0a36 DB6C2450 		fldt	80(%esp)	# %sfp
 950 0a3a DCE9     		fsubr	%st, %st(1)	#,
 951 0a3c DEC1     		faddp	%st, %st(1)	#,
 952 0a3e DD9C24E8 		fstpl	232(%esp)	#
 952      000000
 953 0a45 DD8424E8 		fldl	232(%esp)	#
 953      000000
 954 0a4c DBBC2490 		fstpt	144(%esp)	# %sfp
 954      000000
 955              	.LVL111:
 956 0a53 C744240C 		movl	$1466461315, 12(%esp)	#,
 956      836C6857 
 957 0a5b C7442410 		movl	$-1053220357, 16(%esp)	#,
 957      FB2139C1 
 958 0a63 F20F107C 		movsd	64(%esp), %xmm7	# %sfp, up
 958      2440
 959 0a69 F20F117C 		movsd	%xmm7, 4(%esp)	# up,
 959      2404
 960 0a6f 8DBB0000 		leal	.LC8@GOTOFF(%ebx), %edi	#, tmp327
 960      0000
 961 0a75 89BC24D0 		movl	%edi, 208(%esp)	# tmp327, %sfp
 961      000000
 962 0a7c 893C24   		movl	%edi, (%esp)	# tmp327,
 963 0a7f E8FCFFFF 		call	printf@PLT	#
 963      FF
 964              	.LVL112:
 965 0a84 DB6C2470 		fldt	112(%esp)	# %sfp
 966 0a88 D9C0     		fld	%st(0)	#
 967 0a8a DC8B0000 		fmull	.LC17@GOTOFF(%ebx)	#
 967      0000
 968 0a90 DD9C2488 		fstpl	136(%esp)	# %sfp
 968      000000
 969              	.LVL113:
 970 0a97 DD842488 		fldl	136(%esp)	# %sfp
 970      000000
 971 0a9e DBAC2490 		fldt	144(%esp)	# %sfp
 971      000000
 972 0aa5 DCEA     		fsubr	%st, %st(2)	#,
 973 0aa7 D9CA     		fxch	%st(2)	#
 974 0aa9 DD9C24E8 		fstpl	232(%esp)	#
 974      000000
 975 0ab0 DD8424E8 		fldl	232(%esp)	#
 975      000000
 976 0ab7 DD830000 		fldl	.LC26@GOTOFF(%ebx)	#
 976      0000
 977 0abd D9C3     		fld	%st(3)	#
 978 0abf D8C9     		fmul	%st(1), %st	#,
 979 0ac1 D9CB     		fxch	%st(3)	#
 980 0ac3 D9C0     		fld	%st(0)	#
 981 0ac5 DBBC24A0 		fstpt	160(%esp)	# %sfp
 981      000000
 982 0acc DEEB     		fsubrp	%st, %st(3)	#,
 983 0ace D9830000 		flds	.LC27@GOTOFF(%ebx)	#
 983      0000
 984 0ad4 DCCC     		fmul	%st, %st(4)	#,
 985 0ad6 D9CB     		fxch	%st(3)	#
 986 0ad8 DEC4     		faddp	%st, %st(4)	#,
 987 0ada D8C9     		fmul	%st(1), %st	#,
 988 0adc DEC3     		faddp	%st, %st(3)	#,
 989 0ade D9C0     		fld	%st(0)	#
 990 0ae0 DBBC24B0 		fstpt	176(%esp)	# %sfp
 990      000000
 991 0ae7 DEC9     		fmulp	%st, %st(1)	#,
 992 0ae9 DEC1     		faddp	%st, %st(1)	#,
 993 0aeb DD5C2450 		fstpl	80(%esp)	# %sfp
 994              	.LVL114:
 995 0aef F20F1054 		movsd	80(%esp), %xmm2	# %sfp, kch_l.20
 995      2450
 996 0af5 F20F1154 		movsd	%xmm2, 12(%esp)	# kch_l.20,
 996      240C
 997 0afb F20F10A4 		movsd	136(%esp), %xmm4	# %sfp, kch_h.19
 997      24880000 
 997      00
 998 0b04 F20F1164 		movsd	%xmm4, 4(%esp)	# kch_h.19,
 998      2404
 999 0b0a 8D8B0000 		leal	.LC9@GOTOFF(%ebx), %ecx	#, tmp349
 999      0000
 1000 0b10 898C24D4 		movl	%ecx, 212(%esp)	# tmp349, %sfp
 1000      000000
 1001 0b17 890C24   		movl	%ecx, (%esp)	# tmp349,
 1002 0b1a E8FCFFFF 		call	printf@PLT	#
 1002      FF
 1003              	.LVL115:
 1004 0b1f F20F1054 		movsd	80(%esp), %xmm2	# %sfp, kch_l.20
 1004      2450
 1005 0b25 F20F1154 		movsd	%xmm2, 4(%esp)	# kch_l.20,
 1005      2404
 1006 0b2b 8D930000 		leal	.LC10@GOTOFF(%ebx), %edx	#, tmp350
 1006      0000
 1007 0b31 899424D8 		movl	%edx, 216(%esp)	# tmp350, %sfp
 1007      000000
 1008 0b38 891424   		movl	%edx, (%esp)	# tmp350,
 1009 0b3b E8FCFFFF 		call	printf@PLT	#
 1009      FF
 1010              	.LVL116:
 1011              	.LBE14:
 173:trigo_fast.c  ****       printf("kch_h=%.20e kch_l=%.20e kd=%.20e\n",kch_h,kch_l,kd);//KCH_L is quite different!
 1012              		.loc 1 173 0
 1013 0b40 F20F109C 		movsd	128(%esp), %xmm3	# %sfp, _u
 1013      24800000 
 1013      00
 1014 0b49 F20F115C 		movsd	%xmm3, 20(%esp)	# _u,
 1014      2414
 1015 0b4f F20F1054 		movsd	80(%esp), %xmm2	# %sfp, kch_l.20
 1015      2450
 1016 0b55 F20F1154 		movsd	%xmm2, 12(%esp)	# kch_l.20,
 1016      240C
 1017 0b5b F20F10A4 		movsd	136(%esp), %xmm4	# %sfp, kch_h.19
 1017      24880000 
 1017      00
 1018 0b64 F20F1164 		movsd	%xmm4, 4(%esp)	# kch_h.19,
 1018      2404
 1019 0b6a 8D830000 		leal	.LC28@GOTOFF(%ebx), %eax	#, tmp351
 1019      0000
 1020 0b70 890424   		movl	%eax, (%esp)	# tmp351,
 1021 0b73 E8FCFFFF 		call	printf@PLT	#
 1021      FF
 1022              	.LVL117:
 174:trigo_fast.c  **** 
 175:trigo_fast.c  ****       printf("kcm_h=%.20e kcm_l=%.20e kd=%.20e\n\n",kch_h,kch_l,kd);
 1023              		.loc 1 175 0
 1024 0b78 F20F109C 		movsd	128(%esp), %xmm3	# %sfp, _u
 1024      24800000 
 1024      00
 1025 0b81 F20F115C 		movsd	%xmm3, 20(%esp)	# _u,
 1025      2414
 1026 0b87 F20F1054 		movsd	80(%esp), %xmm2	# %sfp, kch_l.20
 1026      2450
 1027 0b8d F20F1154 		movsd	%xmm2, 12(%esp)	# kch_l.20,
 1027      240C
 1028 0b93 F20F10A4 		movsd	136(%esp), %xmm4	# %sfp, kch_h.19
 1028      24880000 
 1028      00
 1029 0b9c F20F1164 		movsd	%xmm4, 4(%esp)	# kch_h.19,
 1029      2404
 1030 0ba2 8DBB0000 		leal	.LC29@GOTOFF(%ebx), %edi	#, tmp352
 1030      0000
 1031 0ba8 893C24   		movl	%edi, (%esp)	# tmp352,
 1032 0bab E8FCFFFF 		call	printf@PLT	#
 1032      FF
 1033              	.LVL118:
 1034              	.LBB15:
 176:trigo_fast.c  ****       Mul12(&kcm_h, &kcm_l,   kd, RR_DD_MCM);
 1035              		.loc 1 176 0
 1036 0bb0 892C24   		movl	%ebp, (%esp)	# tmp309,
 1037 0bb3 E8FCFFFF 		call	puts@PLT	#
 1037      FF
 1038              	.LVL119:
 1039 0bb8 C744241C 		movl	$856972295, 28(%esp)	#,
 1039      075C1433 
 1040 0bc0 C7442420 		movl	$-1138645466, 32(%esp)	#,
 1040      26A621BC 
 1041 0bc8 F20F109C 		movsd	128(%esp), %xmm3	# %sfp, _u
 1041      24800000 
 1041      00
 1042 0bd1 F20F115C 		movsd	%xmm3, 20(%esp)	# _u,
 1042      2414
 1043 0bd7 D9EE     		fldz
 1044 0bd9 DD54240C 		fstl	12(%esp)	#
 1045 0bdd DD5C2404 		fstpl	4(%esp)	#
 1046 0be1 8B8424C0 		movl	192(%esp), %eax	# %sfp, tmp313
 1046      000000
 1047 0be8 890424   		movl	%eax, (%esp)	# tmp313,
 1048 0beb E8FCFFFF 		call	printf@PLT	#
 1048      FF
 1049              	.LVL120:
 1050 0bf0 C744240C 		movl	$856972295, 12(%esp)	#,
 1050      075C1433 
 1051 0bf8 C7442410 		movl	$-1138645466, 16(%esp)	#,
 1051      26A621BC 
 1052 0c00 F20F109C 		movsd	128(%esp), %xmm3	# %sfp, _u
 1052      24800000 
 1052      00
 1053 0c09 F20F115C 		movsd	%xmm3, 4(%esp)	# _u,
 1053      2404
 1054 0c0f 8B8C24C4 		movl	196(%esp), %ecx	# %sfp, tmp315
 1054      000000
 1055 0c16 890C24   		movl	%ecx, (%esp)	# tmp315,
 1056 0c19 E8FCFFFF 		call	printf@PLT	#
 1056      FF
 1057              	.LVL121:
 1058 0c1e C744240C 		movl	$893984973, 12(%esp)	#,
 1058      CD204935 
 1059 0c26 C7442410 		movl	$-1110333914, 16(%esp)	#,
 1059      26A6D1BD 
 1060 0c2e F20F107C 		movsd	64(%esp), %xmm7	# %sfp, up
 1060      2440
 1061 0c34 F20F117C 		movsd	%xmm7, 4(%esp)	# up,
 1061      2404
 1062 0c3a 8B9424C8 		movl	200(%esp), %edx	# %sfp, tmp320
 1062      000000
 1063 0c41 891424   		movl	%edx, (%esp)	# tmp320,
 1064 0c44 E8FCFFFF 		call	printf@PLT	#
 1064      FF
 1065              	.LVL122:
 1066 0c49 C744240C 		movl	$893984973, 12(%esp)	#,
 1066      CD204935 
 1067 0c51 C7442410 		movl	$-1110333914, 16(%esp)	#,
 1067      26A6D1BD 
 1068 0c59 F20F107C 		movsd	64(%esp), %xmm7	# %sfp, up
 1068      2440
 1069 0c5f F20F117C 		movsd	%xmm7, 4(%esp)	# up,
 1069      2404
 1070 0c65 8B8424CC 		movl	204(%esp), %eax	# %sfp, tmp322
 1070      000000
 1071 0c6c 890424   		movl	%eax, (%esp)	# tmp322,
 1072 0c6f E8FCFFFF 		call	printf@PLT	#
 1072      FF
 1073              	.LVL123:
 1074 0c74 C744240C 		movl	$893984973, 12(%esp)	#,
 1074      CD204935 
 1075 0c7c C7442410 		movl	$-1110333914, 16(%esp)	#,
 1075      26A6D1BD 
 1076 0c84 F20F107C 		movsd	64(%esp), %xmm7	# %sfp, up
 1076      2440
 1077 0c8a F20F117C 		movsd	%xmm7, 4(%esp)	# up,
 1077      2404
 1078 0c90 8B8424D0 		movl	208(%esp), %eax	# %sfp, tmp327
 1078      000000
 1079 0c97 890424   		movl	%eax, (%esp)	# tmp327,
 1080 0c9a E8FCFFFF 		call	printf@PLT	#
 1080      FF
 1081              	.LVL124:
 1082 0c9f DB6C2470 		fldt	112(%esp)	# %sfp
 1083 0ca3 DC8B0000 		fmull	.LC30@GOTOFF(%ebx)	#
 1083      0000
 1084 0ca9 DD9C24E8 		fstpl	232(%esp)	#
 1084      000000
 1085 0cb0 DD8424E8 		fldl	232(%esp)	#
 1085      000000
 1086              	.LVL125:
 1087 0cb7 D9C0     		fld	%st(0)	#
 1088              	.LVL126:
 1089 0cb9 DD830000 		fldl	.LC32@GOTOFF(%ebx)	#
 1089      0000
 1090 0cbf DBAC2490 		fldt	144(%esp)	# %sfp
 1090      000000
 1091 0cc6 D9C0     		fld	%st(0)	#
 1092 0cc8 D8CA     		fmul	%st(2), %st	#,
 1093 0cca D9CB     		fxch	%st(3)	#
 1094 0ccc D9C0     		fld	%st(0)	#
 1095 0cce DBBC2490 		fstpt	144(%esp)	# %sfp
 1095      000000
 1096              	.LVL127:
 1097 0cd5 DEEB     		fsubrp	%st, %st(3)	#,
 1098 0cd7 D9830000 		flds	.LC33@GOTOFF(%ebx)	#
 1098      0000
 1099 0cdd DCC9     		fmul	%st, %st(1)	#,
 1100 0cdf D9CB     		fxch	%st(3)	#
 1101 0ce1 DEC1     		faddp	%st, %st(1)	#,
 1102 0ce3 DBAC24B0 		fldt	176(%esp)	# %sfp
 1102      000000
 1103 0cea DCCA     		fmul	%st, %st(2)	#,
 1104 0cec D9CA     		fxch	%st(2)	#
 1105 0cee DEC1     		faddp	%st, %st(1)	#,
 1106 0cf0 D9CA     		fxch	%st(2)	#
 1107 0cf2 DEC9     		fmulp	%st, %st(1)	#,
 1108 0cf4 DEC1     		faddp	%st, %st(1)	#,
 1109 0cf6 DD5C2440 		fstpl	64(%esp)	# %sfp
 1110              	.LVL128:
 1111 0cfa F20F106C 		movsd	64(%esp), %xmm5	# %sfp, kcm_l.24
 1111      2440
 1112 0d00 F20F116C 		movsd	%xmm5, 12(%esp)	# kcm_l.24,
 1112      240C
 1113 0d06 DD5C2404 		fstpl	4(%esp)	#
 1114 0d0a 8B8C24D4 		movl	212(%esp), %ecx	# %sfp, tmp349
 1114      000000
 1115 0d11 890C24   		movl	%ecx, (%esp)	# tmp349,
 1116 0d14 E8FCFFFF 		call	printf@PLT	#
 1116      FF
 1117              	.LVL129:
 1118 0d19 F20F106C 		movsd	64(%esp), %xmm5	# %sfp, kcm_l.24
 1118      2440
 1119 0d1f F20F116C 		movsd	%xmm5, 4(%esp)	# kcm_l.24,
 1119      2404
 1120 0d25 8B9424D8 		movl	216(%esp), %edx	# %sfp, tmp350
 1120      000000
 1121 0d2c 891424   		movl	%edx, (%esp)	# tmp350,
 1122 0d2f E8FCFFFF 		call	printf@PLT	#
 1122      FF
 1123              	.LVL130:
 1124              	.LBE15:
 177:trigo_fast.c  ****       printf("kcm_h=%.20e kcm_l=%.20e kd=%.20e\n\n",kch_h,kch_l,kd);
 1125              		.loc 1 177 0
 1126 0d34 F20F109C 		movsd	128(%esp), %xmm3	# %sfp, _u
 1126      24800000 
 1126      00
 1127 0d3d F20F115C 		movsd	%xmm3, 20(%esp)	# _u,
 1127      2414
 1128 0d43 F20F1054 		movsd	80(%esp), %xmm2	# %sfp, kch_l.20
 1128      2450
 1129 0d49 F20F1154 		movsd	%xmm2, 12(%esp)	# kch_l.20,
 1129      240C
 1130 0d4f F20F10A4 		movsd	136(%esp), %xmm4	# %sfp, kch_h.19
 1130      24880000 
 1130      00
 1131 0d58 F20F1164 		movsd	%xmm4, 4(%esp)	# kch_h.19,
 1131      2404
 1132 0d5e 893C24   		movl	%edi, (%esp)	# tmp352,
 1133 0d61 E8FCFFFF 		call	printf@PLT	#
 1133      FF
 1134              	.LVL131:
 1135              	.LBB16:
 178:trigo_fast.c  **** 
 179:trigo_fast.c  ****       Add12 (th,tl,  kch_l, kcm_h) ;
 1136              		.loc 1 179 0
 1137 0d66 DD442450 		fldl	80(%esp)	# %sfp
 1138              	.LVL132:
 1139 0d6a DBAC2490 		fldt	144(%esp)	# %sfp
 1139      000000
 1140              	.LVL133:
 1141 0d71 D9C0     		fld	%st(0)	#
 1142 0d73 D8C2     		fadd	%st(2), %st	#,
 1143 0d75 DD9C24E8 		fstpl	232(%esp)	#
 1143      000000
 1144 0d7c DD8424E8 		fldl	232(%esp)	#
 1144      000000
 1145              	.LVL134:
 1146              	.LBE16:
 1147              	.LBB17:
 180:trigo_fast.c  ****       /* only rounding error in the last multiplication and addition */ 
 181:trigo_fast.c  ****       Add22 (pyh, pyl,    (x + kch_h) , (kcm_l - kd*RR_DD_CL),   th, tl) ;
 1148              		.loc 1 181 0
 1149 0d83 DB6C2460 		fldt	96(%esp)	# %sfp
 1150              	.LVL135:
 1151 0d87 DBAC24A0 		fldt	160(%esp)	# %sfp
 1151      000000
 1152 0d8e DEC1     		faddp	%st, %st(1)	#,
 1153              	.LVL136:
 1154 0d90 D9C1     		fld	%st(1)	#
 1155              	.LVL137:
 1156 0d92 D8C1     		fadd	%st(1), %st	#,
 1157 0d94 DD9C24E8 		fstpl	232(%esp)	#
 1157      000000
 1158 0d9b DD8424E8 		fldl	232(%esp)	#
 1158      000000
 1159              	.LVL138:
 1160 0da2 DCE9     		fsubr	%st, %st(1)	#,
 1161              	.LVL139:
 1162 0da4 D9C9     		fxch	%st(1)	#
 1163              	.LVL140:
 1164 0da6 D8C2     		fadd	%st(2), %st	#,
 1165              	.LVL141:
 1166 0da8 D9CA     		fxch	%st(2)	#
 1167              	.LBE17:
 1168              	.LBB18:
 179:trigo_fast.c  ****       Add12 (th,tl,  kch_l, kcm_h) ;
 1169              		.loc 1 179 0
 1170 0daa DEE4     		fsubp	%st, %st(4)	#,
 1171 0dac D9CB     		fxch	%st(3)	#
 1172 0dae DD9C24E8 		fstpl	232(%esp)	#
 1172      000000
 1173 0db5 DD8424E8 		fldl	232(%esp)	#
 1173      000000
 1174 0dbc DEEA     		fsubrp	%st, %st(2)	#,
 1175 0dbe D9C9     		fxch	%st(1)	#
 1176 0dc0 DD9C24E8 		fstpl	232(%esp)	#
 1176      000000
 1177 0dc7 DD8424E8 		fldl	232(%esp)	#
 1177      000000
 1178              	.LBE18:
 1179              	.LBB19:
 1180              		.loc 1 181 0
 1181 0dce DEC1     		faddp	%st, %st(1)	#,
 1182 0dd0 DB6C2470 		fldt	112(%esp)	# %sfp
 1183 0dd4 DC8B0000 		fmull	.LC34@GOTOFF(%ebx)	#
 1183      0000
 1184 0dda DC442440 		faddl	64(%esp)	# %sfp
 1185 0dde DEC1     		faddp	%st, %st(1)	#,
 1186 0de0 DD9C24E8 		fstpl	232(%esp)	#
 1186      000000
 1187 0de7 DD8424E8 		fldl	232(%esp)	#
 1187      000000
 1188 0dee D9C1     		fld	%st(1)	#
 1189 0df0 D8C1     		fadd	%st(1), %st	#,
 1190 0df2 DD9C24E8 		fstpl	232(%esp)	#
 1190      000000
 1191 0df9 DD8424E8 		fldl	232(%esp)	#
 1191      000000
 1192 0e00 DD16     		fstl	(%esi)	# *pyh_15(D)
 1193 0e02 DEEA     		fsubrp	%st, %st(2)	#,
 1194 0e04 DEC1     		faddp	%st, %st(1)	#,
 1195 0e06 8B44243C 		movl	60(%esp), %eax	# %sfp, pyl
 1196 0e0a DD18     		fstpl	(%eax)	# *pyl_13(D)
 1197              	.LBE19:
 1198              	.LBE13:
 1199 0e0c E9370700 		jmp	.L20	#
 1199      00
 1200              	.LVL142:
 1201              	.L19:
 182:trigo_fast.c  ****     } 
 183:trigo_fast.c  ****     else {      
 184:trigo_fast.c  ****       /* Argument reduction  by Cody & Waite algorithm */ 
 185:trigo_fast.c  ****       /* Here we do not care about cancellations on *pyh+yl */
 186:trigo_fast.c  ****       if (absxhi < XMAX_CODY_WAITE_2) { 
 1202              		.loc 1 186 0
 1203 0e11 81FFFA21 		cmpl	$1089020410, %edi	#, absxhi
 1203      E940
 1204 0e17 7F6C     		jg	.L21	#,
 1205              	.LBB20:
 187:trigo_fast.c  **** 	/* all this is exact but the rightmost multiplication */
 188:trigo_fast.c  **** 	Add12 (*pyh,*pyl,  (x - kd*RR_CW2_CH),  (kd*RR_CW2_MCL) ) ;
 1206              		.loc 1 188 0
 1207 0e19 DD842480 		fldl	128(%esp)	# %sfp
 1207      000000
 1208              	.LVL143:
 1209 0e20 D9C0     		fld	%st(0)	#
 1210 0e22 DC8B0000 		fmull	.LC35@GOTOFF(%ebx)	#
 1210      0000
 1211              	.LVL144:
 1212 0e28 DB6C2460 		fldt	96(%esp)	# %sfp
 1213 0e2c DEE1     		fsubp	%st, %st(1)	#,
 1214 0e2e DD9C24E8 		fstpl	232(%esp)	#
 1214      000000
 1215 0e35 DD8424E8 		fldl	232(%esp)	#
 1215      000000
 1216 0e3c D9C9     		fxch	%st(1)	#
 1217 0e3e DC8B0000 		fmull	.LC36@GOTOFF(%ebx)	#
 1217      0000
 1218 0e44 DD9C24E8 		fstpl	232(%esp)	#
 1218      000000
 1219 0e4b DD8424E8 		fldl	232(%esp)	#
 1219      000000
 1220 0e52 D9C1     		fld	%st(1)	#
 1221 0e54 D8C1     		fadd	%st(1), %st	#,
 1222 0e56 DD9C24E8 		fstpl	232(%esp)	#
 1222      000000
 1223 0e5d DD8424E8 		fldl	232(%esp)	#
 1223      000000
 1224 0e64 DD16     		fstl	(%esi)	# *pyh_15(D)
 1225              	.LVL145:
 1226 0e66 DEE2     		fsubp	%st, %st(2)	#,
 1227              	.LVL146:
 1228 0e68 D9C9     		fxch	%st(1)	#
 1229 0e6a DD9C24E8 		fstpl	232(%esp)	#
 1229      000000
 1230 0e71 DD8424E8 		fldl	232(%esp)	#
 1230      000000
 1231 0e78 DEE9     		fsubrp	%st, %st(1)	#,
 1232 0e7a 8B44243C 		movl	60(%esp), %eax	# %sfp, pyl
 1233 0e7e DD18     		fstpl	(%eax)	# *pyl_13(D)
 1234              	.LBE20:
 1235 0e80 E9C30600 		jmp	.L20	#
 1235      00
 1236              	.LVL147:
 1237              	.L21:
 1238              	.LBB21:
 189:trigo_fast.c  ****       }
 190:trigo_fast.c  ****      else 
 191:trigo_fast.c  ****        /* all this is exact but the rightmost multiplication */
 192:trigo_fast.c  ****        Add12Cond(*pyh,*pyl,  (x - kd*RR_CW3_CH) -  kd*RR_CW3_CM,   kd*RR_CW3_MCL);
 1239              		.loc 1 192 0
 1240 0e85 DD842480 		fldl	128(%esp)	# %sfp
 1240      000000
 1241 0e8c D9C0     		fld	%st(0)	#
 1242 0e8e D88B0000 		fmuls	.LC37@GOTOFF(%ebx)	#
 1242      0000
 1243 0e94 DB6C2460 		fldt	96(%esp)	# %sfp
 1244 0e98 DEE1     		fsubp	%st, %st(1)	#,
 1245 0e9a D9C1     		fld	%st(1)	#
 1246 0e9c D88B0000 		fmuls	.LC38@GOTOFF(%ebx)	#
 1246      0000
 1247 0ea2 DEE9     		fsubrp	%st, %st(1)	#,
 1248 0ea4 D9C9     		fxch	%st(1)	#
 1249              	.LVL148:
 1250 0ea6 DC8B0000 		fmull	.LC39@GOTOFF(%ebx)	#
 1250      0000
 1251              	.LVL149:
 1252 0eac D9C9     		fxch	%st(1)	#
 1253              	.LVL150:
 1254 0eae DD9424E8 		fstl	232(%esp)	#
 1254      000000
 1255              	.LVL151:
 1256 0eb5 DD8424E8 		fldl	232(%esp)	#
 1256      000000
 1257 0ebc D9CA     		fxch	%st(2)	#
 1258 0ebe DD9424E8 		fstl	232(%esp)	#
 1258      000000
 1259              	.LVL152:
 1260 0ec5 DD8424E8 		fldl	232(%esp)	#
 1260      000000
 1261 0ecc D9C3     		fld	%st(3)	#
 1262 0ece D8C1     		fadd	%st(1), %st	#,
 1263 0ed0 DD9C24E8 		fstpl	232(%esp)	#
 1263      000000
 1264 0ed7 DD8424E8 		fldl	232(%esp)	#
 1264      000000
 1265 0ede DD16     		fstl	(%esi)	# *pyh_15(D)
 1266 0ee0 D9C3     		fld	%st(3)	#
 1267 0ee2 D9EE     		fldz
 1268 0ee4 D9CD     		fxch	%st(5)	#
 1269 0ee6 DFED     		fucomip	%st(5), %st	#,
 1270 0ee8 DDDC     		fstp	%st(4)	#
 1271 0eea 7706     		ja	.L22	#,
 1272 0eec D9CB     		fxch	%st(3)	#
 1273              		.loc 1 192 0 is_stmt 0 discriminator 2
 1274 0eee D9E0     		fchs
 1275 0ef0 D9CB     		fxch	%st(3)	#
 1276              	.L22:
 1277              		.loc 1 192 0 discriminator 3
 1278 0ef2 D9C2     		fld	%st(2)	#
 1279 0ef4 D9EE     		fldz
 1280 0ef6 D9CC     		fxch	%st(4)	#
 1281 0ef8 DFEC     		fucomip	%st(4), %st	#,
 1282 0efa DDDB     		fstp	%st(3)	#
 1283 0efc 770A     		ja	.L39	#,
 1284 0efe D9CA     		fxch	%st(2)	#
 1285              		.loc 1 192 0 discriminator 5
 1286 0f00 D9E0     		fchs
 1287 0f02 D9CA     		fxch	%st(2)	#
 1288 0f04 D9CB     		fxch	%st(3)	#
 1289 0f06 EB02     		jmp	.L23	#
 1290              	.L39:
 1291 0f08 D9CB     		fxch	%st(3)	#
 1292              	.L23:
 1293              		.loc 1 192 0 discriminator 6
 1294 0f0a DFEA     		fucomip	%st(2), %st	#,
 1295 0f0c DDD9     		fstp	%st(1)	#
 1296 0f0e 761F     		jbe	.L37	#,
 1297 0f10 D9CA     		fxch	%st(2)	#
 1298              	.LVL153:
 1299              		.loc 1 192 0 discriminator 1
 1300 0f12 DEE9     		fsubrp	%st, %st(1)	#,
 1301              	.LVL154:
 1302 0f14 DD9C24E8 		fstpl	232(%esp)	#
 1302      000000
 1303 0f1b DD8424E8 		fldl	232(%esp)	#
 1303      000000
 1304 0f22 DEE9     		fsubrp	%st, %st(1)	#,
 1305 0f24 8B44243C 		movl	60(%esp), %eax	# %sfp, pyl
 1306 0f28 DD18     		fstpl	(%eax)	# *pyl_13(D)
 1307 0f2a E9190600 		jmp	.L20	#
 1307      00
 1308              	.L37:
 1309              	.LVL155:
 1310              		.loc 1 192 0 discriminator 2
 1311 0f2f DEE9     		fsubrp	%st, %st(1)	#,
 1312 0f31 DD9C24E8 		fstpl	232(%esp)	#
 1312      000000
 1313 0f38 DD8424E8 		fldl	232(%esp)	#
 1313      000000
 1314              	.LVL156:
 1315 0f3f DEE9     		fsubrp	%st, %st(1)	#,
 1316 0f41 8B44243C 		movl	60(%esp), %eax	# %sfp, pyl
 1317 0f45 DD18     		fstpl	(%eax)	# *pyl_13(D)
 1318 0f47 E9FC0500 		jmp	.L20	#
 1318      00
 1319              	.LVL157:
 1320              	.L18:
 1321              	.LBE21:
 193:trigo_fast.c  ****     }
 194:trigo_fast.c  ****   }
 195:trigo_fast.c  ****   else  if ( absxhi < XMAX_DDRR ) {
 1322              		.loc 1 195 0 is_stmt 1
 1323 0f4c 81FFFA21 		cmpl	$1119429114, %edi	#, absxhi
 1323      B942
 1324 0f52 0F8F3905 		jg	.L26	#,
 1324      0000
 1325              	.LBB22:
 1326              	.LBB23:
 196:trigo_fast.c  ****     long long int kl;
 197:trigo_fast.c  ****     double kch_h,kch_l, kcm_h,kcm_l,  th, tl;
 198:trigo_fast.c  ****     DOUBLE2LONGINT(kl, x*INV_PIO256);
 1327              		.loc 1 198 0
 1328 0f58 DD442430 		fldl	48(%esp)	# %sfp
 1329 0f5c D9C0     		fld	%st(0)	#
 1330 0f5e DB7C2460 		fstpt	96(%esp)	# %sfp
 1331 0f62 DBAB0000 		fldt	.LC19@GOTOFF(%ebx)	#
 1331      0000
 1332 0f68 DEC9     		fmulp	%st, %st(1)	#,
 1333 0f6a D9C0     		fld	%st(0)	#
 1334 0f6c D8830000 		fadds	.LC20@GOTOFF(%ebx)	#
 1334      0000
 1335 0f72 DD5C2430 		fstpl	48(%esp)	# %sfp
 1336 0f76 8B7C2430 		movl	48(%esp), %edi	# %sfp, D.3350
 1337 0f7a 8B4C2434 		movl	52(%esp), %ecx	# %sfp, D.3350
 1338              	.LVL158:
 1339 0f7e 89F8     		movl	%edi, %eax	# D.3350, kl
 1340 0f80 89CD     		movl	%ecx, %ebp	# D.3350, tmp713
 1341              	.LVL159:
 1342 0f82 81E5FFFF 		andl	$524287, %ebp	#, tmp713
 1342      0700
 1343 0f88 89EA     		movl	%ebp, %edx	# tmp713, kl
 1344 0f8a D9EE     		fldz
 1345 0f8c D9C9     		fxch	%st(1)	#
 1346 0f8e DFE9     		fucomip	%st(1), %st	#,
 1347 0f90 DDD8     		fstp	%st(0)	#
 1348 0f92 7308     		jae	.L29	#,
 1349              		.loc 1 198 0 is_stmt 0 discriminator 2
 1350 0f94 81C90000 		orl	$-524288, %ecx	#, tmp714
 1350      F8FF
 1351              	.LVL160:
 1352 0f9a 89CA     		movl	%ecx, %edx	# tmp714, kl
 1353              	.LVL161:
 1354              	.L29:
 1355              	.LBE23:
 199:trigo_fast.c  ****     kd=(double)kl;
 200:trigo_fast.c  ****     k = (int) kl;
 1356              		.loc 1 200 0 is_stmt 1 discriminator 1
 1357 0f9c 89442430 		movl	%eax, 48(%esp)	# k, %sfp
 1358              	.LVL162:
 201:trigo_fast.c  **** #if DEBUG
 202:trigo_fast.c  ****     printf("kl=%lld  \n", kl);
 203:trigo_fast.c  **** #endif
 204:trigo_fast.c  ****     if((k&127) == 0) { 
 1359              		.loc 1 204 0 discriminator 1
 1360 0fa0 A87F     		testb	$127, %al	#, k
 1361 0fa2 0F859300 		jne	.L30	#,
 1361      0000
 1362              	.LVL163:
 1363              	.LBB24:
 205:trigo_fast.c  ****       scs_t X, Y,Yh,Yl;
 206:trigo_fast.c  ****       scs_set_d(X, x*128.0); 
 1364              		.loc 1 206 0
 1365 0fa8 DB6C2460 		fldt	96(%esp)	# %sfp
 1366 0fac D88B0000 		fmuls	.LC40@GOTOFF(%ebx)	#
 1366      0000
 1367 0fb2 DD5C2404 		fstpl	4(%esp)	#
 1368 0fb6 8DBC24F0 		leal	240(%esp), %edi	#, tmp462
 1368      000000
 1369 0fbd 893C24   		movl	%edi, (%esp)	# tmp462,
 1370 0fc0 E8FCFFFF 		call	scs_set_d@PLT	#
 1370      FF
 1371              	.LVL164:
 207:trigo_fast.c  ****       k= rem_pio2_scs(Y, X);
 1372              		.loc 1 207 0
 1373 0fc5 897C2404 		movl	%edi, 4(%esp)	# tmp462,
 1374 0fc9 8DBC2420 		leal	288(%esp), %edi	#, tmp464
 1374      010000
 1375 0fd0 893C24   		movl	%edi, (%esp)	# tmp464,
 1376 0fd3 E8FCFFFF 		call	rem_pio2_scs@PLT	#
 1376      FF
 1377              	.LVL165:
 1378 0fd8 89442430 		movl	%eax, 48(%esp)	#, %sfp
 1379              	.LVL166:
 208:trigo_fast.c  ****       /* TODO an optimized procedure for the following */
 209:trigo_fast.c  ****       scs_get_d(pyh, Y);
 1380              		.loc 1 209 0
 1381 0fdc 897C2404 		movl	%edi, 4(%esp)	# tmp464,
 1382 0fe0 893424   		movl	%esi, (%esp)	# pyh,
 1383 0fe3 E8FCFFFF 		call	scs_get_d@PLT	#
 1383      FF
 1384              	.LVL167:
 210:trigo_fast.c  ****       scs_set_d(Yh, *pyh);
 1385              		.loc 1 210 0
 1386 0fe8 DD06     		fldl	(%esi)	# *pyh_15(D)
 1387 0fea DD5C2404 		fstpl	4(%esp)	#
 1388 0fee 8D842450 		leal	336(%esp), %eax	#, tmp467
 1388      010000
 1389 0ff5 89C5     		movl	%eax, %ebp	# tmp467, tmp467
 1390 0ff7 890424   		movl	%eax, (%esp)	# tmp467,
 1391 0ffa E8FCFFFF 		call	scs_set_d@PLT	#
 1391      FF
 1392              	.LVL168:
 211:trigo_fast.c  ****       scs_sub(Yl, Y,Yh);
 1393              		.loc 1 211 0
 1394 0fff 896C2408 		movl	%ebp, 8(%esp)	# tmp467,
 1395 1003 897C2404 		movl	%edi, 4(%esp)	# tmp464,
 1396 1007 8DBC2480 		leal	384(%esp), %edi	#, tmp470
 1396      010000
 1397 100e 893C24   		movl	%edi, (%esp)	# tmp470,
 1398 1011 E8FCFFFF 		call	scs_sub@PLT	#
 1398      FF
 1399              	.LVL169:
 212:trigo_fast.c  ****       scs_get_d(pyl, Yl);
 1400              		.loc 1 212 0
 1401 1016 897C2404 		movl	%edi, 4(%esp)	# tmp470,
 1402 101a 8B7C243C 		movl	60(%esp), %edi	# %sfp, pyl
 1403 101e 893C24   		movl	%edi, (%esp)	# pyl,
 1404 1021 E8FCFFFF 		call	scs_get_d@PLT	#
 1404      FF
 1405              	.LVL170:
 213:trigo_fast.c  ****       *pyh = *pyh * (1./128.) ;
 1406              		.loc 1 213 0
 1407 1026 D9830000 		flds	.LC41@GOTOFF(%ebx)	#
 1407      0000
 1408 102c D9C0     		fld	%st(0)	#
 1409 102e DC0E     		fmull	(%esi)	# *pyh_15(D)
 1410 1030 DD1E     		fstpl	(%esi)	# *pyh_15(D)
 214:trigo_fast.c  ****       *pyl = *pyl * (1./128.) ;
 1411              		.loc 1 214 0
 1412 1032 DC0F     		fmull	(%edi)	# *pyl_13(D)
 1413 1034 DD1F     		fstpl	(%edi)	# *pyl_13(D)
 1414              	.LBE24:
 1415 1036 E90D0500 		jmp	.L20	#
 1415      00
 1416              	.LVL171:
 1417              	.L30:
 199:trigo_fast.c  ****     kd=(double)kl;
 1418              		.loc 1 199 0
 1419 103b 898424E0 		movl	%eax, 224(%esp)	# kl,
 1419      000000
 1420 1042 899424E4 		movl	%edx, 228(%esp)	# kl,
 1420      000000
 1421 1049 DFAC24E0 		fildq	224(%esp)	#
 1421      000000
 1422 1050 DD5C2440 		fstpl	64(%esp)	# %sfp
 1423              	.LBB25:
 215:trigo_fast.c  ****     } 
 216:trigo_fast.c  ****     else {
 217:trigo_fast.c  ****       /* all this is exact */
 218:trigo_fast.c  ****       Mul12(&kch_h, &kch_l,   kd, RR_DD_MCH);
 1424              		.loc 1 218 0
 1425 1054 8D830000 		leal	.LC2@GOTOFF(%ebx), %eax	#, tmp481
 1425      0000
 1426              	.LVL172:
 1427 105a 89C5     		movl	%eax, %ebp	# tmp481, tmp481
 1428 105c 890424   		movl	%eax, (%esp)	# tmp481,
 1429 105f E8FCFFFF 		call	puts@PLT	#
 1429      FF
 1430              	.LVL173:
 1431 1064 C744241C 		movl	$1413754136, 28(%esp)	#,
 1431      182D4454 
 1432 106c C7442420 		movl	$-1081531909, 32(%esp)	#,
 1432      FB2189BF 
 1433 1074 F20F105C 		movsd	64(%esp), %xmm3	# %sfp, _u
 1433      2440
 1434 107a F20F115C 		movsd	%xmm3, 20(%esp)	# _u,
 1434      2414
 1435 1080 D9EE     		fldz
 1436 1082 DD54240C 		fstl	12(%esp)	#
 1437 1086 DD5C2404 		fstpl	4(%esp)	#
 1438 108a 8D830000 		leal	.LC3@GOTOFF(%ebx), %eax	#, tmp483
 1438      0000
 1439 1090 898424B0 		movl	%eax, 176(%esp)	# tmp483, %sfp
 1439      000000
 1440 1097 890424   		movl	%eax, (%esp)	# tmp483,
 1441 109a E8FCFFFF 		call	printf@PLT	#
 1441      FF
 1442              	.LVL174:
 1443 109f C744240C 		movl	$1413754136, 12(%esp)	#,
 1443      182D4454 
 1444 10a7 C7442410 		movl	$-1081531909, 16(%esp)	#,
 1444      FB2189BF 
 1445 10af F20F105C 		movsd	64(%esp), %xmm3	# %sfp, _u
 1445      2440
 1446 10b5 F20F115C 		movsd	%xmm3, 4(%esp)	# _u,
 1446      2404
 1447 10bb 8D930000 		leal	.LC4@GOTOFF(%ebx), %edx	#, tmp485
 1447      0000
 1448 10c1 899424C0 		movl	%edx, 192(%esp)	# tmp485, %sfp
 1448      000000
 1449 10c8 891424   		movl	%edx, (%esp)	# tmp485,
 1450 10cb E8FCFFFF 		call	printf@PLT	#
 1450      FF
 1451              	.LVL175:
 1452 10d0 DD442440 		fldl	64(%esp)	# %sfp
 1453 10d4 D9C0     		fld	%st(0)	#
 1454 10d6 DB7C2450 		fstpt	80(%esp)	# %sfp
 1455 10da DC8B0000 		fmull	.LC5@GOTOFF(%ebx)	#
 1455      0000
 1456 10e0 DD9C2480 		fstpl	128(%esp)	# %sfp
 1456      000000
 1457              	.LVL176:
 1458 10e7 C744240C 		movl	$1466461315, 12(%esp)	#,
 1458      836C6857 
 1459 10ef C7442410 		movl	$-1053220357, 16(%esp)	#,
 1459      FB2139C1 
 1460 10f7 F20F10AC 		movsd	128(%esp), %xmm5	# %sfp, up
 1460      24800000 
 1460      00
 1461 1100 F20F116C 		movsd	%xmm5, 4(%esp)	# up,
 1461      2404
 1462 1106 8D8B0000 		leal	.LC6@GOTOFF(%ebx), %ecx	#, tmp490
 1462      0000
 1463 110c 898C24C4 		movl	%ecx, 196(%esp)	# tmp490, %sfp
 1463      000000
 1464 1113 890C24   		movl	%ecx, (%esp)	# tmp490,
 1465 1116 E8FCFFFF 		call	printf@PLT	#
 1465      FF
 1466              	.LVL177:
 1467 111b DD842480 		fldl	128(%esp)	# %sfp
 1467      000000
 1468 1122 DB7C2470 		fstpt	112(%esp)	# %sfp
 1469              	.LVL178:
 1470 1126 C744240C 		movl	$1466461315, 12(%esp)	#,
 1470      836C6857 
 1471 112e C7442410 		movl	$-1053220357, 16(%esp)	#,
 1471      FB2139C1 
 1472 1136 F20F108C 		movsd	128(%esp), %xmm1	# %sfp, up
 1472      24800000 
 1472      00
 1473 113f F20F114C 		movsd	%xmm1, 4(%esp)	# up,
 1473      2404
 1474 1145 8DBB0000 		leal	.LC7@GOTOFF(%ebx), %edi	#, tmp492
 1474      0000
 1475              	.LVL179:
 1476 114b 89BC24C8 		movl	%edi, 200(%esp)	# tmp492, %sfp
 1476      000000
 1477 1152 893C24   		movl	%edi, (%esp)	# tmp492,
 1478 1155 E8FCFFFF 		call	printf@PLT	#
 1478      FF
 1479              	.LVL180:
 1480 115a DB6C2450 		fldt	80(%esp)	# %sfp
 1481 115e DB6C2470 		fldt	112(%esp)	# %sfp
 1482 1162 DCE9     		fsubr	%st, %st(1)	#,
 1483 1164 DEC1     		faddp	%st, %st(1)	#,
 1484 1166 DD9C24E8 		fstpl	232(%esp)	#
 1484      000000
 1485 116d DD8424E8 		fldl	232(%esp)	#
 1485      000000
 1486 1174 DB7C2470 		fstpt	112(%esp)	# %sfp
 1487              	.LVL181:
 1488 1178 C744240C 		movl	$1466461315, 12(%esp)	#,
 1488      836C6857 
 1489 1180 C7442410 		movl	$-1053220357, 16(%esp)	#,
 1489      FB2139C1 
 1490 1188 F20F108C 		movsd	128(%esp), %xmm1	# %sfp, up
 1490      24800000 
 1490      00
 1491 1191 F20F114C 		movsd	%xmm1, 4(%esp)	# up,
 1491      2404
 1492 1197 8DBB0000 		leal	.LC8@GOTOFF(%ebx), %edi	#, tmp497
 1492      0000
 1493 119d 89BC24CC 		movl	%edi, 204(%esp)	# tmp497, %sfp
 1493      000000
 1494 11a4 893C24   		movl	%edi, (%esp)	# tmp497,
 1495 11a7 E8FCFFFF 		call	printf@PLT	#
 1495      FF
 1496              	.LVL182:
 1497 11ac DB6C2450 		fldt	80(%esp)	# %sfp
 1498 11b0 D9C0     		fld	%st(0)	#
 1499 11b2 DC8B0000 		fmull	.LC17@GOTOFF(%ebx)	#
 1499      0000
 1500 11b8 DD9C24E8 		fstpl	232(%esp)	#
 1500      000000
 1501 11bf DD8424E8 		fldl	232(%esp)	#
 1501      000000
 1502              	.LVL183:
 1503 11c6 D9C0     		fld	%st(0)	#
 1504              	.LVL184:
 1505 11c8 DB6C2470 		fldt	112(%esp)	# %sfp
 1506 11cc DCEB     		fsubr	%st, %st(3)	#,
 1507 11ce D9CB     		fxch	%st(3)	#
 1508 11d0 DD9C24E8 		fstpl	232(%esp)	#
 1508      000000
 1509              	.LVL185:
 1510 11d7 DD8424E8 		fldl	232(%esp)	#
 1510      000000
 1511 11de DD830000 		fldl	.LC26@GOTOFF(%ebx)	#
 1511      0000
 1512 11e4 D9C4     		fld	%st(4)	#
 1513 11e6 D8C9     		fmul	%st(1), %st	#,
 1514 11e8 D9CB     		fxch	%st(3)	#
 1515 11ea D9C0     		fld	%st(0)	#
 1516 11ec DBBC2490 		fstpt	144(%esp)	# %sfp
 1516      000000
 1517 11f3 DEEB     		fsubrp	%st, %st(3)	#,
 1518 11f5 D9830000 		flds	.LC27@GOTOFF(%ebx)	#
 1518      0000
 1519 11fb DCCD     		fmul	%st, %st(5)	#,
 1520 11fd D9CB     		fxch	%st(3)	#
 1521 11ff DEC5     		faddp	%st, %st(5)	#,
 1522 1201 D8C9     		fmul	%st(1), %st	#,
 1523 1203 DEC4     		faddp	%st, %st(4)	#,
 1524 1205 D9C0     		fld	%st(0)	#
 1525 1207 DBBC24A0 		fstpt	160(%esp)	# %sfp
 1525      000000
 1526 120e DEC9     		fmulp	%st, %st(1)	#,
 1527 1210 DEC2     		faddp	%st, %st(2)	#,
 1528 1212 D9C9     		fxch	%st(1)	#
 1529 1214 DD9C2488 		fstpl	136(%esp)	# %sfp
 1529      000000
 1530              	.LVL186:
 1531 121b F20F10A4 		movsd	136(%esp), %xmm4	# %sfp, kch_l.30
 1531      24880000 
 1531      00
 1532 1224 F20F1164 		movsd	%xmm4, 12(%esp)	# kch_l.30,
 1532      240C
 1533 122a DD5C2404 		fstpl	4(%esp)	#
 1534 122e 8D930000 		leal	.LC9@GOTOFF(%ebx), %edx	#, tmp519
 1534      0000
 1535 1234 899424D0 		movl	%edx, 208(%esp)	# tmp519, %sfp
 1535      000000
 1536 123b 891424   		movl	%edx, (%esp)	# tmp519,
 1537 123e E8FCFFFF 		call	printf@PLT	#
 1537      FF
 1538              	.LVL187:
 1539 1243 F20F10A4 		movsd	136(%esp), %xmm4	# %sfp, kch_l.30
 1539      24880000 
 1539      00
 1540 124c F20F1164 		movsd	%xmm4, 4(%esp)	# kch_l.30,
 1540      2404
 1541 1252 8DBB0000 		leal	.LC10@GOTOFF(%ebx), %edi	#, tmp520
 1541      0000
 1542 1258 893C24   		movl	%edi, (%esp)	# tmp520,
 1543 125b E8FCFFFF 		call	printf@PLT	#
 1543      FF
 1544              	.LVL188:
 1545              	.LBE25:
 1546              	.LBB26:
 219:trigo_fast.c  ****       Mul12(&kcm_h, &kcm_l,   kd, RR_DD_MCM);
 1547              		.loc 1 219 0
 1548 1260 892C24   		movl	%ebp, (%esp)	# tmp481,
 1549 1263 E8FCFFFF 		call	puts@PLT	#
 1549      FF
 1550              	.LVL189:
 1551 1268 C744241C 		movl	$856972295, 28(%esp)	#,
 1551      075C1433 
 1552 1270 C7442420 		movl	$-1138645466, 32(%esp)	#,
 1552      26A621BC 
 1553 1278 F20F106C 		movsd	64(%esp), %xmm5	# %sfp, _u
 1553      2440
 1554 127e F20F116C 		movsd	%xmm5, 20(%esp)	# _u,
 1554      2414
 1555 1284 D9EE     		fldz
 1556 1286 DD54240C 		fstl	12(%esp)	#
 1557 128a DD5C2404 		fstpl	4(%esp)	#
 1558 128e 8B8424B0 		movl	176(%esp), %eax	# %sfp, tmp483
 1558      000000
 1559 1295 890424   		movl	%eax, (%esp)	# tmp483,
 1560 1298 E8FCFFFF 		call	printf@PLT	#
 1560      FF
 1561              	.LVL190:
 1562 129d C744240C 		movl	$856972295, 12(%esp)	#,
 1562      075C1433 
 1563 12a5 C7442410 		movl	$-1138645466, 16(%esp)	#,
 1563      26A621BC 
 1564 12ad F20F106C 		movsd	64(%esp), %xmm5	# %sfp, _u
 1564      2440
 1565 12b3 F20F116C 		movsd	%xmm5, 4(%esp)	# _u,
 1565      2404
 1566 12b9 8B9424C0 		movl	192(%esp), %edx	# %sfp, tmp485
 1566      000000
 1567 12c0 891424   		movl	%edx, (%esp)	# tmp485,
 1568 12c3 E8FCFFFF 		call	printf@PLT	#
 1568      FF
 1569              	.LVL191:
 1570 12c8 C744240C 		movl	$893984973, 12(%esp)	#,
 1570      CD204935 
 1571 12d0 C7442410 		movl	$-1110333914, 16(%esp)	#,
 1571      26A6D1BD 
 1572 12d8 F20F108C 		movsd	128(%esp), %xmm1	# %sfp, up
 1572      24800000 
 1572      00
 1573 12e1 F20F114C 		movsd	%xmm1, 4(%esp)	# up,
 1573      2404
 1574 12e7 8B8C24C4 		movl	196(%esp), %ecx	# %sfp, tmp490
 1574      000000
 1575 12ee 890C24   		movl	%ecx, (%esp)	# tmp490,
 1576 12f1 E8FCFFFF 		call	printf@PLT	#
 1576      FF
 1577              	.LVL192:
 1578 12f6 C744240C 		movl	$893984973, 12(%esp)	#,
 1578      CD204935 
 1579 12fe C7442410 		movl	$-1110333914, 16(%esp)	#,
 1579      26A6D1BD 
 1580 1306 F20F108C 		movsd	128(%esp), %xmm1	# %sfp, up
 1580      24800000 
 1580      00
 1581 130f F20F114C 		movsd	%xmm1, 4(%esp)	# up,
 1581      2404
 1582 1315 8B8424C8 		movl	200(%esp), %eax	# %sfp, tmp492
 1582      000000
 1583 131c 890424   		movl	%eax, (%esp)	# tmp492,
 1584 131f E8FCFFFF 		call	printf@PLT	#
 1584      FF
 1585              	.LVL193:
 1586 1324 C744240C 		movl	$893984973, 12(%esp)	#,
 1586      CD204935 
 1587 132c C7442410 		movl	$-1110333914, 16(%esp)	#,
 1587      26A6D1BD 
 1588 1334 F20F108C 		movsd	128(%esp), %xmm1	# %sfp, up
 1588      24800000 
 1588      00
 1589 133d F20F114C 		movsd	%xmm1, 4(%esp)	# up,
 1589      2404
 1590 1343 8B8424CC 		movl	204(%esp), %eax	# %sfp, tmp497
 1590      000000
 1591 134a 890424   		movl	%eax, (%esp)	# tmp497,
 1592 134d E8FCFFFF 		call	printf@PLT	#
 1592      FF
 1593              	.LVL194:
 1594 1352 DB6C2450 		fldt	80(%esp)	# %sfp
 1595 1356 DC8B0000 		fmull	.LC30@GOTOFF(%ebx)	#
 1595      0000
 1596 135c DD9C24E8 		fstpl	232(%esp)	#
 1596      000000
 1597 1363 DD8424E8 		fldl	232(%esp)	#
 1597      000000
 1598              	.LVL195:
 1599 136a D9C0     		fld	%st(0)	#
 1600              	.LVL196:
 1601 136c DD830000 		fldl	.LC32@GOTOFF(%ebx)	#
 1601      0000
 1602 1372 DB6C2470 		fldt	112(%esp)	# %sfp
 1603 1376 D9C0     		fld	%st(0)	#
 1604 1378 D8CA     		fmul	%st(2), %st	#,
 1605 137a D9CB     		fxch	%st(3)	#
 1606 137c D9C0     		fld	%st(0)	#
 1607 137e DB7C2440 		fstpt	64(%esp)	# %sfp
 1608 1382 DEEB     		fsubrp	%st, %st(3)	#,
 1609 1384 D9830000 		flds	.LC33@GOTOFF(%ebx)	#
 1609      0000
 1610 138a DCC9     		fmul	%st, %st(1)	#,
 1611 138c D9CB     		fxch	%st(3)	#
 1612 138e DEC1     		faddp	%st, %st(1)	#,
 1613 1390 DBAC24A0 		fldt	160(%esp)	# %sfp
 1613      000000
 1614 1397 DCCA     		fmul	%st, %st(2)	#,
 1615 1399 D9CA     		fxch	%st(2)	#
 1616 139b DEC1     		faddp	%st, %st(1)	#,
 1617 139d D9CA     		fxch	%st(2)	#
 1618 139f DEC9     		fmulp	%st, %st(1)	#,
 1619 13a1 DEC1     		faddp	%st, %st(1)	#,
 1620 13a3 DD9C2480 		fstpl	128(%esp)	# %sfp
 1620      000000
 1621              	.LVL197:
 1622 13aa F20F10B4 		movsd	128(%esp), %xmm6	# %sfp, kcm_l.34
 1622      24800000 
 1622      00
 1623 13b3 F20F1174 		movsd	%xmm6, 12(%esp)	# kcm_l.34,
 1623      240C
 1624 13b9 DD5C2404 		fstpl	4(%esp)	#
 1625 13bd 8B9424D0 		movl	208(%esp), %edx	# %sfp, tmp519
 1625      000000
 1626 13c4 891424   		movl	%edx, (%esp)	# tmp519,
 1627 13c7 E8FCFFFF 		call	printf@PLT	#
 1627      FF
 1628              	.LVL198:
 1629 13cc F20F10B4 		movsd	128(%esp), %xmm6	# %sfp, kcm_l.34
 1629      24800000 
 1629      00
 1630 13d5 F20F1174 		movsd	%xmm6, 4(%esp)	# kcm_l.34,
 1630      2404
 1631 13db 893C24   		movl	%edi, (%esp)	# tmp520,
 1632 13de E8FCFFFF 		call	printf@PLT	#
 1632      FF
 1633              	.LVL199:
 1634              	.LBE26:
 1635              	.LBB27:
 220:trigo_fast.c  ****       Add12 (th,tl,  kch_l, kcm_h) ;
 1636              		.loc 1 220 0
 1637 13e3 DD842488 		fldl	136(%esp)	# %sfp
 1637      000000
 1638              	.LVL200:
 1639 13ea DB6C2440 		fldt	64(%esp)	# %sfp
 1640              	.LVL201:
 1641 13ee D9C0     		fld	%st(0)	#
 1642 13f0 D8C2     		fadd	%st(2), %st	#,
 1643 13f2 DD9C24E8 		fstpl	232(%esp)	#
 1643      000000
 1644 13f9 DD8424E8 		fldl	232(%esp)	#
 1644      000000
 1645              	.LVL202:
 1646              	.LBE27:
 1647              	.LBB28:
 221:trigo_fast.c  ****       /* only rounding error in the last multiplication and addition */ 
 222:trigo_fast.c  ****       Add22 (pyh, pyl,    (x + kch_h) , (kcm_l - kd*RR_DD_CL),   th, tl) ;
 1648              		.loc 1 222 0
 1649 1400 DB6C2460 		fldt	96(%esp)	# %sfp
 1650              	.LVL203:
 1651 1404 DBAC2490 		fldt	144(%esp)	# %sfp
 1651      000000
 1652 140b DEC1     		faddp	%st, %st(1)	#,
 1653              	.LVL204:
 1654 140d D9C1     		fld	%st(1)	#
 1655              	.LVL205:
 1656 140f D8C1     		fadd	%st(1), %st	#,
 1657 1411 DD9C24E8 		fstpl	232(%esp)	#
 1657      000000
 1658 1418 DD8424E8 		fldl	232(%esp)	#
 1658      000000
 1659              	.LVL206:
 1660 141f DCE9     		fsubr	%st, %st(1)	#,
 1661              	.LVL207:
 1662 1421 D9C9     		fxch	%st(1)	#
 1663              	.LVL208:
 1664 1423 D8C2     		fadd	%st(2), %st	#,
 1665              	.LVL209:
 1666 1425 D9CA     		fxch	%st(2)	#
 1667              	.LBE28:
 1668              	.LBB29:
 220:trigo_fast.c  ****       Add12 (th,tl,  kch_l, kcm_h) ;
 1669              		.loc 1 220 0
 1670 1427 DEE4     		fsubp	%st, %st(4)	#,
 1671 1429 D9CB     		fxch	%st(3)	#
 1672 142b DD9C24E8 		fstpl	232(%esp)	#
 1672      000000
 1673 1432 DD8424E8 		fldl	232(%esp)	#
 1673      000000
 1674 1439 DEEA     		fsubrp	%st, %st(2)	#,
 1675 143b D9C9     		fxch	%st(1)	#
 1676 143d DD9C24E8 		fstpl	232(%esp)	#
 1676      000000
 1677 1444 DD8424E8 		fldl	232(%esp)	#
 1677      000000
 1678              	.LBE29:
 1679              	.LBB30:
 1680              		.loc 1 222 0
 1681 144b DEC1     		faddp	%st, %st(1)	#,
 1682 144d DB6C2450 		fldt	80(%esp)	# %sfp
 1683 1451 DC8B0000 		fmull	.LC34@GOTOFF(%ebx)	#
 1683      0000
 1684 1457 DC842480 		faddl	128(%esp)	# %sfp
 1684      000000
 1685 145e DEC1     		faddp	%st, %st(1)	#,
 1686 1460 DD9C24E8 		fstpl	232(%esp)	#
 1686      000000
 1687 1467 DD8424E8 		fldl	232(%esp)	#
 1687      000000
 1688 146e D9C1     		fld	%st(1)	#
 1689 1470 D8C1     		fadd	%st(1), %st	#,
 1690 1472 DD9C24E8 		fstpl	232(%esp)	#
 1690      000000
 1691 1479 DD8424E8 		fldl	232(%esp)	#
 1691      000000
 1692 1480 DD16     		fstl	(%esi)	# *pyh_15(D)
 1693 1482 DEEA     		fsubrp	%st, %st(2)	#,
 1694 1484 DEC1     		faddp	%st, %st(1)	#,
 1695 1486 8B44243C 		movl	60(%esp), %eax	# %sfp, pyl
 1696 148a DD18     		fstpl	(%eax)	# *pyl_13(D)
 1697 148c E9B70000 		jmp	.L20	#
 1697      00
 1698              	.LVL210:
 1699              	.L26:
 1700              	.LBE30:
 1701              	.LBE22:
 1702              	.LBB31:
 223:trigo_fast.c  ****     }
 224:trigo_fast.c  ****   }
 225:trigo_fast.c  ****   else {
 226:trigo_fast.c  ****     scs_t X, Y,Yh,Yl;
 227:trigo_fast.c  ****     if (absxhi > 0x7F700000) /*2^(1023-7)*/
 1703              		.loc 1 227 0
 1704 1491 81FF0000 		cmpl	$2138046464, %edi	#, absxhi
 1704      707F
 1705 1497 7E21     		jle	.L31	#,
 228:trigo_fast.c  ****       return (*scs_fun)(x);
 1706              		.loc 1 228 0
 1707 1499 F20F107C 		movsd	48(%esp), %xmm7	# %sfp, x
 1707      2430
 1708 149f F20F113C 		movsd	%xmm7, (%esp)	# x,
 1708      24
 1709 14a4 FF9424DC 		call	*476(%esp)	# scs_fun
 1709      010000
 1710              	.LVL211:
 1711 14ab DD5C2430 		fstpl	48(%esp)	# %sfp
 1712 14af F20F2C44 		cvttsd2si	48(%esp), %eax	# %sfp, D.3347
 1712      2430
 1713 14b5 E99E0000 		jmp	.L32	#
 1713      00
 1714              	.L31:
 229:trigo_fast.c  ****     else {      
 230:trigo_fast.c  ****       scs_set_d(X, x*128.0); 
 1715              		.loc 1 230 0
 1716 14ba D9830000 		flds	.LC40@GOTOFF(%ebx)	#
 1716      0000
 1717 14c0 DC4C2430 		fmull	48(%esp)	# %sfp
 1718 14c4 DD5C2404 		fstpl	4(%esp)	#
 1719 14c8 8DBC24F0 		leal	240(%esp), %edi	#, tmp581
 1719      000000
 1720 14cf 893C24   		movl	%edi, (%esp)	# tmp581,
 1721 14d2 E8FCFFFF 		call	scs_set_d@PLT	#
 1721      FF
 1722              	.LVL212:
 231:trigo_fast.c  ****       k= rem_pio2_scs(Y, X);
 1723              		.loc 1 231 0
 1724 14d7 897C2404 		movl	%edi, 4(%esp)	# tmp581,
 1725 14db 8DBC2420 		leal	288(%esp), %edi	#, tmp583
 1725      010000
 1726 14e2 893C24   		movl	%edi, (%esp)	# tmp583,
 1727 14e5 E8FCFFFF 		call	rem_pio2_scs@PLT	#
 1727      FF
 1728              	.LVL213:
 1729 14ea 89442430 		movl	%eax, 48(%esp)	#, %sfp
 1730              	.LVL214:
 232:trigo_fast.c  ****       /* TODO an optimized procedure for the following */
 233:trigo_fast.c  ****       scs_get_d(pyh, Y);
 1731              		.loc 1 233 0
 1732 14ee 897C2404 		movl	%edi, 4(%esp)	# tmp583,
 1733 14f2 893424   		movl	%esi, (%esp)	# pyh,
 1734 14f5 E8FCFFFF 		call	scs_get_d@PLT	#
 1734      FF
 1735              	.LVL215:
 234:trigo_fast.c  ****       scs_set_d(Yh, *pyh);
 1736              		.loc 1 234 0
 1737 14fa DD06     		fldl	(%esi)	# *pyh_15(D)
 1738 14fc DD5C2404 		fstpl	4(%esp)	#
 1739 1500 8D842450 		leal	336(%esp), %eax	#, tmp586
 1739      010000
 1740 1507 89C5     		movl	%eax, %ebp	# tmp586, tmp586
 1741              	.LVL216:
 1742 1509 890424   		movl	%eax, (%esp)	# tmp586,
 1743 150c E8FCFFFF 		call	scs_set_d@PLT	#
 1743      FF
 1744              	.LVL217:
 235:trigo_fast.c  ****       scs_sub(Yl, Y,Yh);
 1745              		.loc 1 235 0
 1746 1511 896C2408 		movl	%ebp, 8(%esp)	# tmp586,
 1747 1515 897C2404 		movl	%edi, 4(%esp)	# tmp583,
 1748 1519 8DBC2480 		leal	384(%esp), %edi	#, tmp589
 1748      010000
 1749 1520 893C24   		movl	%edi, (%esp)	# tmp589,
 1750 1523 E8FCFFFF 		call	scs_sub@PLT	#
 1750      FF
 1751              	.LVL218:
 236:trigo_fast.c  ****       scs_get_d(pyl, Yl);
 1752              		.loc 1 236 0
 1753 1528 897C2404 		movl	%edi, 4(%esp)	# tmp589,
 1754 152c 8B7C243C 		movl	60(%esp), %edi	# %sfp, pyl
 1755 1530 893C24   		movl	%edi, (%esp)	# pyl,
 1756 1533 E8FCFFFF 		call	scs_get_d@PLT	#
 1756      FF
 1757              	.LVL219:
 237:trigo_fast.c  ****       *pyh = *pyh * (1./128.) ;
 1758              		.loc 1 237 0
 1759 1538 D9830000 		flds	.LC41@GOTOFF(%ebx)	#
 1759      0000
 1760 153e D9C0     		fld	%st(0)	#
 1761 1540 DC0E     		fmull	(%esi)	# *pyh_15(D)
 1762 1542 DD1E     		fstpl	(%esi)	# *pyh_15(D)
 238:trigo_fast.c  ****       *pyl = *pyl * (1./128.) ;
 1763              		.loc 1 238 0
 1764 1544 DC0F     		fmull	(%edi)	# *pyl_13(D)
 1765 1546 DD1F     		fstpl	(%edi)	# *pyl_13(D)
 1766              	.L20:
 1767              	.LBE31:
 239:trigo_fast.c  ****     } 
 240:trigo_fast.c  ****   }
 241:trigo_fast.c  ****   printf("\n");
 1768              		.loc 1 241 0
 1769 1548 C704240A 		movl	$10, (%esp)	#,
 1769      000000
 1770 154f E8FCFFFF 		call	putchar@PLT	#
 1770      FF
 1771              	.LVL220:
 242:trigo_fast.c  ****   return k;
 1772              		.loc 1 242 0
 1773 1554 8B442430 		movl	48(%esp), %eax	# %sfp, D.3347
 1774              	.LVL221:
 1775              	.L32:
 243:trigo_fast.c  **** }
 1776              		.loc 1 243 0
 1777 1558 81C4BC01 		addl	$444, %esp	#,
 1777      0000
 1778              		.cfi_def_cfa_offset 20
 1779 155e 5B       		popl	%ebx	#
 1780              		.cfi_restore 3
 1781              		.cfi_def_cfa_offset 16
 1782 155f 5E       		popl	%esi	#
 1783              		.cfi_restore 6
 1784              		.cfi_def_cfa_offset 12
 1785              	.LVL222:
 1786 1560 5F       		popl	%edi	#
 1787              		.cfi_restore 7
 1788              		.cfi_def_cfa_offset 8
 1789 1561 5D       		popl	%ebp	#
 1790              		.cfi_restore 5
 1791              		.cfi_def_cfa_offset 4
 1792 1562 C3       		ret
 1793              		.cfi_endproc
 1794              	.LFE9:
 1796              		.globl	sin_rn
 1798              	sin_rn:
 1799              	.LFB10:
 244:trigo_fast.c  **** 
 245:trigo_fast.c  **** 
 246:trigo_fast.c  **** 
 247:trigo_fast.c  **** 
 248:trigo_fast.c  **** 
 249:trigo_fast.c  **** 
 250:trigo_fast.c  **** 
 251:trigo_fast.c  **** 
 252:trigo_fast.c  **** /*************************************************************
 253:trigo_fast.c  ****  *************************************************************
 254:trigo_fast.c  ****  *              SIN ROUNDED  TO NEAREST			     *
 255:trigo_fast.c  ****  *************************************************************
 256:trigo_fast.c  ****  *************************************************************/ 
 257:trigo_fast.c  **** 
 258:trigo_fast.c  **** double sin_rn(double x){ 
 1800              		.loc 1 258 0
 1801              		.cfi_startproc
 1802              	.LVL223:
 1803 1563 56       		pushl	%esi	#
 1804              		.cfi_def_cfa_offset 8
 1805              		.cfi_offset 6, -8
 1806 1564 53       		pushl	%ebx	#
 1807              		.cfi_def_cfa_offset 12
 1808              		.cfi_offset 3, -12
 1809 1565 83EC54   		subl	$84, %esp	#,
 1810              		.cfi_def_cfa_offset 96
 1811 1568 E8FCFFFF 		call	__x86.get_pc_thunk.bx	#
 1811      FF
 1812 156d 81C30200 		addl	$_GLOBAL_OFFSET_TABLE_, %ebx	#,
 1812      0000
 1813 1573 DD442460 		fldl	96(%esp)	# x
 1814 1577 DD542418 		fstl	24(%esp)	# %sfp
 259:trigo_fast.c  ****   double sh, sl, yh, yl, ts;
 260:trigo_fast.c  ****   int quadrant;
 261:trigo_fast.c  ****   int k;
 262:trigo_fast.c  ****   int absxhi;
 263:trigo_fast.c  ****   db_number xx;
 264:trigo_fast.c  **** 
 265:trigo_fast.c  **** #if INLINE_SINCOS
 266:trigo_fast.c  ****   double sah,sal,cah,cal,tc;
 267:trigo_fast.c  **** #endif
 268:trigo_fast.c  **** 
 269:trigo_fast.c  ****   xx.d=x;
 1815              		.loc 1 269 0
 1816 157b F20F1044 		movsd	24(%esp), %xmm0	# %sfp, x
 1816      2418
 1817 1581 F20F1144 		movsd	%xmm0, 32(%esp)	# x, %sfp
 1817      2420
 270:trigo_fast.c  ****   absxhi = xx.i[HI_ENDIAN] & 0x7fffffff;
 1818              		.loc 1 270 0
 1819 1587 8B4C2424 		movl	36(%esp), %ecx	# %sfp, absxhi
 1820 158b 81E1FFFF 		andl	$2147483647, %ecx	#, absxhi
 1820      FF7F
 1821              	.LVL224:
 271:trigo_fast.c  **** 
 272:trigo_fast.c  ****   if (absxhi < XMAX_SIN_FAST){
 1822              		.loc 1 272 0
 1823 1591 81F9FFFF 		cmpl	$1068498943, %ecx	#, absxhi
 1823      AF3F
 1824 1597 0F8FB300 		jg	.L41	#,
 1824      0000
 273:trigo_fast.c  ****     if (absxhi <XMAX_RETURN_X_FOR_SIN)
 274:trigo_fast.c  ****       return x;
 1825              		.loc 1 274 0
 1826 159d D9C0     		fld	%st(0)	#
 273:trigo_fast.c  ****     if (absxhi <XMAX_RETURN_X_FOR_SIN)
 1827              		.loc 1 273 0
 1828 159f 81F9FFFF 		cmpl	$1045430271, %ecx	#, absxhi
 1828      4F3E
 1829 15a5 0F8EF601 		jle	.L56	#,
 1829      0000
 1830 15ab DDD8     		fstp	%st(0)	#
 275:trigo_fast.c  ****     /* Fast Taylor series */
 276:trigo_fast.c  ****     yh=x*x;
 1831              		.loc 1 276 0
 1832 15ad D9C0     		fld	%st(0)	#
 1833 15af D8C9     		fmul	%st(1), %st	#,
 1834 15b1 DD5C2428 		fstpl	40(%esp)	#
 1835 15b5 DD442428 		fldl	40(%esp)	#
 1836 15b9 DD542438 		fstl	56(%esp)	# yh
 1837              	.LVL225:
 277:trigo_fast.c  ****     ts = yh * (s3.d + yh*(s5.d + yh*(s7.d + yh*(s9.d))));
 1838              		.loc 1 277 0
 1839 15bd D9C0     		fld	%st(0)	#
 1840 15bf DC8B4008 		fmull	s9@GOTOFF(%ebx)	# s9.d
 1840      0000
 1841              	.LVL226:
 1842 15c5 DC834808 		faddl	s7@GOTOFF(%ebx)	# s7.d
 1842      0000
 1843 15cb D8C9     		fmul	%st(1), %st	#,
 1844 15cd DC835008 		faddl	s5@GOTOFF(%ebx)	# s5.d
 1844      0000
 1845 15d3 D8C9     		fmul	%st(1), %st	#,
 1846 15d5 DC835808 		faddl	s3@GOTOFF(%ebx)	# s3.d
 1846      0000
 1847 15db DEC9     		fmulp	%st, %st(1)	#,
 1848 15dd DD5C2428 		fstpl	40(%esp)	#
 1849 15e1 DD442428 		fldl	40(%esp)	#
 1850              	.LBB32:
 278:trigo_fast.c  ****     Add12(sh,sl, x, ts*x);
 1851              		.loc 1 278 0
 1852 15e5 D8C9     		fmul	%st(1), %st	#,
 1853 15e7 DD5C2428 		fstpl	40(%esp)	#
 1854 15eb DD442428 		fldl	40(%esp)	#
 1855 15ef D9C1     		fld	%st(1)	#
 1856 15f1 D8C1     		fadd	%st(1), %st	#,
 1857 15f3 DD5C2428 		fstpl	40(%esp)	#
 1858 15f7 DD442428 		fldl	40(%esp)	#
 1859 15fb DD542448 		fstl	72(%esp)	# sh
 1860 15ff D9C0     		fld	%st(0)	#
 1861              	.LVL227:
 1862 1601 DCE3     		fsub	%st, %st(3)	#,
 1863              	.LVL228:
 1864 1603 D9CB     		fxch	%st(3)	#
 1865 1605 DD5C2428 		fstpl	40(%esp)	#
 1866              	.LVL229:
 1867 1609 DD442428 		fldl	40(%esp)	#
 1868 160d DEEA     		fsubrp	%st, %st(2)	#,
 1869 160f D9C9     		fxch	%st(1)	#
 1870 1611 DD5C2428 		fstpl	40(%esp)	#
 1871              	.LVL230:
 1872 1615 DD442428 		fldl	40(%esp)	#
 1873 1619 DD542440 		fstl	64(%esp)	# sl
 1874              	.LBE32:
 279:trigo_fast.c  ****     if(sh == (sh + (sl * RN_CST_SINFAST))){	
 1875              		.loc 1 279 0
 1876 161d DBAB0000 		fldt	.LC42@GOTOFF(%ebx)	#
 1876      0000
 1877 1623 DEC9     		fmulp	%st, %st(1)	#,
 1878 1625 D8C2     		fadd	%st(2), %st	#,
 1879 1627 D9CA     		fxch	%st(2)	#
 1880 1629 DFEA     		fucomip	%st(2), %st	#,
 1881 162b DDD9     		fstp	%st(1)	#
 1882 162d 7A0A     		jp	.L57	#,
 1883 162f 0F846E01 		je	.L42	#,
 1883      0000
 1884 1635 DDD8     		fstp	%st(0)	#
 1885 1637 EB02     		jmp	.L53	#
 1886              	.L57:
 1887 1639 DDD8     		fstp	%st(0)	#
 1888              	.L53:
 280:trigo_fast.c  ****       return sh;
 281:trigo_fast.c  ****     }else{ 
 282:trigo_fast.c  ****       return scs_sin_rn(x); 
 1889              		.loc 1 282 0
 1890 163b F20F1054 		movsd	24(%esp), %xmm2	# %sfp, x
 1890      2418
 1891 1641 F20F1114 		movsd	%xmm2, (%esp)	# x,
 1891      24
 1892 1646 E8FCFFFF 		call	scs_sin_rn@PLT	#
 1892      FF
 1893              	.LVL231:
 1894 164b E9530100 		jmp	.L42	#
 1894      00
 1895              	.LVL232:
 1896              	.L41:
 1897 1650 DDD8     		fstp	%st(0)	#
 283:trigo_fast.c  ****     } 
 284:trigo_fast.c  ****   }
 285:trigo_fast.c  ****   
 286:trigo_fast.c  ****   /* Otherwise : Range reduction then standard evaluation */
 287:trigo_fast.c  ****   k=trig_range_reduction(&yh, &yl,  x, absxhi, &scs_sin_rn);
 1898              		.loc 1 287 0
 1899 1652 8D542430 		leal	48(%esp), %edx	#, tmp164
 1900 1656 8D442438 		leal	56(%esp), %eax	#, tmp165
 1901 165a 8BB30000 		movl	scs_sin_rn@GOT(%ebx), %esi	#, tmp167
 1901      0000
 1902 1660 8974240C 		movl	%esi, 12(%esp)	# tmp167,
 1903 1664 894C2408 		movl	%ecx, 8(%esp)	# absxhi,
 1904 1668 F20F104C 		movsd	24(%esp), %xmm1	# %sfp, x
 1904      2418
 1905 166e F20F110C 		movsd	%xmm1, (%esp)	# x,
 1905      24
 1906 1673 E83EF1FF 		call	trig_range_reduction	#
 1906      FF
 1907              	.LVL233:
 288:trigo_fast.c  ****     
 289:trigo_fast.c  ****   /* Now y_h is in -Pi/512, Pi/512 and k holds the 32 lower bits of an
 290:trigo_fast.c  ****      int such that x = yh+yl + kPi/256 */
 291:trigo_fast.c  ****   
 292:trigo_fast.c  ****   quadrant = (k>>7)&3;
 1908              		.loc 1 292 0
 1909 1678 89C2     		movl	%eax, %edx	# k, D.3367
 1910 167a C1FA07   		sarl	$7, %edx	#, D.3367
 1911 167d 89D6     		movl	%edx, %esi	# D.3367, quadrant
 1912 167f 83E603   		andl	$3, %esi	#, quadrant
 1913              	.LVL234:
 293:trigo_fast.c  ****   k=(k&127)<<2;
 1914              		.loc 1 293 0
 1915 1682 83E07F   		andl	$127, %eax	#, D.3367
 1916              	.LVL235:
 1917 1685 C1E002   		sall	$2, %eax	#, k
 1918              	.LVL236:
 294:trigo_fast.c  ****   
 295:trigo_fast.c  ****   if(k<=(64<<2)) {
 1919              		.loc 1 295 0
 1920 1688 3D000100 		cmpl	$256, %eax	#, k
 1920      00
 1921 168d 7F36     		jg	.L44	#,
 296:trigo_fast.c  ****     sah=sincosTable[k+0].d; /* sin(a), high part */
 1922              		.loc 1 296 0
 1923 168f DD84C300 		fldl	sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[k_56].d
 1923      000000
 1924 1696 DD9B1800 		fstpl	sah@GOTOFF(%ebx)	# sah
 1924      0000
 297:trigo_fast.c  ****     sal=sincosTable[k+1].d; /* sin(a), low part */
 1925              		.loc 1 297 0
 1926 169c DD84C308 		fldl	8+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_59].d
 1926      000000
 1927 16a3 DD9B1000 		fstpl	sal@GOTOFF(%ebx)	# sal
 1927      0000
 298:trigo_fast.c  ****     cah=sincosTable[k+2].d; /* cos(a), high part */
 1928              		.loc 1 298 0
 1929 16a9 DD84C310 		fldl	16+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_62].d
 1929      000000
 1930 16b0 DD9B0800 		fstpl	cah@GOTOFF(%ebx)	# cah
 1930      0000
 299:trigo_fast.c  ****     cal=sincosTable[k+3].d; /* cos(a), low part */
 1931              		.loc 1 299 0
 1932 16b6 DD84C318 		fldl	24+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_65].d
 1932      000000
 1933 16bd DD9B0000 		fstpl	cal@GOTOFF(%ebx)	# cal
 1933      0000
 1934 16c3 EB50     		jmp	.L45	#
 1935              	.L44:
 1936              	.LVL237:
 1937              	.LBB33:
 300:trigo_fast.c  ****   } else { /* cah <= sah */
 301:trigo_fast.c  ****     int k1=(128<<2) - k;
 1938              		.loc 1 301 0
 1939 16c5 B9000200 		movl	$512, %ecx	#, tmp184
 1939      00
 1940 16ca 29C1     		subl	%eax, %ecx	# k, k1
 1941              	.LVL238:
 302:trigo_fast.c  ****     cah=sincosTable[k1+0].d; /* cos(a), high part */
 1942              		.loc 1 302 0
 1943 16cc DD84CB00 		fldl	sincosTable@GOTOFF(%ebx,%ecx,8)	# sincosTable[k1_68].d
 1943      000000
 1944 16d3 DD9B0800 		fstpl	cah@GOTOFF(%ebx)	# cah
 1944      0000
 303:trigo_fast.c  ****     cal=sincosTable[k1+1].d; /* cos(a), low part  */ 
 1945              		.loc 1 303 0
 1946 16d9 B9010200 		movl	$513, %ecx	#, tmp189
 1946      00
 1947              	.LVL239:
 1948 16de 29C1     		subl	%eax, %ecx	# k, D.3367
 1949 16e0 DD84CB00 		fldl	sincosTable@GOTOFF(%ebx,%ecx,8)	# sincosTable[_71].d
 1949      000000
 1950 16e7 DD9B0000 		fstpl	cal@GOTOFF(%ebx)	# cal
 1950      0000
 304:trigo_fast.c  ****     sah=sincosTable[k1+2].d; /* sin(a), high part */
 1951              		.loc 1 304 0
 1952 16ed B9020200 		movl	$514, %ecx	#, tmp194
 1952      00
 1953 16f2 29C1     		subl	%eax, %ecx	# k, D.3367
 1954 16f4 DD84CB00 		fldl	sincosTable@GOTOFF(%ebx,%ecx,8)	# sincosTable[_74].d
 1954      000000
 1955 16fb DD9B1800 		fstpl	sah@GOTOFF(%ebx)	# sah
 1955      0000
 305:trigo_fast.c  ****     sal=sincosTable[k1+3].d; /* sin(a), low part  */
 1956              		.loc 1 305 0
 1957 1701 B9030200 		movl	$515, %ecx	#, tmp199
 1957      00
 1958 1706 29C1     		subl	%eax, %ecx	# k, D.3367
 1959 1708 DD84CB00 		fldl	sincosTable@GOTOFF(%ebx,%ecx,8)	# sincosTable[_77].d
 1959      000000
 1960 170f DD9B1000 		fstpl	sal@GOTOFF(%ebx)	# sal
 1960      0000
 1961              	.LVL240:
 1962              	.L45:
 1963              	.LBE33:
 306:trigo_fast.c  ****   }
 307:trigo_fast.c  **** 
 308:trigo_fast.c  **** #if DEBUG
 309:trigo_fast.c  **** 	printf("sah=%1.30e sal=%1.30e  \n", sah,sal);
 310:trigo_fast.c  **** 	printf("cah=%1.30e cal=%1.30e  \n", cah,cal);
 311:trigo_fast.c  **** #endif
 312:trigo_fast.c  **** 
 313:trigo_fast.c  **** #if INLINE_SINCOS
 314:trigo_fast.c  ****   if (quadrant&1){   /*compute the cos  */
 315:trigo_fast.c  ****     DO_COS(sh,sl);
 316:trigo_fast.c  ****   }
 317:trigo_fast.c  ****   else {/* compute the sine */
 318:trigo_fast.c  ****     DO_SIN(sh,sl);
 319:trigo_fast.c  ****   }
 320:trigo_fast.c  **** #else
 321:trigo_fast.c  ****   if (quadrant&1)   /*compute the cos  */
 1964              		.loc 1 321 0
 1965 1715 F6C201   		testb	$1, %dl	#, D.3367
 1966 1718 741E     		je	.L46	#,
 322:trigo_fast.c  ****     do_cos(&sh, &sl,  yh,yl);
 1967              		.loc 1 322 0
 1968 171a 8D542440 		leal	64(%esp), %edx	#, tmp204
 1969 171e 8D442448 		leal	72(%esp), %eax	#, tmp205
 1970              	.LVL241:
 1971 1722 DD442430 		fldl	48(%esp)	# yl
 1972 1726 DD5C2408 		fstpl	8(%esp)	#
 1973 172a DD442438 		fldl	56(%esp)	# yh
 1974 172e DD1C24   		fstpl	(%esp)	#
 1975 1731 E8CAE8FF 		call	do_cos	#
 1975      FF
 1976              	.LVL242:
 1977 1736 EB1C     		jmp	.L47	#
 1978              	.LVL243:
 1979              	.L46:
 323:trigo_fast.c  ****   else /* compute the sine */
 324:trigo_fast.c  ****     do_sin(&sh, &sl,  yh,yl);
 1980              		.loc 1 324 0
 1981 1738 8D542440 		leal	64(%esp), %edx	#, tmp208
 1982 173c 8D442448 		leal	72(%esp), %eax	#, tmp209
 1983              	.LVL244:
 1984 1740 DD442430 		fldl	48(%esp)	# yl
 1985 1744 DD5C2408 		fstpl	8(%esp)	#
 1986 1748 DD442438 		fldl	56(%esp)	# yh
 1987 174c DD1C24   		fstpl	(%esp)	#
 1988 174f E87DECFF 		call	do_sin	#
 1988      FF
 1989              	.LVL245:
 1990              	.L47:
 325:trigo_fast.c  **** #endif
 326:trigo_fast.c  ****   
 327:trigo_fast.c  ****   if(quadrant>=2) { 
 1991              		.loc 1 327 0
 1992 1754 83FE01   		cmpl	$1, %esi	#, quadrant
 1993 1757 7E14     		jle	.L48	#,
 328:trigo_fast.c  ****     sh = -sh;
 1994              		.loc 1 328 0
 1995 1759 DD442448 		fldl	72(%esp)	# sh
 1996 175d D9E0     		fchs
 1997 175f DD5C2448 		fstpl	72(%esp)	# sh
 329:trigo_fast.c  ****     sl = -sl;
 1998              		.loc 1 329 0
 1999 1763 DD442440 		fldl	64(%esp)	# sl
 2000 1767 D9E0     		fchs
 2001 1769 DD5C2440 		fstpl	64(%esp)	# sl
 2002              	.L48:
 330:trigo_fast.c  ****   }
 331:trigo_fast.c  ****   
 332:trigo_fast.c  ****   if(sh == (sh + (sl * 1.0004))){	
 2003              		.loc 1 332 0
 2004 176d DD442448 		fldl	72(%esp)	# sh
 2005 1771 D9C0     		fld	%st(0)	#
 2006 1773 DBAB0000 		fldt	.LC43@GOTOFF(%ebx)	#
 2006      0000
 2007 1779 DC4C2440 		fmull	64(%esp)	# sl
 2008 177d D8C1     		fadd	%st(1), %st	#,
 2009 177f D9C9     		fxch	%st(1)	#
 2010 1781 DFE9     		fucomip	%st(1), %st	#,
 2011 1783 DDD8     		fstp	%st(0)	#
 2012 1785 7A06     		jp	.L58	#,
 2013 1787 741A     		je	.L42	#,
 2014 1789 DDD8     		fstp	%st(0)	#
 2015 178b EB02     		jmp	.L54	#
 2016              	.L58:
 2017 178d DDD8     		fstp	%st(0)	#
 2018              	.L54:
 333:trigo_fast.c  ****      return sh;
 334:trigo_fast.c  ****   }else{
 335:trigo_fast.c  ****     return scs_sin_rn(x); 
 2019              		.loc 1 335 0
 2020 178f F20F105C 		movsd	24(%esp), %xmm3	# %sfp, x
 2020      2418
 2021 1795 F20F111C 		movsd	%xmm3, (%esp)	# x,
 2021      24
 2022 179a E8FCFFFF 		call	scs_sin_rn@PLT	#
 2022      FF
 2023              	.LVL246:
 2024 179f EB02     		jmp	.L42	#
 2025              	.LVL247:
 2026              	.L56:
 2027 17a1 DDD9     		fstp	%st(1)	#
 2028              	.LVL248:
 2029              	.L42:
 336:trigo_fast.c  ****   } 
 337:trigo_fast.c  **** 
 338:trigo_fast.c  **** }
 2030              		.loc 1 338 0
 2031 17a3 83C454   		addl	$84, %esp	#,
 2032              		.cfi_def_cfa_offset 12
 2033 17a6 5B       		popl	%ebx	#
 2034              		.cfi_restore 3
 2035              		.cfi_def_cfa_offset 8
 2036 17a7 5E       		popl	%esi	#
 2037              		.cfi_restore 6
 2038              		.cfi_def_cfa_offset 4
 2039 17a8 C3       		ret
 2040              		.cfi_endproc
 2041              	.LFE10:
 2043              		.globl	sin_rd
 2045              	sin_rd:
 2046              	.LFB11:
 339:trigo_fast.c  **** 
 340:trigo_fast.c  **** /* TODO */
 341:trigo_fast.c  **** double sin_rd(double x){
 2047              		.loc 1 341 0
 2048              		.cfi_startproc
 2049              	.LVL249:
 2050 17a9 53       		pushl	%ebx	#
 2051              		.cfi_def_cfa_offset 8
 2052              		.cfi_offset 3, -8
 2053 17aa 83EC18   		subl	$24, %esp	#,
 2054              		.cfi_def_cfa_offset 32
 2055 17ad E8FCFFFF 		call	__x86.get_pc_thunk.bx	#
 2055      FF
 2056 17b2 81C30200 		addl	$_GLOBAL_OFFSET_TABLE_, %ebx	#,
 2056      0000
 342:trigo_fast.c  **** return scs_sin_rd(x);
 2057              		.loc 1 342 0
 2058 17b8 DD442420 		fldl	32(%esp)	# x
 2059 17bc DD1C24   		fstpl	(%esp)	#
 2060 17bf E8FCFFFF 		call	scs_sin_rd@PLT	#
 2060      FF
 2061              	.LVL250:
 343:trigo_fast.c  **** }
 2062              		.loc 1 343 0
 2063 17c4 83C418   		addl	$24, %esp	#,
 2064              		.cfi_def_cfa_offset 8
 2065 17c7 5B       		popl	%ebx	#
 2066              		.cfi_restore 3
 2067              		.cfi_def_cfa_offset 4
 2068 17c8 C3       		ret
 2069              		.cfi_endproc
 2070              	.LFE11:
 2072              		.globl	sin_ru
 2074              	sin_ru:
 2075              	.LFB12:
 344:trigo_fast.c  **** 
 345:trigo_fast.c  **** /* TODO */
 346:trigo_fast.c  **** double sin_ru(double x){ 
 2076              		.loc 1 346 0
 2077              		.cfi_startproc
 2078              	.LVL251:
 2079 17c9 53       		pushl	%ebx	#
 2080              		.cfi_def_cfa_offset 8
 2081              		.cfi_offset 3, -8
 2082 17ca 83EC18   		subl	$24, %esp	#,
 2083              		.cfi_def_cfa_offset 32
 2084 17cd E8FCFFFF 		call	__x86.get_pc_thunk.bx	#
 2084      FF
 2085 17d2 81C30200 		addl	$_GLOBAL_OFFSET_TABLE_, %ebx	#,
 2085      0000
 347:trigo_fast.c  **** return scs_sin_ru(x);
 2086              		.loc 1 347 0
 2087 17d8 DD442420 		fldl	32(%esp)	# x
 2088 17dc DD1C24   		fstpl	(%esp)	#
 2089 17df E8FCFFFF 		call	scs_sin_ru@PLT	#
 2089      FF
 2090              	.LVL252:
 348:trigo_fast.c  **** }
 2091              		.loc 1 348 0
 2092 17e4 83C418   		addl	$24, %esp	#,
 2093              		.cfi_def_cfa_offset 8
 2094 17e7 5B       		popl	%ebx	#
 2095              		.cfi_restore 3
 2096              		.cfi_def_cfa_offset 4
 2097 17e8 C3       		ret
 2098              		.cfi_endproc
 2099              	.LFE12:
 2101              		.globl	sin_rz
 2103              	sin_rz:
 2104              	.LFB13:
 349:trigo_fast.c  **** 
 350:trigo_fast.c  **** /* TODO */
 351:trigo_fast.c  **** double sin_rz(double x){ 
 2105              		.loc 1 351 0
 2106              		.cfi_startproc
 2107              	.LVL253:
 2108 17e9 53       		pushl	%ebx	#
 2109              		.cfi_def_cfa_offset 8
 2110              		.cfi_offset 3, -8
 2111 17ea 83EC18   		subl	$24, %esp	#,
 2112              		.cfi_def_cfa_offset 32
 2113 17ed E8FCFFFF 		call	__x86.get_pc_thunk.bx	#
 2113      FF
 2114 17f2 81C30200 		addl	$_GLOBAL_OFFSET_TABLE_, %ebx	#,
 2114      0000
 352:trigo_fast.c  **** return scs_sin_rz(x);
 2115              		.loc 1 352 0
 2116 17f8 DD442420 		fldl	32(%esp)	# x
 2117 17fc DD1C24   		fstpl	(%esp)	#
 2118 17ff E8FCFFFF 		call	scs_sin_rz@PLT	#
 2118      FF
 2119              	.LVL254:
 353:trigo_fast.c  **** }
 2120              		.loc 1 353 0
 2121 1804 83C418   		addl	$24, %esp	#,
 2122              		.cfi_def_cfa_offset 8
 2123 1807 5B       		popl	%ebx	#
 2124              		.cfi_restore 3
 2125              		.cfi_def_cfa_offset 4
 2126 1808 C3       		ret
 2127              		.cfi_endproc
 2128              	.LFE13:
 2130              		.section	.rodata.str1.1
 2131              	.LC45:
 2132 011c 4A555354 		.string	"JUST BEFORE RANGEREDUCE!"
 2132      20424546 
 2132      4F524520 
 2132      52414E47 
 2132      45524544 
 2133              	.LC46:
 2134 0135 79683D25 		.string	"yh=%.20e, yl=%.20e\n"
 2134      2E323065 
 2134      2C20796C 
 2134      3D252E32 
 2134      30650A00 
 2135              	.LC47:
 2136 0149 4A555354 		.string	"JUST AFTER RANGEREDUCE!"
 2136      20414654 
 2136      45522052 
 2136      414E4745 
 2136      52454455 
 2137              		.text
 2138              		.globl	cos_rn
 2140              	cos_rn:
 2141              	.LFB14:
 354:trigo_fast.c  **** 
 355:trigo_fast.c  **** /*************************************************************
 356:trigo_fast.c  ****  *************************************************************
 357:trigo_fast.c  ****  *              COS ROUNDED  TO NEAREST			     *
 358:trigo_fast.c  ****  *************************************************************
 359:trigo_fast.c  ****  *************************************************************/
 360:trigo_fast.c  **** double cos_rn(double x){ 
 2142              		.loc 1 360 0
 2143              		.cfi_startproc
 2144              	.LVL255:
 2145 1809 55       		pushl	%ebp	#
 2146              		.cfi_def_cfa_offset 8
 2147              		.cfi_offset 5, -8
 2148 180a 57       		pushl	%edi	#
 2149              		.cfi_def_cfa_offset 12
 2150              		.cfi_offset 7, -12
 2151 180b 56       		pushl	%esi	#
 2152              		.cfi_def_cfa_offset 16
 2153              		.cfi_offset 6, -16
 2154 180c 53       		pushl	%ebx	#
 2155              		.cfi_def_cfa_offset 20
 2156              		.cfi_offset 3, -20
 2157 180d 83EC5C   		subl	$92, %esp	#,
 2158              		.cfi_def_cfa_offset 112
 2159 1810 E8FCFFFF 		call	__x86.get_pc_thunk.bx	#
 2159      FF
 2160 1815 81C30200 		addl	$_GLOBAL_OFFSET_TABLE_, %ebx	#,
 2160      0000
 2161 181b DD442470 		fldl	112(%esp)	# x
 2162 181f DD542418 		fstl	24(%esp)	# %sfp
 361:trigo_fast.c  ****   double ch, cl, yh, yl,  tc;
 362:trigo_fast.c  ****   int quadrant;
 363:trigo_fast.c  ****   int k;
 364:trigo_fast.c  ****   int absxhi;
 365:trigo_fast.c  ****   db_number xx;
 366:trigo_fast.c  **** 
 367:trigo_fast.c  **** #if INLINE_SINCOS
 368:trigo_fast.c  ****   double sah,sal,cah,cal,ts;
 369:trigo_fast.c  **** #endif
 370:trigo_fast.c  **** 
 371:trigo_fast.c  ****   xx.d=x;
 2163              		.loc 1 371 0
 2164 1823 F20F1044 		movsd	24(%esp), %xmm0	# %sfp, x
 2164      2418
 2165 1829 F20F1144 		movsd	%xmm0, 32(%esp)	# x, %sfp
 2165      2420
 372:trigo_fast.c  ****   absxhi = xx.i[HI_ENDIAN] & 0x7fffffff;
 2166              		.loc 1 372 0
 2167 182f 8B742424 		movl	36(%esp), %esi	# %sfp, absxhi
 2168 1833 81E6FFFF 		andl	$2147483647, %esi	#, absxhi
 2168      FF7F
 2169              	.LVL256:
 373:trigo_fast.c  **** 
 374:trigo_fast.c  ****   if (absxhi < XMAX_COS_FAST){
 2170              		.loc 1 374 0
 2171 1839 81FEFFFF 		cmpl	$1067450367, %esi	#, absxhi
 2171      9F3F
 2172 183f 0F8FA700 		jg	.L66	#,
 2172      0000
 375:trigo_fast.c  ****     if (absxhi <XMAX_RETURN_1_FOR_COS)
 2173              		.loc 1 375 0
 2174 1845 81FEFFFF 		cmpl	$1044381695, %esi	#, absxhi
 2174      3F3E
 2175 184b 0F8E9702 		jle	.L75	#,
 2175      0000
 376:trigo_fast.c  ****       return 1.;
 377:trigo_fast.c  ****     /* Fast Taylor series */
 378:trigo_fast.c  ****     yh=x*x;
 2176              		.loc 1 378 0
 2177 1851 D9C0     		fld	%st(0)	#
 2178 1853 DEC9     		fmulp	%st, %st(1)	#,
 2179 1855 DD5C2428 		fstpl	40(%esp)	#
 2180 1859 DD442428 		fldl	40(%esp)	#
 2181 185d DD542438 		fstl	56(%esp)	# yh
 2182              	.LVL257:
 379:trigo_fast.c  ****     tc = yh * (c2.d + yh*(c4.d + yh*(c6.d + yh*(c8.d))));
 2183              		.loc 1 379 0
 2184 1861 D9C0     		fld	%st(0)	#
 2185 1863 DC8B2008 		fmull	c8@GOTOFF(%ebx)	# c8.d
 2185      0000
 2186              	.LVL258:
 2187 1869 DC832808 		faddl	c6@GOTOFF(%ebx)	# c6.d
 2187      0000
 2188 186f D8C9     		fmul	%st(1), %st	#,
 2189 1871 DC833008 		faddl	c4@GOTOFF(%ebx)	# c4.d
 2189      0000
 2190 1877 D8C9     		fmul	%st(1), %st	#,
 2191 1879 DC833808 		faddl	c2@GOTOFF(%ebx)	# c2.d
 2191      0000
 2192 187f DEC9     		fmulp	%st, %st(1)	#,
 2193 1881 DD5C2428 		fstpl	40(%esp)	#
 2194 1885 DD442428 		fldl	40(%esp)	#
 2195              	.LBB34:
 380:trigo_fast.c  ****     Add12(ch,cl, 1, tc);
 2196              		.loc 1 380 0
 2197 1889 D9E8     		fld1
 2198 188b D9C1     		fld	%st(1)	#
 2199 188d D8C1     		fadd	%st(1), %st	#,
 2200 188f DD5C2428 		fstpl	40(%esp)	#
 2201 1893 DD442428 		fldl	40(%esp)	#
 2202 1897 DD542448 		fstl	72(%esp)	# ch
 2203 189b D9C0     		fld	%st(0)	#
 2204              	.LVL259:
 2205 189d DCE2     		fsub	%st, %st(2)	#,
 2206 189f D9CA     		fxch	%st(2)	#
 2207              	.LVL260:
 2208 18a1 DD5C2428 		fstpl	40(%esp)	#
 2209 18a5 DD442428 		fldl	40(%esp)	#
 2210 18a9 DEEB     		fsubrp	%st, %st(3)	#,
 2211 18ab D9CA     		fxch	%st(2)	#
 2212              	.LVL261:
 2213 18ad DD5C2428 		fstpl	40(%esp)	#
 2214 18b1 DD442428 		fldl	40(%esp)	#
 2215              	.LVL262:
 2216 18b5 DD542440 		fstl	64(%esp)	# cl
 2217              	.LBE34:
 381:trigo_fast.c  ****     if(ch == (ch + (cl * RN_CST_COSFAST))){	
 2218              		.loc 1 381 0
 2219 18b9 DBAB0000 		fldt	.LC44@GOTOFF(%ebx)	#
 2219      0000
 2220 18bf DEC9     		fmulp	%st, %st(1)	#,
 2221 18c1 D8C1     		fadd	%st(1), %st	#,
 2222 18c3 D9C9     		fxch	%st(1)	#
 2223 18c5 DFE9     		fucomip	%st(1), %st	#,
 2224 18c7 DDD8     		fstp	%st(0)	#
 2225 18c9 7A0A     		jp	.L81	#,
 2226 18cb 0F841B02 		je	.L67	#,
 2226      0000
 2227 18d1 DDD8     		fstp	%st(0)	#
 2228 18d3 EB02     		jmp	.L78	#
 2229              	.L81:
 2230 18d5 DDD8     		fstp	%st(0)	#
 2231              	.L78:
 382:trigo_fast.c  ****       return ch;
 383:trigo_fast.c  ****     }else{ 
 384:trigo_fast.c  ****       return scs_cos_rn(x); 
 2232              		.loc 1 384 0
 2233 18d7 F20F1054 		movsd	24(%esp), %xmm2	# %sfp, x
 2233      2418
 2234 18dd F20F1114 		movsd	%xmm2, (%esp)	# x,
 2234      24
 2235 18e2 E8FCFFFF 		call	scs_cos_rn@PLT	#
 2235      FF
 2236              	.LVL263:
 2237 18e7 E9000200 		jmp	.L67	#
 2237      00
 2238              	.LVL264:
 2239              	.L66:
 2240 18ec DDD8     		fstp	%st(0)	#
 385:trigo_fast.c  ****     } 
 386:trigo_fast.c  ****   }
 387:trigo_fast.c  ****   
 388:trigo_fast.c  ****   /* Otherwise : Range reduction then standard evaluation */
 389:trigo_fast.c  ****   printf ("JUST BEFORE RANGEREDUCE!\n");
 2241              		.loc 1 389 0
 2242 18ee 8D830000 		leal	.LC45@GOTOFF(%ebx), %eax	#, tmp169
 2242      0000
 2243 18f4 890424   		movl	%eax, (%esp)	# tmp169,
 2244 18f7 E8FCFFFF 		call	puts@PLT	#
 2244      FF
 2245              	.LVL265:
 390:trigo_fast.c  ****   printf ("x=%.20e absxhi=%i\n", x,absxhi);
 2246              		.loc 1 390 0
 2247 18fc 8974240C 		movl	%esi, 12(%esp)	# absxhi,
 2248 1900 F20F104C 		movsd	24(%esp), %xmm1	# %sfp, x
 2248      2418
 2249 1906 F20F114C 		movsd	%xmm1, 4(%esp)	# x,
 2249      2404
 2250 190c 8DAB0000 		leal	.LC12@GOTOFF(%ebx), %ebp	#, tmp170
 2250      0000
 2251 1912 892C24   		movl	%ebp, (%esp)	# tmp170,
 2252 1915 E8FCFFFF 		call	printf@PLT	#
 2252      FF
 2253              	.LVL266:
 391:trigo_fast.c  ****   //yh=0.0; yl=0.0; // Doesn't matter
 392:trigo_fast.c  ****   printf ("yh=%.20e, yl=%.20e\n", yh,yl);
 2254              		.loc 1 392 0
 2255 191a DD442430 		fldl	48(%esp)	# yl
 2256 191e DD5C240C 		fstpl	12(%esp)	#
 2257 1922 DD442438 		fldl	56(%esp)	# yh
 2258 1926 DD5C2404 		fstpl	4(%esp)	#
 2259 192a 8DBB0000 		leal	.LC46@GOTOFF(%ebx), %edi	#, tmp173
 2259      0000
 2260 1930 893C24   		movl	%edi, (%esp)	# tmp173,
 2261 1933 E8FCFFFF 		call	printf@PLT	#
 2261      FF
 2262              	.LVL267:
 393:trigo_fast.c  ****   printf ("\n");
 2263              		.loc 1 393 0
 2264 1938 C704240A 		movl	$10, (%esp)	#,
 2264      000000
 2265 193f E8FCFFFF 		call	putchar@PLT	#
 2265      FF
 2266              	.LVL268:
 394:trigo_fast.c  **** 
 395:trigo_fast.c  ****   k=trig_range_reduction(&yh, &yl,  x, absxhi, &scs_cos_rn);
 2267              		.loc 1 395 0
 2268 1944 8D542430 		leal	48(%esp), %edx	#, tmp174
 2269 1948 8D442438 		leal	56(%esp), %eax	#, tmp175
 2270 194c 8B8B0000 		movl	scs_cos_rn@GOT(%ebx), %ecx	#, tmp177
 2270      0000
 2271 1952 894C240C 		movl	%ecx, 12(%esp)	# tmp177,
 2272 1956 89742408 		movl	%esi, 8(%esp)	# absxhi,
 2273 195a F20F104C 		movsd	24(%esp), %xmm1	# %sfp, x
 2273      2418
 2274 1960 F20F110C 		movsd	%xmm1, (%esp)	# x,
 2274      24
 2275 1965 E84CEEFF 		call	trig_range_reduction	#
 2275      FF
 2276              	.LVL269:
 2277 196a 89442420 		movl	%eax, 32(%esp)	#, %sfp
 2278              	.LVL270:
 396:trigo_fast.c  ****   
 397:trigo_fast.c  ****   printf ("JUST AFTER RANGEREDUCE!\n");  
 2279              		.loc 1 397 0
 2280 196e 8D830000 		leal	.LC47@GOTOFF(%ebx), %eax	#, tmp178
 2280      0000
 2281              	.LVL271:
 2282 1974 890424   		movl	%eax, (%esp)	# tmp178,
 2283 1977 E8FCFFFF 		call	puts@PLT	#
 2283      FF
 2284              	.LVL272:
 398:trigo_fast.c  ****   printf ("x=%.20e absxhi=%i\n", x,absxhi);
 2285              		.loc 1 398 0
 2286 197c 8974240C 		movl	%esi, 12(%esp)	# absxhi,
 2287 1980 F20F104C 		movsd	24(%esp), %xmm1	# %sfp, x
 2287      2418
 2288 1986 F20F114C 		movsd	%xmm1, 4(%esp)	# x,
 2288      2404
 2289 198c 892C24   		movl	%ebp, (%esp)	# tmp170,
 2290 198f E8FCFFFF 		call	printf@PLT	#
 2290      FF
 2291              	.LVL273:
 399:trigo_fast.c  ****   printf ("yh=%.20e, yl=%.20e\n", yh,yl);
 2292              		.loc 1 399 0
 2293 1994 DD442430 		fldl	48(%esp)	# yl
 2294 1998 DD5C240C 		fstpl	12(%esp)	#
 2295 199c DD442438 		fldl	56(%esp)	# yh
 2296 19a0 DD5C2404 		fstpl	4(%esp)	#
 2297 19a4 893C24   		movl	%edi, (%esp)	# tmp173,
 2298 19a7 E8FCFFFF 		call	printf@PLT	#
 2298      FF
 2299              	.LVL274:
 400:trigo_fast.c  ****   printf ("\n");
 2300              		.loc 1 400 0
 2301 19ac C704240A 		movl	$10, (%esp)	#,
 2301      000000
 2302 19b3 E8FCFFFF 		call	putchar@PLT	#
 2302      FF
 2303              	.LVL275:
 401:trigo_fast.c  **** 
 402:trigo_fast.c  ****   /* Now y_h is in -Pi/512, Pi/512 and k holds the 32 lower bits of an
 403:trigo_fast.c  ****      int such that x = yh+yl + kPi/256 */
 404:trigo_fast.c  ****   
 405:trigo_fast.c  ****   quadrant = (k>>7)&3;
 2304              		.loc 1 405 0
 2305 19b8 8B442420 		movl	32(%esp), %eax	# %sfp, k
 2306 19bc 89C2     		movl	%eax, %edx	# k, D.3377
 2307 19be C1FA07   		sarl	$7, %edx	#, D.3377
 2308 19c1 89D6     		movl	%edx, %esi	# D.3377, quadrant
 2309              	.LVL276:
 2310 19c3 83E603   		andl	$3, %esi	#, quadrant
 2311              	.LVL277:
 406:trigo_fast.c  ****   k=(k&127)<<2;
 2312              		.loc 1 406 0
 2313 19c6 83E07F   		andl	$127, %eax	#, D.3377
 2314 19c9 C1E002   		sall	$2, %eax	#, k
 2315              	.LVL278:
 407:trigo_fast.c  ****   
 408:trigo_fast.c  ****   if(k<=(64<<2)) {
 2316              		.loc 1 408 0
 2317 19cc 3D000100 		cmpl	$256, %eax	#, k
 2317      00
 2318 19d1 7F36     		jg	.L69	#,
 409:trigo_fast.c  ****     sah=sincosTable[k+0].d; /* sin(a), high part */
 2319              		.loc 1 409 0
 2320 19d3 DD84C300 		fldl	sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[k_65].d
 2320      000000
 2321 19da DD9B1800 		fstpl	sah@GOTOFF(%ebx)	# sah
 2321      0000
 410:trigo_fast.c  ****     sal=sincosTable[k+1].d; /* sin(a), low part */
 2322              		.loc 1 410 0
 2323 19e0 DD84C308 		fldl	8+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_68].d
 2323      000000
 2324 19e7 DD9B1000 		fstpl	sal@GOTOFF(%ebx)	# sal
 2324      0000
 411:trigo_fast.c  ****     cah=sincosTable[k+2].d; /* cos(a), high part */
 2325              		.loc 1 411 0
 2326 19ed DD84C310 		fldl	16+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_71].d
 2326      000000
 2327 19f4 DD9B0800 		fstpl	cah@GOTOFF(%ebx)	# cah
 2327      0000
 412:trigo_fast.c  ****     cal=sincosTable[k+3].d; /* cos(a), low part */
 2328              		.loc 1 412 0
 2329 19fa DD84C318 		fldl	24+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_74].d
 2329      000000
 2330 1a01 DD9B0000 		fstpl	cal@GOTOFF(%ebx)	# cal
 2330      0000
 2331 1a07 EB50     		jmp	.L70	#
 2332              	.L69:
 2333              	.LVL279:
 2334              	.LBB35:
 413:trigo_fast.c  ****   } else { /* cah <= sah */
 414:trigo_fast.c  ****     int k1=(128<<2) - k;
 2335              		.loc 1 414 0
 2336 1a09 B9000200 		movl	$512, %ecx	#, tmp199
 2336      00
 2337 1a0e 29C1     		subl	%eax, %ecx	# k, k1
 2338              	.LVL280:
 415:trigo_fast.c  ****     cah=sincosTable[k1+0].d; /* cos(a), high part */
 2339              		.loc 1 415 0
 2340 1a10 DD84CB00 		fldl	sincosTable@GOTOFF(%ebx,%ecx,8)	# sincosTable[k1_77].d
 2340      000000
 2341 1a17 DD9B0800 		fstpl	cah@GOTOFF(%ebx)	# cah
 2341      0000
 416:trigo_fast.c  ****     cal=sincosTable[k1+1].d; /* cos(a), low part  */ 
 2342              		.loc 1 416 0
 2343 1a1d B9010200 		movl	$513, %ecx	#, tmp204
 2343      00
 2344              	.LVL281:
 2345 1a22 29C1     		subl	%eax, %ecx	# k, D.3377
 2346 1a24 DD84CB00 		fldl	sincosTable@GOTOFF(%ebx,%ecx,8)	# sincosTable[_80].d
 2346      000000
 2347 1a2b DD9B0000 		fstpl	cal@GOTOFF(%ebx)	# cal
 2347      0000
 417:trigo_fast.c  ****     sah=sincosTable[k1+2].d; /* sin(a), high part */
 2348              		.loc 1 417 0
 2349 1a31 B9020200 		movl	$514, %ecx	#, tmp209
 2349      00
 2350 1a36 29C1     		subl	%eax, %ecx	# k, D.3377
 2351 1a38 DD84CB00 		fldl	sincosTable@GOTOFF(%ebx,%ecx,8)	# sincosTable[_83].d
 2351      000000
 2352 1a3f DD9B1800 		fstpl	sah@GOTOFF(%ebx)	# sah
 2352      0000
 418:trigo_fast.c  ****     sal=sincosTable[k1+3].d; /* sin(a), low part  */
 2353              		.loc 1 418 0
 2354 1a45 B9030200 		movl	$515, %ecx	#, tmp214
 2354      00
 2355 1a4a 29C1     		subl	%eax, %ecx	# k, D.3377
 2356 1a4c DD84CB00 		fldl	sincosTable@GOTOFF(%ebx,%ecx,8)	# sincosTable[_86].d
 2356      000000
 2357 1a53 DD9B1000 		fstpl	sal@GOTOFF(%ebx)	# sal
 2357      0000
 2358              	.LVL282:
 2359              	.L70:
 2360              	.LBE35:
 419:trigo_fast.c  ****   }
 420:trigo_fast.c  **** 
 421:trigo_fast.c  **** 
 422:trigo_fast.c  **** #if INLINE_SINCOS
 423:trigo_fast.c  ****   if (quadrant&1){   /*compute the cos  */
 424:trigo_fast.c  ****     DO_SIN(ch,cl);
 425:trigo_fast.c  ****   }
 426:trigo_fast.c  ****   else {/* compute the sine */
 427:trigo_fast.c  ****     DO_COS(ch,cl);
 428:trigo_fast.c  ****   }
 429:trigo_fast.c  **** #else
 430:trigo_fast.c  ****   if (quadrant&1)   /*compute the cos  */
 2361              		.loc 1 430 0
 2362 1a59 F6C201   		testb	$1, %dl	#, D.3377
 2363 1a5c 741E     		je	.L71	#,
 431:trigo_fast.c  ****     do_sin(&ch, &cl,  yh,yl);
 2364              		.loc 1 431 0
 2365 1a5e 8D542440 		leal	64(%esp), %edx	#, tmp219
 2366 1a62 8D442448 		leal	72(%esp), %eax	#, tmp220
 2367              	.LVL283:
 2368 1a66 DD442430 		fldl	48(%esp)	# yl
 2369 1a6a DD5C2408 		fstpl	8(%esp)	#
 2370 1a6e DD442438 		fldl	56(%esp)	# yh
 2371 1a72 DD1C24   		fstpl	(%esp)	#
 2372 1a75 E857E9FF 		call	do_sin	#
 2372      FF
 2373              	.LVL284:
 2374 1a7a EB1C     		jmp	.L72	#
 2375              	.LVL285:
 2376              	.L71:
 432:trigo_fast.c  ****   else /* compute the sine */
 433:trigo_fast.c  ****     do_cos(&ch, &cl,  yh,yl);
 2377              		.loc 1 433 0
 2378 1a7c 8D542440 		leal	64(%esp), %edx	#, tmp223
 2379 1a80 8D442448 		leal	72(%esp), %eax	#, tmp224
 2380              	.LVL286:
 2381 1a84 DD442430 		fldl	48(%esp)	# yl
 2382 1a88 DD5C2408 		fstpl	8(%esp)	#
 2383 1a8c DD442438 		fldl	56(%esp)	# yh
 2384 1a90 DD1C24   		fstpl	(%esp)	#
 2385 1a93 E868E5FF 		call	do_cos	#
 2385      FF
 2386              	.LVL287:
 2387              	.L72:
 434:trigo_fast.c  **** #endif
 435:trigo_fast.c  ****   
 436:trigo_fast.c  ****   if((quadrant == 1)||(quadrant == 2)) { 
 2388              		.loc 1 436 0
 2389 1a98 83EE01   		subl	$1, %esi	#, D.3379
 2390              	.LVL288:
 2391 1a9b 83FE01   		cmpl	$1, %esi	#, D.3379
 2392 1a9e 7714     		ja	.L73	#,
 437:trigo_fast.c  ****     ch = -ch;
 2393              		.loc 1 437 0
 2394 1aa0 DD442448 		fldl	72(%esp)	# ch
 2395 1aa4 D9E0     		fchs
 2396 1aa6 DD5C2448 		fstpl	72(%esp)	# ch
 438:trigo_fast.c  ****     cl = -cl;
 2397              		.loc 1 438 0
 2398 1aaa DD442440 		fldl	64(%esp)	# cl
 2399 1aae D9E0     		fchs
 2400 1ab0 DD5C2440 		fstpl	64(%esp)	# cl
 2401              	.L73:
 439:trigo_fast.c  ****   }
 440:trigo_fast.c  ****   
 441:trigo_fast.c  ****   if(ch == (ch + (cl * 1.0004))){	
 2402              		.loc 1 441 0
 2403 1ab4 DD442448 		fldl	72(%esp)	# ch
 2404 1ab8 D9C0     		fld	%st(0)	#
 2405 1aba DBAB0000 		fldt	.LC43@GOTOFF(%ebx)	#
 2405      0000
 2406 1ac0 DC4C2440 		fmull	64(%esp)	# cl
 2407 1ac4 D8C1     		fadd	%st(1), %st	#,
 2408 1ac6 D9C9     		fxch	%st(1)	#
 2409 1ac8 DFE9     		fucomip	%st(1), %st	#,
 2410 1aca DDD8     		fstp	%st(0)	#
 2411 1acc 7A06     		jp	.L82	#,
 2412 1ace 741C     		je	.L67	#,
 2413 1ad0 DDD8     		fstp	%st(0)	#
 2414 1ad2 EB02     		jmp	.L79	#
 2415              	.L82:
 2416 1ad4 DDD8     		fstp	%st(0)	#
 2417              	.L79:
 442:trigo_fast.c  ****      return ch;
 443:trigo_fast.c  ****   }else{
 444:trigo_fast.c  ****     return scs_cos_rn(x); 
 2418              		.loc 1 444 0
 2419 1ad6 F20F105C 		movsd	24(%esp), %xmm3	# %sfp, x
 2419      2418
 2420 1adc F20F111C 		movsd	%xmm3, (%esp)	# x,
 2420      24
 2421 1ae1 E8FCFFFF 		call	scs_cos_rn@PLT	#
 2421      FF
 2422              	.LVL289:
 2423 1ae6 EB04     		jmp	.L67	#
 2424              	.LVL290:
 2425              	.L75:
 2426 1ae8 DDD8     		fstp	%st(0)	#
 376:trigo_fast.c  ****       return 1.;
 2427              		.loc 1 376 0
 2428 1aea D9E8     		fld1
 2429              	.LVL291:
 2430              	.L67:
 445:trigo_fast.c  ****   } 
 446:trigo_fast.c  **** 
 447:trigo_fast.c  **** }
 2431              		.loc 1 447 0
 2432 1aec 83C45C   		addl	$92, %esp	#,
 2433              		.cfi_def_cfa_offset 20
 2434 1aef 5B       		popl	%ebx	#
 2435              		.cfi_restore 3
 2436              		.cfi_def_cfa_offset 16
 2437 1af0 5E       		popl	%esi	#
 2438              		.cfi_restore 6
 2439              		.cfi_def_cfa_offset 12
 2440 1af1 5F       		popl	%edi	#
 2441              		.cfi_restore 7
 2442              		.cfi_def_cfa_offset 8
 2443 1af2 5D       		popl	%ebp	#
 2444              		.cfi_restore 5
 2445              		.cfi_def_cfa_offset 4
 2446 1af3 C3       		ret
 2447              		.cfi_endproc
 2448              	.LFE14:
 2450              		.globl	cos_rd
 2452              	cos_rd:
 2453              	.LFB15:
 448:trigo_fast.c  **** 
 449:trigo_fast.c  **** 
 450:trigo_fast.c  **** /* TODO */
 451:trigo_fast.c  **** double cos_rd(double x){
 2454              		.loc 1 451 0
 2455              		.cfi_startproc
 2456              	.LVL292:
 2457 1af4 53       		pushl	%ebx	#
 2458              		.cfi_def_cfa_offset 8
 2459              		.cfi_offset 3, -8
 2460 1af5 83EC18   		subl	$24, %esp	#,
 2461              		.cfi_def_cfa_offset 32
 2462 1af8 E8FCFFFF 		call	__x86.get_pc_thunk.bx	#
 2462      FF
 2463 1afd 81C30200 		addl	$_GLOBAL_OFFSET_TABLE_, %ebx	#,
 2463      0000
 452:trigo_fast.c  **** return scs_cos_rd(x);
 2464              		.loc 1 452 0
 2465 1b03 DD442420 		fldl	32(%esp)	# x
 2466 1b07 DD1C24   		fstpl	(%esp)	#
 2467 1b0a E8FCFFFF 		call	scs_cos_rd@PLT	#
 2467      FF
 2468              	.LVL293:
 453:trigo_fast.c  **** }
 2469              		.loc 1 453 0
 2470 1b0f 83C418   		addl	$24, %esp	#,
 2471              		.cfi_def_cfa_offset 8
 2472 1b12 5B       		popl	%ebx	#
 2473              		.cfi_restore 3
 2474              		.cfi_def_cfa_offset 4
 2475 1b13 C3       		ret
 2476              		.cfi_endproc
 2477              	.LFE15:
 2479              		.globl	cos_ru
 2481              	cos_ru:
 2482              	.LFB16:
 454:trigo_fast.c  **** 
 455:trigo_fast.c  **** /* TODO */
 456:trigo_fast.c  **** double cos_ru(double x){ 
 2483              		.loc 1 456 0
 2484              		.cfi_startproc
 2485              	.LVL294:
 2486 1b14 53       		pushl	%ebx	#
 2487              		.cfi_def_cfa_offset 8
 2488              		.cfi_offset 3, -8
 2489 1b15 83EC18   		subl	$24, %esp	#,
 2490              		.cfi_def_cfa_offset 32
 2491 1b18 E8FCFFFF 		call	__x86.get_pc_thunk.bx	#
 2491      FF
 2492 1b1d 81C30200 		addl	$_GLOBAL_OFFSET_TABLE_, %ebx	#,
 2492      0000
 457:trigo_fast.c  **** return scs_cos_ru(x);
 2493              		.loc 1 457 0
 2494 1b23 DD442420 		fldl	32(%esp)	# x
 2495 1b27 DD1C24   		fstpl	(%esp)	#
 2496 1b2a E8FCFFFF 		call	scs_cos_ru@PLT	#
 2496      FF
 2497              	.LVL295:
 458:trigo_fast.c  **** }
 2498              		.loc 1 458 0
 2499 1b2f 83C418   		addl	$24, %esp	#,
 2500              		.cfi_def_cfa_offset 8
 2501 1b32 5B       		popl	%ebx	#
 2502              		.cfi_restore 3
 2503              		.cfi_def_cfa_offset 4
 2504 1b33 C3       		ret
 2505              		.cfi_endproc
 2506              	.LFE16:
 2508              		.globl	cos_rz
 2510              	cos_rz:
 2511              	.LFB17:
 459:trigo_fast.c  **** 
 460:trigo_fast.c  **** /* TODO */
 461:trigo_fast.c  **** double cos_rz(double x){ 
 2512              		.loc 1 461 0
 2513              		.cfi_startproc
 2514              	.LVL296:
 2515 1b34 53       		pushl	%ebx	#
 2516              		.cfi_def_cfa_offset 8
 2517              		.cfi_offset 3, -8
 2518 1b35 83EC18   		subl	$24, %esp	#,
 2519              		.cfi_def_cfa_offset 32
 2520 1b38 E8FCFFFF 		call	__x86.get_pc_thunk.bx	#
 2520      FF
 2521 1b3d 81C30200 		addl	$_GLOBAL_OFFSET_TABLE_, %ebx	#,
 2521      0000
 462:trigo_fast.c  **** return scs_cos_rz(x);
 2522              		.loc 1 462 0
 2523 1b43 DD442420 		fldl	32(%esp)	# x
 2524 1b47 DD1C24   		fstpl	(%esp)	#
 2525 1b4a E8FCFFFF 		call	scs_cos_rz@PLT	#
 2525      FF
 2526              	.LVL297:
 463:trigo_fast.c  **** }
 2527              		.loc 1 463 0
 2528 1b4f 83C418   		addl	$24, %esp	#,
 2529              		.cfi_def_cfa_offset 8
 2530 1b52 5B       		popl	%ebx	#
 2531              		.cfi_restore 3
 2532              		.cfi_def_cfa_offset 4
 2533 1b53 C3       		ret
 2534              		.cfi_endproc
 2535              	.LFE17:
 2537              		.section	.rodata.str1.4
 2538 0093 00       		.align 4
 2539              	.LC48:
 2540 0094 45525245 		.string	"ERREUR: %d is not a valid value in sn_tan \n"
 2540      55523A20 
 2540      25642069 
 2540      73206E6F 
 2540      74206120 
 2541              		.text
 2542              		.globl	tan_rn
 2544              	tan_rn:
 2545              	.LFB18:
 464:trigo_fast.c  **** 
 465:trigo_fast.c  **** /*************************************************************
 466:trigo_fast.c  ****  *************************************************************
 467:trigo_fast.c  ****  *              TAN ROUNDED  TO NEAREST			     *
 468:trigo_fast.c  ****  *************************************************************
 469:trigo_fast.c  ****  *************************************************************/ 
 470:trigo_fast.c  **** double tan_rn(double x){  
 2546              		.loc 1 470 0
 2547              		.cfi_startproc
 2548              	.LVL298:
 2549 1b54 56       		pushl	%esi	#
 2550              		.cfi_def_cfa_offset 8
 2551              		.cfi_offset 6, -8
 2552 1b55 53       		pushl	%ebx	#
 2553              		.cfi_def_cfa_offset 12
 2554              		.cfi_offset 3, -12
 2555 1b56 81ECC400 		subl	$196, %esp	#,
 2555      0000
 2556              		.cfi_def_cfa_offset 208
 2557 1b5c E8FCFFFF 		call	__x86.get_pc_thunk.bx	#
 2557      FF
 2558 1b61 81C30200 		addl	$_GLOBAL_OFFSET_TABLE_, %ebx	#,
 2558      0000
 2559 1b67 DD8424D0 		fldl	208(%esp)	# x
 2559      000000
 2560 1b6e DD542428 		fstl	40(%esp)	# %sfp
 471:trigo_fast.c  ****   double reshi, reslo, sh, sl, ch, cl, kd, yh, yl;
 472:trigo_fast.c  ****   db_number y;
 473:trigo_fast.c  ****   int k, quadrant;
 474:trigo_fast.c  **** 
 475:trigo_fast.c  **** 
 476:trigo_fast.c  ****   int absxhi;
 477:trigo_fast.c  ****   db_number xx;
 478:trigo_fast.c  **** 
 479:trigo_fast.c  **** #if INLINE_SINCOS
 480:trigo_fast.c  ****   double sah,sal,cah,cal,ts,tc;
 481:trigo_fast.c  **** #endif
 482:trigo_fast.c  **** 
 483:trigo_fast.c  ****   xx.d=x;
 2561              		.loc 1 483 0
 2562 1b72 F20F1044 		movsd	40(%esp), %xmm0	# %sfp, x
 2562      2428
 2563 1b78 F20F1144 		movsd	%xmm0, 48(%esp)	# x, %sfp
 2563      2430
 484:trigo_fast.c  ****   absxhi = xx.i[HI_ENDIAN] & 0x7fffffff;
 2564              		.loc 1 484 0
 2565 1b7e 8B4C2434 		movl	52(%esp), %ecx	# %sfp, D.3391
 2566              	.LVL299:
 485:trigo_fast.c  **** 
 486:trigo_fast.c  ****   /* x < 2^-26  => tan(x)~x with accuracy 2^-53.2 */
 487:trigo_fast.c  ****   y.d = x;
 488:trigo_fast.c  ****     if((y.i[HI_ENDIAN]&0x7FFFFFFF) < 0x3E4BEAD3){	/* Test if |x| < (1+e)2^(-26) */
 2567              		.loc 1 488 0
 2568 1b82 8B442434 		movl	52(%esp), %eax	# %sfp, D.3391
 2569 1b86 25FFFFFF 		andl	$2147483647, %eax	#, D.3391
 2569      7F
 2570 1b8b 3DD2EA4B 		cmpl	$1045162706, %eax	#, D.3391
 2570      3E
 2571 1b90 0F8E0F06 		jle	.L90	#,
 2571      0000
 2572 1b96 DDD8     		fstp	%st(0)	#
 489:trigo_fast.c  ****     #if DEBUG
 490:trigo_fast.c  ****       printf("x est plus petit que 2^-26(1+e)\n");
 491:trigo_fast.c  ****     #endif
 492:trigo_fast.c  ****       return x;
 493:trigo_fast.c  ****     }
 494:trigo_fast.c  **** 
 495:trigo_fast.c  ****     /*TODO Add polynomial for small values here */ 
 496:trigo_fast.c  ****   
 497:trigo_fast.c  ****   /* Otherwise : Range reduction then standard evaluation */
 498:trigo_fast.c  ****   k=trig_range_reduction(&yh, &yl,  x, absxhi, &scs_cos_rn);
 2573              		.loc 1 498 0
 2574 1b98 8D942490 		leal	144(%esp), %edx	#, tmp226
 2574      000000
 2575 1b9f 8D842498 		leal	152(%esp), %eax	#, tmp227
 2575      000000
 2576 1ba6 8BB30000 		movl	scs_cos_rn@GOT(%ebx), %esi	#, tmp463
 2576      0000
 2577 1bac 8974240C 		movl	%esi, 12(%esp)	# tmp463,
 484:trigo_fast.c  ****   absxhi = xx.i[HI_ENDIAN] & 0x7fffffff;
 2578              		.loc 1 484 0
 2579 1bb0 81E1FFFF 		andl	$2147483647, %ecx	#, absxhi
 2579      FF7F
 2580              		.loc 1 498 0
 2581 1bb6 894C2408 		movl	%ecx, 8(%esp)	# absxhi,
 2582 1bba F20F1104 		movsd	%xmm0, (%esp)	# x,
 2582      24
 2583 1bbf E8F2EBFF 		call	trig_range_reduction	#
 2583      FF
 2584              	.LVL300:
 499:trigo_fast.c  **** 
 500:trigo_fast.c  ****   quadrant = (k>>7)&3;	/* Pi is divided in 4 quarters */	
 2585              		.loc 1 500 0
 2586 1bc4 89C2     		movl	%eax, %edx	# k, D.3391
 2587 1bc6 C1FA07   		sarl	$7, %edx	#, D.3391
 2588 1bc9 83E203   		andl	$3, %edx	#, quadrant
 2589              	.LVL301:
 501:trigo_fast.c  ****   kd = (double) k;
 502:trigo_fast.c  ****   k=(k&127)<<2;
 2590              		.loc 1 502 0
 2591 1bcc 83E07F   		andl	$127, %eax	#, D.3391
 2592              	.LVL302:
 2593 1bcf C1E002   		sall	$2, %eax	#, k
 2594              	.LVL303:
 503:trigo_fast.c  **** 
 504:trigo_fast.c  ****   switch (quadrant){
 2595              		.loc 1 504 0
 2596 1bd2 83FA01   		cmpl	$1, %edx	#, quadrant
 2597 1bd5 0F84BF00 		je	.L92	#,
 2597      0000
 2598 1bdb 83FA01   		cmpl	$1, %edx	#, quadrant
 2599 1bde 7F09     		jg	.L93	#,
 2600 1be0 85D2     		testl	%edx, %edx	# quadrant
 2601 1be2 7421     		je	.L94	#,
 2602              		.p2align 4,,6
 2603 1be4 E98A0200 		jmp	.L91	#
 2603      00
 2604              	.L93:
 2605 1be9 83FA02   		cmpl	$2, %edx	#, quadrant
 2606 1bec 8D742600 		.p2align 4,,6
 2607 1bf0 0F844101 		je	.L95	#,
 2607      0000
 2608 1bf6 83FA03   		cmpl	$3, %edx	#, quadrant
 2609              		.p2align 4,,5
 2610 1bf9 0F84DD01 		je	.L96	#,
 2610      0000
 2611 1bff 90       		.p2align 4,,5
 2612 1c00 E96E0200 		jmp	.L91	#
 2612      00
 2613              	.L94:
 505:trigo_fast.c  ****    case(0):
 506:trigo_fast.c  ****     #if DEBUG
 507:trigo_fast.c  ****       printf("Case 0\n");
 508:trigo_fast.c  ****     #endif
 509:trigo_fast.c  ****    if(k<=(64<<2)) {  /* sah <= cah */
 2614              		.loc 1 509 0
 2615 1c05 3D000100 		cmpl	$256, %eax	#, k
 2615      00
 2616              		.p2align 4,,3
 2617 1c0a 7F39     		jg	.L97	#,
 510:trigo_fast.c  ****     sah=sincosTable[k].d; /* sin(a), high part */
 2618              		.loc 1 510 0
 2619 1c0c DD84C300 		fldl	sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[k_17].d
 2619      000000
 2620 1c13 DD9B1800 		fstpl	sah@GOTOFF(%ebx)	# sah
 2620      0000
 511:trigo_fast.c  ****     sal=sincosTable[k+1].d; /* sin(a), low part */
 2621              		.loc 1 511 0
 2622 1c19 DD84C308 		fldl	8+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_20].d
 2622      000000
 2623 1c20 DD9B1000 		fstpl	sal@GOTOFF(%ebx)	# sal
 2623      0000
 512:trigo_fast.c  ****     cah=sincosTable[k+2].d; /* cos(a), high part */
 2624              		.loc 1 512 0
 2625 1c26 DD84C310 		fldl	16+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_23].d
 2625      000000
 2626 1c2d DD9B0800 		fstpl	cah@GOTOFF(%ebx)	# cah
 2626      0000
 513:trigo_fast.c  ****     cal=sincosTable[k+3].d; /* cos(a), low part */
 2627              		.loc 1 513 0
 2628 1c33 DD84C318 		fldl	24+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_26].d
 2628      000000
 2629 1c3a DD9B0000 		fstpl	cal@GOTOFF(%ebx)	# cal
 2629      0000
 2630 1c40 E9530200 		jmp	.L98	#
 2630      00
 2631              	.L97:
 2632              	.LVL304:
 2633              	.LBB36:
 514:trigo_fast.c  ****   } else { /* cah <= sah */
 515:trigo_fast.c  ****     int k1=(128<<2) - k;
 2634              		.loc 1 515 0
 2635 1c45 BA000200 		movl	$512, %edx	#, tmp248
 2635      00
 2636              	.LVL305:
 2637 1c4a 29C2     		subl	%eax, %edx	# k, k1
 2638              	.LVL306:
 516:trigo_fast.c  ****     cah=sincosTable[k1].d; 
 2639              		.loc 1 516 0
 2640 1c4c DD84D300 		fldl	sincosTable@GOTOFF(%ebx,%edx,8)	# sincosTable[k1_29].d
 2640      000000
 2641 1c53 DD9B0800 		fstpl	cah@GOTOFF(%ebx)	# cah
 2641      0000
 517:trigo_fast.c  ****     cal=sincosTable[k1+1].d;
 2642              		.loc 1 517 0
 2643 1c59 BA010200 		movl	$513, %edx	#, tmp253
 2643      00
 2644              	.LVL307:
 2645 1c5e 29C2     		subl	%eax, %edx	# k, D.3391
 2646 1c60 DD84D300 		fldl	sincosTable@GOTOFF(%ebx,%edx,8)	# sincosTable[_32].d
 2646      000000
 2647 1c67 DD9B0000 		fstpl	cal@GOTOFF(%ebx)	# cal
 2647      0000
 518:trigo_fast.c  ****     sah=sincosTable[k1+2].d;
 2648              		.loc 1 518 0
 2649 1c6d BA020200 		movl	$514, %edx	#, tmp258
 2649      00
 2650 1c72 29C2     		subl	%eax, %edx	# k, D.3391
 2651 1c74 DD84D300 		fldl	sincosTable@GOTOFF(%ebx,%edx,8)	# sincosTable[_35].d
 2651      000000
 2652 1c7b DD9B1800 		fstpl	sah@GOTOFF(%ebx)	# sah
 2652      0000
 519:trigo_fast.c  ****     sal=sincosTable[k1+3].d;
 2653              		.loc 1 519 0
 2654 1c81 BA030200 		movl	$515, %edx	#, tmp263
 2654      00
 2655 1c86 29C2     		subl	%eax, %edx	# k, D.3391
 2656 1c88 DD84D300 		fldl	sincosTable@GOTOFF(%ebx,%edx,8)	# sincosTable[_38].d
 2656      000000
 2657 1c8f DD9B1000 		fstpl	sal@GOTOFF(%ebx)	# sal
 2657      0000
 2658 1c95 E9FE0100 		jmp	.L98	#
 2658      00
 2659              	.LVL308:
 2660              	.L92:
 2661              	.LBE36:
 520:trigo_fast.c  ****   }     
 521:trigo_fast.c  ****      break;
 522:trigo_fast.c  ****    case(1):
 523:trigo_fast.c  ****     #if DEBUG
 524:trigo_fast.c  ****       printf("Case 1\n");
 525:trigo_fast.c  ****     #endif
 526:trigo_fast.c  ****      if(k<=(64<<2)) {  /* sah <= cah */
 2662              		.loc 1 526 0
 2663 1c9a 3D000100 		cmpl	$256, %eax	#, k
 2663      00
 2664 1c9f 7F3D     		jg	.L99	#,
 527:trigo_fast.c  ****     cah=-sincosTable[k].d; /* sin(a), high part */
 2665              		.loc 1 527 0
 2666 1ca1 DD84C300 		fldl	sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[k_17].d
 2666      000000
 2667 1ca8 D9E0     		fchs
 2668 1caa DD9B0800 		fstpl	cah@GOTOFF(%ebx)	# cah
 2668      0000
 528:trigo_fast.c  ****     cal=-sincosTable[k+1].d; /* sin(a), low part */
 2669              		.loc 1 528 0
 2670 1cb0 DD84C308 		fldl	8+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_44].d
 2670      000000
 2671 1cb7 D9E0     		fchs
 2672 1cb9 DD9B0000 		fstpl	cal@GOTOFF(%ebx)	# cal
 2672      0000
 529:trigo_fast.c  ****     sah=sincosTable[k+2].d; /* cos(a), high part */
 2673              		.loc 1 529 0
 2674 1cbf DD84C310 		fldl	16+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_48].d
 2674      000000
 2675 1cc6 DD9B1800 		fstpl	sah@GOTOFF(%ebx)	# sah
 2675      0000
 530:trigo_fast.c  ****     sal=sincosTable[k+3].d; /* cos(a), low part */
 2676              		.loc 1 530 0
 2677 1ccc DD84C318 		fldl	24+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_51].d
 2677      000000
 2678 1cd3 DD9B1000 		fstpl	sal@GOTOFF(%ebx)	# sal
 2678      0000
 2679 1cd9 E9BA0100 		jmp	.L98	#
 2679      00
 2680              	.L99:
 2681              	.LVL309:
 2682              	.LBB37:
 531:trigo_fast.c  ****   } else { /* cah <= sah */
 532:trigo_fast.c  ****     int k1=(128<<2) - k;
 2683              		.loc 1 532 0
 2684 1cde BA000200 		movl	$512, %edx	#, tmp285
 2684      00
 2685              	.LVL310:
 2686 1ce3 29C2     		subl	%eax, %edx	# k, k1
 2687              	.LVL311:
 533:trigo_fast.c  ****     sah=sincosTable[k1].d; 
 2688              		.loc 1 533 0
 2689 1ce5 DD84D300 		fldl	sincosTable@GOTOFF(%ebx,%edx,8)	# sincosTable[k1_54].d
 2689      000000
 2690 1cec DD9B1800 		fstpl	sah@GOTOFF(%ebx)	# sah
 2690      0000
 534:trigo_fast.c  ****     sal=sincosTable[k1+1].d;
 2691              		.loc 1 534 0
 2692 1cf2 BA010200 		movl	$513, %edx	#, tmp290
 2692      00
 2693              	.LVL312:
 2694 1cf7 29C2     		subl	%eax, %edx	# k, D.3391
 2695 1cf9 DD84D300 		fldl	sincosTable@GOTOFF(%ebx,%edx,8)	# sincosTable[_57].d
 2695      000000
 2696 1d00 DD9B1000 		fstpl	sal@GOTOFF(%ebx)	# sal
 2696      0000
 535:trigo_fast.c  ****     cah=-sincosTable[k1+2].d;
 2697              		.loc 1 535 0
 2698 1d06 BA020200 		movl	$514, %edx	#, tmp295
 2698      00
 2699 1d0b 29C2     		subl	%eax, %edx	# k, D.3391
 2700 1d0d DD84D300 		fldl	sincosTable@GOTOFF(%ebx,%edx,8)	# sincosTable[_60].d
 2700      000000
 2701 1d14 D9E0     		fchs
 2702 1d16 DD9B0800 		fstpl	cah@GOTOFF(%ebx)	# cah
 2702      0000
 536:trigo_fast.c  ****     cal=-sincosTable[k1+3].d;
 2703              		.loc 1 536 0
 2704 1d1c BA030200 		movl	$515, %edx	#, tmp301
 2704      00
 2705 1d21 29C2     		subl	%eax, %edx	# k, D.3391
 2706 1d23 DD84D300 		fldl	sincosTable@GOTOFF(%ebx,%edx,8)	# sincosTable[_64].d
 2706      000000
 2707 1d2a D9E0     		fchs
 2708 1d2c DD9B0000 		fstpl	cal@GOTOFF(%ebx)	# cal
 2708      0000
 2709 1d32 E9610100 		jmp	.L98	#
 2709      00
 2710              	.LVL313:
 2711              	.L95:
 2712              	.LBE37:
 537:trigo_fast.c  ****   }    
 538:trigo_fast.c  ****      break;
 539:trigo_fast.c  ****    case(2):
 540:trigo_fast.c  ****       if(k<=(64<<2)) {  /* sah <= cah */
 2713              		.loc 1 540 0
 2714 1d37 3D000100 		cmpl	$256, %eax	#, k
 2714      00
 2715 1d3c 7F41     		jg	.L100	#,
 541:trigo_fast.c  ****     sah=-sincosTable[k].d; /* sin(a), high part */
 2716              		.loc 1 541 0
 2717 1d3e DD84C300 		fldl	sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[k_17].d
 2717      000000
 2718 1d45 D9E0     		fchs
 2719 1d47 DD9B1800 		fstpl	sah@GOTOFF(%ebx)	# sah
 2719      0000
 542:trigo_fast.c  ****     sal=-sincosTable[k+1].d; /* sin(a), low part */
 2720              		.loc 1 542 0
 2721 1d4d DD84C308 		fldl	8+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_71].d
 2721      000000
 2722 1d54 D9E0     		fchs
 2723 1d56 DD9B1000 		fstpl	sal@GOTOFF(%ebx)	# sal
 2723      0000
 543:trigo_fast.c  ****     cah=-sincosTable[k+2].d; /* cos(a), high part */
 2724              		.loc 1 543 0
 2725 1d5c DD84C310 		fldl	16+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_75].d
 2725      000000
 2726 1d63 D9E0     		fchs
 2727 1d65 DD9B0800 		fstpl	cah@GOTOFF(%ebx)	# cah
 2727      0000
 544:trigo_fast.c  ****     cal=-sincosTable[k+3].d; /* cos(a), low part */
 2728              		.loc 1 544 0
 2729 1d6b DD84C318 		fldl	24+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_79].d
 2729      000000
 2730 1d72 D9E0     		fchs
 2731 1d74 DD9B0000 		fstpl	cal@GOTOFF(%ebx)	# cal
 2731      0000
 2732 1d7a E9190100 		jmp	.L98	#
 2732      00
 2733              	.L100:
 2734              	.LVL314:
 2735              	.LBB38:
 545:trigo_fast.c  ****   } else { /* cah <= sah */
 546:trigo_fast.c  ****     int k1=(128<<2) - k;
 2736              		.loc 1 546 0
 2737 1d7f BA000200 		movl	$512, %edx	#, tmp326
 2737      00
 2738              	.LVL315:
 2739 1d84 29C2     		subl	%eax, %edx	# k, k1
 2740              	.LVL316:
 547:trigo_fast.c  ****     cah=-sincosTable[k1].d; 
 2741              		.loc 1 547 0
 2742 1d86 DD84D300 		fldl	sincosTable@GOTOFF(%ebx,%edx,8)	# sincosTable[k1_83].d
 2742      000000
 2743 1d8d D9E0     		fchs
 2744 1d8f DD9B0800 		fstpl	cah@GOTOFF(%ebx)	# cah
 2744      0000
 548:trigo_fast.c  ****     cal=-sincosTable[k1+1].d;
 2745              		.loc 1 548 0
 2746 1d95 BA010200 		movl	$513, %edx	#, tmp332
 2746      00
 2747              	.LVL317:
 2748 1d9a 29C2     		subl	%eax, %edx	# k, D.3391
 2749 1d9c DD84D300 		fldl	sincosTable@GOTOFF(%ebx,%edx,8)	# sincosTable[_87].d
 2749      000000
 2750 1da3 D9E0     		fchs
 2751 1da5 DD9B0000 		fstpl	cal@GOTOFF(%ebx)	# cal
 2751      0000
 549:trigo_fast.c  ****     sah=-sincosTable[k1+2].d;
 2752              		.loc 1 549 0
 2753 1dab BA020200 		movl	$514, %edx	#, tmp338
 2753      00
 2754 1db0 29C2     		subl	%eax, %edx	# k, D.3391
 2755 1db2 DD84D300 		fldl	sincosTable@GOTOFF(%ebx,%edx,8)	# sincosTable[_91].d
 2755      000000
 2756 1db9 D9E0     		fchs
 2757 1dbb DD9B1800 		fstpl	sah@GOTOFF(%ebx)	# sah
 2757      0000
 550:trigo_fast.c  ****     sal=-sincosTable[k1+3].d;
 2758              		.loc 1 550 0
 2759 1dc1 BA030200 		movl	$515, %edx	#, tmp344
 2759      00
 2760 1dc6 29C2     		subl	%eax, %edx	# k, D.3391
 2761 1dc8 DD84D300 		fldl	sincosTable@GOTOFF(%ebx,%edx,8)	# sincosTable[_95].d
 2761      000000
 2762 1dcf D9E0     		fchs
 2763 1dd1 DD9B1000 		fstpl	sal@GOTOFF(%ebx)	# sal
 2763      0000
 2764 1dd7 E9BC0000 		jmp	.L98	#
 2764      00
 2765              	.LVL318:
 2766              	.L96:
 2767              	.LBE38:
 551:trigo_fast.c  ****   }    
 552:trigo_fast.c  ****    break;
 553:trigo_fast.c  ****       case(3):
 554:trigo_fast.c  ****      if(k<=(64<<2)) {  /* sah <= cah */
 2768              		.loc 1 554 0
 2769 1ddc 3D000100 		cmpl	$256, %eax	#, k
 2769      00
 2770 1de1 7F3A     		jg	.L101	#,
 555:trigo_fast.c  ****     cah=sincosTable[k].d ; /* sin(a), high part */
 2771              		.loc 1 555 0
 2772 1de3 DD84C300 		fldl	sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[k_17].d
 2772      000000
 2773 1dea DD9B0800 		fstpl	cah@GOTOFF(%ebx)	# cah
 2773      0000
 556:trigo_fast.c  ****     cal=sincosTable[k+1].d; /* sin(a), low part */
 2774              		.loc 1 556 0
 2775 1df0 DD84C308 		fldl	8+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_101].d
 2775      000000
 2776 1df7 DD9B0000 		fstpl	cal@GOTOFF(%ebx)	# cal
 2776      0000
 557:trigo_fast.c  ****     sah=-sincosTable[k+2].d; /* cos(a), high part */
 2777              		.loc 1 557 0
 2778 1dfd DD84C310 		fldl	16+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_104].d
 2778      000000
 2779 1e04 D9E0     		fchs
 2780 1e06 DD9B1800 		fstpl	sah@GOTOFF(%ebx)	# sah
 2780      0000
 558:trigo_fast.c  ****     sal=-sincosTable[k+3].d; /* cos(a), low part */
 2781              		.loc 1 558 0
 2782 1e0c DD84C318 		fldl	24+sincosTable@GOTOFF(%ebx,%eax,8)	# sincosTable[_108].d
 2782      000000
 2783 1e13 D9E0     		fchs
 2784 1e15 DD9B1000 		fstpl	sal@GOTOFF(%ebx)	# sal
 2784      0000
 2785 1e1b EB7B     		jmp	.L98	#
 2786              	.L101:
 2787              	.LVL319:
 2788              	.LBB39:
 559:trigo_fast.c  ****   } else { /* cah <= sah */
 560:trigo_fast.c  ****     int k1=(128<<2) - k;
 2789              		.loc 1 560 0
 2790 1e1d BA000200 		movl	$512, %edx	#, tmp367
 2790      00
 2791              	.LVL320:
 2792 1e22 29C2     		subl	%eax, %edx	# k, k1
 2793              	.LVL321:
 561:trigo_fast.c  ****     sah=-sincosTable[k1].d ; 
 2794              		.loc 1 561 0
 2795 1e24 DD84D300 		fldl	sincosTable@GOTOFF(%ebx,%edx,8)	# sincosTable[k1_112].d
 2795      000000
 2796 1e2b D9E0     		fchs
 2797 1e2d DD9B1800 		fstpl	sah@GOTOFF(%ebx)	# sah
 2797      0000
 562:trigo_fast.c  ****     sal=-sincosTable[k1+1].d;
 2798              		.loc 1 562 0
 2799 1e33 BA010200 		movl	$513, %edx	#, tmp373
 2799      00
 2800              	.LVL322:
 2801 1e38 29C2     		subl	%eax, %edx	# k, D.3391
 2802 1e3a DD84D300 		fldl	sincosTable@GOTOFF(%ebx,%edx,8)	# sincosTable[_116].d
 2802      000000
 2803 1e41 D9E0     		fchs
 2804 1e43 DD9B1000 		fstpl	sal@GOTOFF(%ebx)	# sal
 2804      0000
 563:trigo_fast.c  ****     cah=sincosTable[k1+2].d;
 2805              		.loc 1 563 0
 2806 1e49 BA020200 		movl	$514, %edx	#, tmp379
 2806      00
 2807 1e4e 29C2     		subl	%eax, %edx	# k, D.3391
 2808 1e50 DD84D300 		fldl	sincosTable@GOTOFF(%ebx,%edx,8)	# sincosTable[_120].d
 2808      000000
 2809 1e57 DD9B0800 		fstpl	cah@GOTOFF(%ebx)	# cah
 2809      0000
 564:trigo_fast.c  ****     cal=sincosTable[k1+3].d;
 2810              		.loc 1 564 0
 2811 1e5d BA030200 		movl	$515, %edx	#, tmp384
 2811      00
 2812 1e62 29C2     		subl	%eax, %edx	# k, D.3391
 2813 1e64 DD84D300 		fldl	sincosTable@GOTOFF(%ebx,%edx,8)	# sincosTable[_123].d
 2813      000000
 2814 1e6b DD9B0000 		fstpl	cal@GOTOFF(%ebx)	# cal
 2814      0000
 2815 1e71 EB25     		jmp	.L98	#
 2816              	.LVL323:
 2817              	.L91:
 2818              	.LBE39:
 565:trigo_fast.c  ****   }    
 566:trigo_fast.c  ****      break;   
 567:trigo_fast.c  ****    default:
 568:trigo_fast.c  ****      fprintf(stderr,"ERREUR: %d is not a valid value in sn_tan \n", quadrant);
 2819              		.loc 1 568 0
 2820 1e73 89542408 		movl	%edx, 8(%esp)	# quadrant,
 2821 1e77 8D830000 		leal	.LC48@GOTOFF(%ebx), %eax	#, tmp388
 2821      0000
 2822              	.LVL324:
 2823 1e7d 89442404 		movl	%eax, 4(%esp)	# tmp388,
 2824 1e81 8B830000 		movl	stderr@GOT(%ebx), %eax	#, tmp389
 2824      0000
 2825 1e87 8B00     		movl	(%eax), %eax	# stderr, stderr
 2826 1e89 890424   		movl	%eax, (%esp)	# stderr,
 2827 1e8c E8FCFFFF 		call	fprintf@PLT	#
 2827      FF
 2828              	.LVL325:
 569:trigo_fast.c  ****      return 0.0;
 2829              		.loc 1 569 0
 2830 1e91 D9EE     		fldz
 2831 1e93 E90D0300 		jmp	.L90	#
 2831      00
 2832              	.LVL326:
 2833              	.L98:
 570:trigo_fast.c  ****   }
 571:trigo_fast.c  **** 
 572:trigo_fast.c  **** #if INLINE_SINCOS
 573:trigo_fast.c  **** DO_SIN(sh,sl);
 574:trigo_fast.c  **** DO_COS(ch,cl);
 575:trigo_fast.c  **** #else  
 576:trigo_fast.c  ****   do_sin(&sh, &sl, yh, yl);
 2834              		.loc 1 576 0
 2835 1e98 8D9424B0 		leal	176(%esp), %edx	#, tmp391
 2835      000000
 2836 1e9f 8D8424B8 		leal	184(%esp), %eax	#, tmp392
 2836      000000
 2837              	.LVL327:
 2838 1ea6 DD842490 		fldl	144(%esp)	# yl
 2838      000000
 2839 1ead DD5C2408 		fstpl	8(%esp)	#
 2840 1eb1 DD842498 		fldl	152(%esp)	# yh
 2840      000000
 2841 1eb8 DD1C24   		fstpl	(%esp)	#
 2842 1ebb E811E5FF 		call	do_sin	#
 2842      FF
 2843              	.LVL328:
 577:trigo_fast.c  ****   do_cos(&ch, &cl, yh, yl);
 2844              		.loc 1 577 0
 2845 1ec0 8D9424A0 		leal	160(%esp), %edx	#, tmp395
 2845      000000
 2846 1ec7 8D8424A8 		leal	168(%esp), %eax	#, tmp396
 2846      000000
 2847 1ece DD842490 		fldl	144(%esp)	# yl
 2847      000000
 2848 1ed5 DD5C2408 		fstpl	8(%esp)	#
 2849 1ed9 DD842498 		fldl	152(%esp)	# yh
 2849      000000
 2850 1ee0 DD1C24   		fstpl	(%esp)	#
 2851 1ee3 E818E1FF 		call	do_cos	#
 2851      FF
 2852              	.LVL329:
 2853              	.LBB40:
 578:trigo_fast.c  **** #endif
 579:trigo_fast.c  **** 
 580:trigo_fast.c  ****    Div22(&reshi, &reslo, sh, sl, ch, cl);
 2854              		.loc 1 580 0
 2855 1ee8 DD8424A8 		fldl	168(%esp)	# ch
 2855      000000
 2856 1eef DCBC24B8 		fdivrl	184(%esp)	# sh
 2856      000000
 2857 1ef6 DD5C2430 		fstpl	48(%esp)	# %sfp
 2858              	.LVL330:
 2859              	.LBB41:
 2860 1efa 8D830000 		leal	.LC2@GOTOFF(%ebx), %eax	#, tmp402
 2860      0000
 2861 1f00 890424   		movl	%eax, (%esp)	# tmp402,
 2862 1f03 E8FCFFFF 		call	puts@PLT	#
 2862      FF
 2863              	.LVL331:
 2864 1f08 DD8424A8 		fldl	168(%esp)	# ch
 2864      000000
 2865 1f0f DD5C241C 		fstpl	28(%esp)	#
 2866 1f13 F20F104C 		movsd	48(%esp), %xmm1	# %sfp, _u
 2866      2430
 2867 1f19 F20F114C 		movsd	%xmm1, 20(%esp)	# _u,
 2867      2414
 2868 1f1f D9EE     		fldz
 2869 1f21 DD54240C 		fstl	12(%esp)	#
 2870 1f25 DD5C2404 		fstpl	4(%esp)	#
 2871 1f29 8D830000 		leal	.LC3@GOTOFF(%ebx), %eax	#, tmp404
 2871      0000
 2872 1f2f 890424   		movl	%eax, (%esp)	# tmp404,
 2873 1f32 E8FCFFFF 		call	printf@PLT	#
 2873      FF
 2874              	.LVL332:
 2875 1f37 DD8424A8 		fldl	168(%esp)	# ch
 2875      000000
 2876 1f3e DD5C2440 		fstpl	64(%esp)	# %sfp
 2877              	.LVL333:
 2878 1f42 F20F1074 		movsd	64(%esp), %xmm6	# %sfp, _v
 2878      2440
 2879 1f48 F20F1174 		movsd	%xmm6, 12(%esp)	# _v,
 2879      240C
 2880 1f4e F20F104C 		movsd	48(%esp), %xmm1	# %sfp, _u
 2880      2430
 2881 1f54 F20F114C 		movsd	%xmm1, 4(%esp)	# _u,
 2881      2404
 2882 1f5a 8D830000 		leal	.LC4@GOTOFF(%ebx), %eax	#, tmp405
 2882      0000
 2883 1f60 890424   		movl	%eax, (%esp)	# tmp405,
 2884 1f63 E8FCFFFF 		call	printf@PLT	#
 2884      FF
 2885              	.LVL334:
 2886 1f68 DD442430 		fldl	48(%esp)	# %sfp
 2887 1f6c DD830000 		fldl	.LC5@GOTOFF(%ebx)	#
 2887      0000
 2888 1f72 D9C9     		fxch	%st(1)	#
 2889 1f74 D9C0     		fld	%st(0)	#
 2890 1f76 DB7C2430 		fstpt	48(%esp)	# %sfp
 2891              	.LVL335:
 2892 1f7a D8C9     		fmul	%st(1), %st	#,
 2893 1f7c DD9C2480 		fstpl	128(%esp)	# %sfp
 2893      000000
 2894              	.LVL336:
 2895 1f83 DD442440 		fldl	64(%esp)	# %sfp
 2896 1f87 D9C0     		fld	%st(0)	#
 2897 1f89 DB7C2450 		fstpt	80(%esp)	# %sfp
 2898 1f8d DEC9     		fmulp	%st, %st(1)	#,
 2899 1f8f DD5C2440 		fstpl	64(%esp)	# %sfp
 2900              	.LVL337:
 2901 1f93 F20F107C 		movsd	64(%esp), %xmm7	# %sfp, vp
 2901      2440
 2902 1f99 F20F117C 		movsd	%xmm7, 12(%esp)	# vp,
 2902      240C
 2903 1f9f F20F10B4 		movsd	128(%esp), %xmm6	# %sfp, up
 2903      24800000 
 2903      00
 2904 1fa8 F20F1174 		movsd	%xmm6, 4(%esp)	# up,
 2904      2404
 2905 1fae 8D830000 		leal	.LC6@GOTOFF(%ebx), %eax	#, tmp412
 2905      0000
 2906 1fb4 890424   		movl	%eax, (%esp)	# tmp412,
 2907 1fb7 E8FCFFFF 		call	printf@PLT	#
 2907      FF
 2908              	.LVL338:
 2909 1fbc DD842480 		fldl	128(%esp)	# %sfp
 2909      000000
 2910 1fc3 DB7C2460 		fstpt	96(%esp)	# %sfp
 2911              	.LVL339:
 2912 1fc7 DD442440 		fldl	64(%esp)	# %sfp
 2913 1fcb DB7C2470 		fstpt	112(%esp)	# %sfp
 2914              	.LVL340:
 2915 1fcf F20F1054 		movsd	64(%esp), %xmm2	# %sfp, vp
 2915      2440
 2916 1fd5 F20F1154 		movsd	%xmm2, 12(%esp)	# vp,
 2916      240C
 2917 1fdb F20F109C 		movsd	128(%esp), %xmm3	# %sfp, up
 2917      24800000 
 2917      00
 2918 1fe4 F20F115C 		movsd	%xmm3, 4(%esp)	# up,
 2918      2404
 2919 1fea 8D830000 		leal	.LC7@GOTOFF(%ebx), %eax	#, tmp413
 2919      0000
 2920 1ff0 890424   		movl	%eax, (%esp)	# tmp413,
 2921 1ff3 E8FCFFFF 		call	printf@PLT	#
 2921      FF
 2922              	.LVL341:
 2923 1ff8 DB6C2430 		fldt	48(%esp)	# %sfp
 2924 1ffc DB6C2460 		fldt	96(%esp)	# %sfp
 2925 2000 DCE9     		fsubr	%st, %st(1)	#,
 2926 2002 DEC1     		faddp	%st, %st(1)	#,
 2927 2004 DD9C2488 		fstpl	136(%esp)	#
 2927      000000
 2928 200b DD842488 		fldl	136(%esp)	#
 2928      000000
 2929 2012 DB7C2460 		fstpt	96(%esp)	# %sfp
 2930              	.LVL342:
 2931 2016 DB6C2470 		fldt	112(%esp)	# %sfp
 2932 201a D9C0     		fld	%st(0)	#
 2933 201c DB6C2450 		fldt	80(%esp)	# %sfp
 2934 2020 DEE1     		fsubp	%st, %st(1)	#,
 2935 2022 DEC1     		faddp	%st, %st(1)	#,
 2936 2024 DD9C2488 		fstpl	136(%esp)	#
 2936      000000
 2937 202b DD842488 		fldl	136(%esp)	#
 2937      000000
 2938 2032 DB7C2470 		fstpt	112(%esp)	# %sfp
 2939              	.LVL343:
 2940 2036 F20F1054 		movsd	64(%esp), %xmm2	# %sfp, vp
 2940      2440
 2941 203c F20F1154 		movsd	%xmm2, 12(%esp)	# vp,
 2941      240C
 2942 2042 F20F109C 		movsd	128(%esp), %xmm3	# %sfp, up
 2942      24800000 
 2942      00
 2943 204b F20F115C 		movsd	%xmm3, 4(%esp)	# up,
 2943      2404
 2944 2051 8D830000 		leal	.LC8@GOTOFF(%ebx), %eax	#, tmp420
 2944      0000
 2945 2057 890424   		movl	%eax, (%esp)	# tmp420,
 2946 205a E8FCFFFF 		call	printf@PLT	#
 2946      FF
 2947              	.LVL344:
 2948 205f DB6C2430 		fldt	48(%esp)	# %sfp
 2949 2063 D9C0     		fld	%st(0)	#
 2950 2065 DB6C2450 		fldt	80(%esp)	# %sfp
 2951 2069 DCC9     		fmul	%st, %st(1)	#,
 2952 206b D9C9     		fxch	%st(1)	#
 2953 206d DD9C2488 		fstpl	136(%esp)	#
 2953      000000
 2954 2074 DD842488 		fldl	136(%esp)	#
 2954      000000
 2955              	.LVL345:
 2956 207b D9C0     		fld	%st(0)	#
 2957              	.LVL346:
 2958 207d DB6C2470 		fldt	112(%esp)	# %sfp
 2959 2081 DCEB     		fsubr	%st, %st(3)	#,
 2960 2083 D9CB     		fxch	%st(3)	#
 2961 2085 DD9C2488 		fstpl	136(%esp)	#
 2961      000000
 2962              	.LVL347:
 2963 208c DD842488 		fldl	136(%esp)	#
 2963      000000
 2964 2093 DB6C2460 		fldt	96(%esp)	# %sfp
 2965 2097 DCED     		fsubr	%st, %st(5)	#,
 2966 2099 D9CD     		fxch	%st(5)	#
 2967 209b DD9C2488 		fstpl	136(%esp)	#
 2967      000000
 2968 20a2 DD842488 		fldl	136(%esp)	#
 2968      000000
 2969 20a9 D9C4     		fld	%st(4)	#
 2970 20ab D8CE     		fmul	%st(6), %st	#,
 2971 20ad D9CB     		fxch	%st(3)	#
 2972 20af D9C0     		fld	%st(0)	#
 2973 20b1 DB7C2440 		fstpt	64(%esp)	# %sfp
 2974              	.LVL348:
 2975 20b5 DEEB     		fsubrp	%st, %st(3)	#,
 2976 20b7 D9CD     		fxch	%st(5)	#
 2977 20b9 D8C9     		fmul	%st(1), %st	#,
 2978 20bb DEC2     		faddp	%st, %st(2)	#,
 2979 20bd D9CB     		fxch	%st(3)	#
 2980 20bf D8CC     		fmul	%st(4), %st	#,
 2981 20c1 DEC1     		faddp	%st, %st(1)	#,
 2982 20c3 D9CA     		fxch	%st(2)	#
 2983 20c5 DECB     		fmulp	%st, %st(3)	#,
 2984 20c7 D9C9     		fxch	%st(1)	#
 2985 20c9 DEC2     		faddp	%st, %st(2)	#,
 2986 20cb D9C9     		fxch	%st(1)	#
 2987 20cd DD9C2480 		fstpl	128(%esp)	# %sfp
 2987      000000
 2988              	.LVL349:
 2989 20d4 F20F10A4 		movsd	128(%esp), %xmm4	# %sfp, _ul.101
 2989      24800000 
 2989      00
 2990 20dd F20F1164 		movsd	%xmm4, 12(%esp)	# _ul.101,
 2990      240C
 2991 20e3 DD5C2404 		fstpl	4(%esp)	#
 2992 20e7 8D830000 		leal	.LC9@GOTOFF(%ebx), %eax	#, tmp434
 2992      0000
 2993 20ed 890424   		movl	%eax, (%esp)	# tmp434,
 2994 20f0 E8FCFFFF 		call	printf@PLT	#
 2994      FF
 2995              	.LVL350:
 2996 20f5 F20F10A4 		movsd	128(%esp), %xmm4	# %sfp, _ul.101
 2996      24800000 
 2996      00
 2997 20fe F20F1164 		movsd	%xmm4, 4(%esp)	# _ul.101,
 2997      2404
 2998 2104 8D830000 		leal	.LC10@GOTOFF(%ebx), %eax	#, tmp435
 2998      0000
 2999 210a 890424   		movl	%eax, (%esp)	# tmp435,
 3000 210d E8FCFFFF 		call	printf@PLT	#
 3000      FF
 3001              	.LVL351:
 3002              	.LBE41:
 3003 2112 DB6C2440 		fldt	64(%esp)	# %sfp
 3004 2116 DCAC24B8 		fsubrl	184(%esp)	# sh
 3004      000000
 3005 211d DCA42480 		fsubl	128(%esp)	# %sfp
 3005      000000
 3006 2124 DC8424B0 		faddl	176(%esp)	# sl
 3006      000000
 3007 212b DB6C2430 		fldt	48(%esp)	# %sfp
 3008 212f D9C0     		fld	%st(0)	#
 3009 2131 DC8C24A0 		fmull	160(%esp)	# cl
 3009      000000
 3010 2138 DEEA     		fsubrp	%st, %st(2)	#,
 3011 213a D9C9     		fxch	%st(1)	#
 3012 213c DCB424A8 		fdivl	168(%esp)	# ch
 3012      000000
 3013 2143 DD9C2488 		fstpl	136(%esp)	#
 3013      000000
 3014              	.LVL352:
 3015 214a DD842488 		fldl	136(%esp)	#
 3015      000000
 3016 2151 D9C1     		fld	%st(1)	#
 3017 2153 D8C1     		fadd	%st(1), %st	#,
 3018 2155 DD9C2488 		fstpl	136(%esp)	#
 3018      000000
 3019 215c DD842488 		fldl	136(%esp)	#
 3019      000000
 3020              	.LVL353:
 3021 2163 D9C0     		fld	%st(0)	#
 3022              	.LVL354:
 3023 2165 DCEB     		fsubr	%st, %st(3)	#,
 3024              	.LVL355:
 3025 2167 D9CA     		fxch	%st(2)	#
 3026 2169 DEC3     		faddp	%st, %st(3)	#,
 3027 216b D9CA     		fxch	%st(2)	#
 3028 216d DD9C2488 		fstpl	136(%esp)	#
 3028      000000
 3029              	.LVL356:
 3030 2174 DD842488 		fldl	136(%esp)	#
 3030      000000
 3031              	.LBE40:
 581:trigo_fast.c  **** 
 582:trigo_fast.c  ****   /* ROUNDING TO NEAREST */
 583:trigo_fast.c  ****  
 584:trigo_fast.c  ****   if(reshi == (reshi + (reslo * 1.0004))){
 3032              		.loc 1 584 0
 3033 217b DBAB0000 		fldt	.LC43@GOTOFF(%ebx)	#
 3033      0000
 3034 2181 DEC9     		fmulp	%st, %st(1)	#,
 3035              	.LVL357:
 3036 2183 D8C1     		fadd	%st(1), %st	#,
 3037 2185 D9C9     		fxch	%st(1)	#
 3038 2187 DFE9     		fucomip	%st(1), %st	#,
 3039 2189 DDD8     		fstp	%st(0)	#
 3040 218b 7A06     		jp	.L107	#,
 3041 218d 7416     		je	.L90	#,
 3042 218f DDD8     		fstp	%st(0)	#
 3043 2191 EB02     		jmp	.L105	#
 3044              	.L107:
 3045 2193 DDD8     		fstp	%st(0)	#
 3046              	.L105:
 585:trigo_fast.c  ****     return reshi;
 586:trigo_fast.c  ****   }else{ 
 587:trigo_fast.c  ****     return scs_tan_rn(x); 
 3047              		.loc 1 587 0
 3048 2195 F20F107C 		movsd	40(%esp), %xmm7	# %sfp, x
 3048      2428
 3049 219b F20F113C 		movsd	%xmm7, (%esp)	# x,
 3049      24
 3050 21a0 E8FCFFFF 		call	scs_tan_rn@PLT	#
 3050      FF
 3051              	.LVL358:
 3052              	.L90:
 588:trigo_fast.c  ****   } 
 589:trigo_fast.c  **** 
 590:trigo_fast.c  **** }
 3053              		.loc 1 590 0
 3054 21a5 81C4C400 		addl	$196, %esp	#,
 3054      0000
 3055              		.cfi_def_cfa_offset 12
 3056 21ab 5B       		popl	%ebx	#
 3057              		.cfi_restore 3
 3058              		.cfi_def_cfa_offset 8
 3059 21ac 5E       		popl	%esi	#
 3060              		.cfi_restore 6
 3061              		.cfi_def_cfa_offset 4
 3062 21ad C3       		ret
 3063              		.cfi_endproc
 3064              	.LFE18:
 3066              		.globl	tan_rd
 3068              	tan_rd:
 3069              	.LFB19:
 591:trigo_fast.c  **** 
 592:trigo_fast.c  **** 
 593:trigo_fast.c  **** /*************************************************************
 594:trigo_fast.c  ****  *************************************************************
 595:trigo_fast.c  ****  *               ROUNDED  TOWARD  -INFINITY
 596:trigo_fast.c  ****  *************************************************************
 597:trigo_fast.c  ****  *************************************************************/
 598:trigo_fast.c  **** /* TODO */
 599:trigo_fast.c  **** double tan_rd(double x){  
 3070              		.loc 1 599 0
 3071              		.cfi_startproc
 3072              	.LVL359:
 3073 21ae 53       		pushl	%ebx	#
 3074              		.cfi_def_cfa_offset 8
 3075              		.cfi_offset 3, -8
 3076 21af 83EC18   		subl	$24, %esp	#,
 3077              		.cfi_def_cfa_offset 32
 3078 21b2 E8FCFFFF 		call	__x86.get_pc_thunk.bx	#
 3078      FF
 3079 21b7 81C30200 		addl	$_GLOBAL_OFFSET_TABLE_, %ebx	#,
 3079      0000
 600:trigo_fast.c  **** return scs_tan_rd(x);
 3080              		.loc 1 600 0
 3081 21bd DD442420 		fldl	32(%esp)	# x
 3082 21c1 DD1C24   		fstpl	(%esp)	#
 3083 21c4 E8FCFFFF 		call	scs_tan_rd@PLT	#
 3083      FF
 3084              	.LVL360:
 601:trigo_fast.c  ****  }
 3085              		.loc 1 601 0
 3086 21c9 83C418   		addl	$24, %esp	#,
 3087              		.cfi_def_cfa_offset 8
 3088 21cc 5B       		popl	%ebx	#
 3089              		.cfi_restore 3
 3090              		.cfi_def_cfa_offset 4
 3091 21cd C3       		ret
 3092              		.cfi_endproc
 3093              	.LFE19:
 3095              		.globl	tan_ru
 3097              	tan_ru:
 3098              	.LFB20:
 602:trigo_fast.c  **** 
 603:trigo_fast.c  **** /*************************************************************
 604:trigo_fast.c  ****  *************************************************************
 605:trigo_fast.c  ****  *               ROUNDED  TOWARD  +INFINITY
 606:trigo_fast.c  ****  *************************************************************
 607:trigo_fast.c  ****  *************************************************************/
 608:trigo_fast.c  **** /* TODO */
 609:trigo_fast.c  **** double tan_ru(double x){  
 3099              		.loc 1 609 0
 3100              		.cfi_startproc
 3101              	.LVL361:
 3102 21ce 53       		pushl	%ebx	#
 3103              		.cfi_def_cfa_offset 8
 3104              		.cfi_offset 3, -8
 3105 21cf 83EC18   		subl	$24, %esp	#,
 3106              		.cfi_def_cfa_offset 32
 3107 21d2 E8FCFFFF 		call	__x86.get_pc_thunk.bx	#
 3107      FF
 3108 21d7 81C30200 		addl	$_GLOBAL_OFFSET_TABLE_, %ebx	#,
 3108      0000
 610:trigo_fast.c  **** return scs_tan_ru(x);
 3109              		.loc 1 610 0
 3110 21dd DD442420 		fldl	32(%esp)	# x
 3111 21e1 DD1C24   		fstpl	(%esp)	#
 3112 21e4 E8FCFFFF 		call	scs_tan_ru@PLT	#
 3112      FF
 3113              	.LVL362:
 611:trigo_fast.c  ****  }
 3114              		.loc 1 611 0
 3115 21e9 83C418   		addl	$24, %esp	#,
 3116              		.cfi_def_cfa_offset 8
 3117 21ec 5B       		popl	%ebx	#
 3118              		.cfi_restore 3
 3119              		.cfi_def_cfa_offset 4
 3120 21ed C3       		ret
 3121              		.cfi_endproc
 3122              	.LFE20:
 3124              		.globl	tan_rz
 3126              	tan_rz:
 3127              	.LFB21:
 612:trigo_fast.c  **** 
 613:trigo_fast.c  **** /*************************************************************
 614:trigo_fast.c  ****  *************************************************************
 615:trigo_fast.c  ****  *               ROUNDED  TOWARD  ZERO
 616:trigo_fast.c  ****  *************************************************************
 617:trigo_fast.c  ****  *************************************************************/
 618:trigo_fast.c  **** /* TODO */
 619:trigo_fast.c  **** double tan_rz(double x){  
 3128              		.loc 1 619 0
 3129              		.cfi_startproc
 3130              	.LVL363:
 3131 21ee 53       		pushl	%ebx	#
 3132              		.cfi_def_cfa_offset 8
 3133              		.cfi_offset 3, -8
 3134 21ef 83EC18   		subl	$24, %esp	#,
 3135              		.cfi_def_cfa_offset 32
 3136 21f2 E8FCFFFF 		call	__x86.get_pc_thunk.bx	#
 3136      FF
 3137 21f7 81C30200 		addl	$_GLOBAL_OFFSET_TABLE_, %ebx	#,
 3137      0000
 620:trigo_fast.c  **** return scs_tan_rz(x);
 3138              		.loc 1 620 0
 3139 21fd DD442420 		fldl	32(%esp)	# x
 3140 2201 DD1C24   		fstpl	(%esp)	#
 3141 2204 E8FCFFFF 		call	scs_tan_rz@PLT	#
 3141      FF
 3142              	.LVL364:
 621:trigo_fast.c  ****  }
 3143              		.loc 1 621 0
 3144 2209 83C418   		addl	$24, %esp	#,
 3145              		.cfi_def_cfa_offset 8
 3146 220c 5B       		popl	%ebx	#
 3147              		.cfi_restore 3
 3148              		.cfi_def_cfa_offset 4
 3149 220d C3       		ret
 3150              		.cfi_endproc
 3151              	.LFE21:
 3153              		.local	cal
 3154              		.comm	cal,8,8
 3155              		.local	cah
 3156              		.comm	cah,8,8
 3157              		.local	sal
 3158              		.comm	sal,8,8
 3159              		.local	sah
 3160              		.comm	sah,8,8
 3161              		.section	.rodata
 3162              		.align 32
 3165              	sincosTable:
 3166              	# i:
 3167 0000 00000000 		.long	0
 3168 0004 00000000 		.long	0
 3169              	# i:
 3170 0008 00000000 		.long	0
 3171 000c 00000000 		.long	0
 3172              	# i:
 3173 0010 00000000 		.long	0
 3174 0014 0000F03F 		.long	1072693248
 3175              	# i:
 3176 0018 00000000 		.long	0
 3177 001c 00000000 		.long	0
 3178              	# i:
 3179 0020 84C7DEFC 		.long	-52508796
 3180 0024 D121893F 		.long	1065951697
 3181              	# i:
 3182 0028 9D6D83BE 		.long	-1098682979
 3183 002c 8E87293C 		.long	1009354638
 3184              	# i:
 3185 0030 DB929B16 		.long	379294427
 3186 0034 62FFEF3F 		.long	1072693090
 3187              	# i:
 3188 0038 0DBD1FC8 		.long	-937444083
 3189 003c A3DD853C 		.long	1015405987
 3190              	# i:
 3191 0040 7E66A3F7 		.long	-140286338
 3192 0044 5521993F 		.long	1067000149
 3193              	# i:
 3194 0048 30011A09 		.long	152699184
 3195 004c 631DFBBB 		.long	-1141170845
 3196              	# i:
 3197 0050 0DCD8460 		.long	1619315981
 3198 0054 88FDEF3F 		.long	1072692616
 3199              	# i:
 3200 0058 CBE45645 		.long	1163322571
 3201 005c 4D3581BC 		.long	-1132382899
 3202              	# i:
 3203 0060 CD559475 		.long	1972655565
 3204 0064 65D8A23F 		.long	1067636837
 3205              	# i:
 3206 0068 C03AA95B 		.long	1537817280
 3207 006c F686263C 		.long	1009157878
 3208              	# i:
 3209 0070 5DF7FEEF 		.long	-268503203
 3210 0074 72FAEF3F 		.long	1072691826
 3211              	# i:
 3212 0078 5659B2CD 		.long	-843949738
 3213 007c CDB488BC 		.long	-1131891507
 3214              	# i:
 3215 0080 14D80DF1 		.long	-250750956
 3216 0084 651FA93F 		.long	1068048229
 3217              	# i:
 3218 0088 909A560D 		.long	223779472
 3219 008c BD1229BC 		.long	-1138158915
 3220              	# i:
 3221 0090 7E6D79E3 		.long	-478581378
 3222 0094 21F6EF3F 		.long	1072690721
 3223              	# i:
 3224 0098 15AA242E 		.long	774154773
 3225 009c BC576CBC 		.long	-1133750340
 3226              	# i:
 3227 00a0 E020F879 		.long	2046304480
 3228 00a4 6E65AF3F 		.long	1068459374
 3229              	# i:
 3230 00a8 FEBF92E3 		.long	-476921858
 3231 00ac EBE122BC 		.long	-1138564629
 3232              	# i:
 3233 00b0 AD718E65 		.long	1703834029
 3234 00b4 95F0EF3F 		.long	1072689301
 3235              	# i:
 3236 00b8 9E4B8AE1 		.long	-511030370
 3237 00bc 8C1A803C 		.long	1015028364
 3238              	# i:
 3239 00c0 F619CE92 		.long	-1831986698
 3240 00c4 20D5B23F 		.long	1068684576
 3241              	# i:
 3242 00c8 2C6BBFA8 		.long	-1463850196
 3243 00cc 88A049BC 		.long	-1136025464
 3244              	# i:
 3245 00d0 3A8801AD 		.long	-1392408518
 3246 00d4 CDE9EF3F 		.long	1072687565
 3247              	# i:
 3248 00d8 357EC6D0 		.long	-792297931
 3249 00dc EC21653C 		.long	1013260780
 3250              	# i:
 3251 00e0 19A49A0A 		.long	177906713
 3252 00e4 D0F6B53F 		.long	1068889808
 3253              	# i:
 3254 00e8 9A6C3FD0 		.long	-801149798
 3255 00ec 22404FBC 		.long	-1135656926
 3256              	# i:
 3257 00f0 095BBDFC 		.long	-54699255
 3258 00f4 CAE1EF3F 		.long	1072685514
 3259              	# i:
 3260 00f8 4E882A20 		.long	539658318
 3261 00fc E3236A3C 		.long	1013588963
 3262              	# i:
 3263 0100 2CB429BC 		.long	-1138117588
 3264 0104 A617B93F 		.long	1069094822
 3265              	# i:
 3266 0108 88D66ED2 		.long	-764488056
 3267 010c 18273EBC 		.long	-1136777448
 3268              	# i:
 3269 0110 2625D1A3 		.long	-1546574554
 3270 0114 8DD8EF3F 		.long	1072683149
 3271              	# i:
 3272 0118 C7118837 		.long	931664327
 3273 011c F67D88BC 		.long	-1131905546
 3274              	# i:
 3275 0120 D5C29EC7 		.long	-945896747
 3276 0124 8537BC3F 		.long	1069299589
 3277              	# i:
 3278 0128 21FB33F1 		.long	-248251615
 3279 012c 9DF324BC 		.long	-1138429027
 3280              	# i:
 3281 0130 7BA66DFD 		.long	-43145605
 3282 0134 15CEEF3F 		.long	1072680469
 3283              	# i:
 3284 0138 094C0D83 		.long	-2096280567
 3285 013c 6FDD75BC 		.long	-1133126289
 3286              	# i:
 3287 0140 0E73A956 		.long	1453945614
 3288 0144 4E56BF3F 		.long	1069504078
 3289              	# i:
 3290 0148 6DE59A72 		.long	1922753901
 3291 014c 04274A3C 		.long	1011492612
 3292              	# i:
 3293 0150 D39FE170 		.long	1893834707
 3294 0154 64C2EF3F 		.long	1072677476
 3295              	# i:
 3296 0158 EEACEC68 		.long	1760341230
 3297 015c 86EC813C 		.long	1015147654
 3298              	# i:
 3299 0160 77F5DACE 		.long	-824511113
 3300 0164 F039C13F 		.long	1069627888
 3301              	# i:
 3302 0168 FA3C1B4D 		.long	1293630714
 3303 016c 432365BC 		.long	-1134222525
 3304              	# i:
 3305 0170 41D79571 		.long	1905645377
 3306 0174 79B5EF3F 		.long	1072674169
 3307              	# i:
 3308 0178 08CC9773 		.long	1939328008
 3309 017c ACBF713C 		.long	1014087596
 3310              	# i:
 3311 0180 3A618E6E 		.long	1854824762
 3312 0184 10C8C23F 		.long	1069729808
 3313              	# i:
 3314 0188 E0119AA8 		.long	-1466297888
 3315 018c 0030513C 		.long	1011953664
 3316              	# i:
 3317 0190 17A5087F 		.long	2131272983
 3318 0194 55A7EF3F 		.long	1072670549
 3319              	# i:
 3320 0198 1F5713CA 		.long	-904702177
 3321 019c A8A087BC 		.long	-1131962200
 3322              	# i:
 3323 01a0 5A3E29B1 		.long	-1322697126
 3324 01a4 7655C43F 		.long	1069831542
 3325              	# i:
 3326 01a8 B1F71941 		.long	1092220849
 3327 01ac A28552BC 		.long	-1135442526
 3328              	# i:
 3329 01b0 9B09C924 		.long	617154971
 3330 01b4 F997EF3F 		.long	1072666617
 3331              	# i:
 3332 01b8 3B96A5EE 		.long	-291137989
 3333 01bc E02A8EBC 		.long	-1131533600
 3334              	# i:
 3335 01c0 C63F8B44 		.long	1149976518
 3336 01c4 14E2C53F 		.long	1069933076
 3337              	# i:
 3338 01c8 C6DA9D77 		.long	2006833862
 3339 01cc FF31653C 		.long	1013264895
 3340              	# i:
 3341 01d0 A94B71FA 		.long	-93238359
 3342 01d4 6487EF3F 		.long	1072662372
 3343              	# i:
 3344 01d8 B6FC8F77 		.long	2005925046
 3345 01dc 56B27A3C 		.long	1014674006
 3346              	# i:
 3347 01e0 31BF50DE 		.long	-565133519
 3348 01e4 D96DC73F 		.long	1070034393
 3349              	# i:
 3350 01e8 2F1B50EC 		.long	-330294481
 3351 01ec EED5613C 		.long	1013044718
 3352              	# i:
 3353 01f0 7720A1A3 		.long	-1549721481
 3354 01f4 9975EF3F 		.long	1072657817
 3355              	# i:
 3356 01f8 5C1943D7 		.long	-683468452
 3357 01fc 314F883C 		.long	1015566129
 3358              	# i:
 3359 0200 0BA6693C 		.long	1013556747
 3360 0204 B8F8C83F 		.long	1070135480
 3361              	# i:
 3362 0208 828DFFB9 		.long	-1174434430
 3363 020c 196D62BC 		.long	-1134400231
 3364              	# i:
 3365 0210 B05CF7CF 		.long	-805872464
 3366 0214 9762EF3F 		.long	1072652951
 3367              	# i:
 3368 0218 D31F362A 		.long	708190163
 3369 021c 1762753C 		.long	1014325783
 3370              	# i:
 3371 0220 5104B025 		.long	632292433
 3372 0224 A082CA3F 		.long	1070236320
 3373              	# i:
 3374 0228 AD84D0FF 		.long	-3111763
 3375 022c 057968BC 		.long	-1134003963
 3376              	# i:
 3377 0230 2D2F0B3B 		.long	990588717
 3378 0234 604EEF3F 		.long	1072647776
 3379              	# i:
 3380 0238 05AC95E6 		.long	-426398715
 3381 023c 01EE78BC 		.long	-1132925439
 3382              	# i:
 3383 0240 634F7E6A 		.long	1786662755
 3384 0244 820BCC3F 		.long	1070336898
 3385              	# i:
 3386 0248 3519529E 		.long	-1638786763
 3387 024c 43F11ABC 		.long	-1139084989
 3388              	# i:
 3389 0250 89E564AC 		.long	-1402673783
 3390 0254 F338EF3F 		.long	1072642291
 3391              	# i:
 3392 0258 E6721FB5 		.long	-1256230170
 3393 025c AF7B7DBC 		.long	-1132627025
 3394              	# i:
 3395 0260 114345E5 		.long	-448445679
 3396 0264 4F93CD3F 		.long	1070437199
 3397              	# i:
 3398 0268 AD077127 		.long	661718957
 3399 026c 925B673C 		.long	1013406610
 3400              	# i:
 3401 0270 DA3A76F7 		.long	-143246630
 3402 0274 5222EF3F 		.long	1072636498
 3403              	# i:
 3404 0278 AB948D1C 		.long	479040683
 3405 027c B80C82BC 		.long	-1132327752
 3406              	# i:
 3407 0280 1B5F217B 		.long	2065784603
 3408 0284 F919CF3F 		.long	1070537209
 3409              	# i:
 3410 0288 C4A21DF1 		.long	-249716028
 3411 028c EE2D64BC 		.long	-1134285330
 3412              	# i:
 3413 0290 D73092FB 		.long	-74305321
 3414 0294 7E0AEF3F 		.long	1072630398
 3415              	# i:
 3416 0298 89496BDC 		.long	-596948599
 3417 029c 7A2C753C 		.long	1014312058
 3418              	# i:
 3419 02a0 AEFD370E 		.long	238550446
 3420 02a4 B84FD03F 		.long	1070616504
 3421              	# i:
 3422 02a8 CC8325B7 		.long	-1222278196
 3423 02ac CD1204BC 		.long	-1140583731
 3424              	# i:
 3425 02b0 C273E4A3 		.long	-1545309246
 3426 02b4 78F1EE3F 		.long	1072623992
 3427              	# i:
 3428 02b8 4F77FE67 		.long	1744729935
 3429 02bc 0A31863C 		.long	1015427338
 3430              	# i:
 3431 02c0 77F6B162 		.long	1655830135
 3432 02c4 D211D13F 		.long	1070666194
 3433              	# i:
 3434 02c8 9AAAB70A 		.long	179808922
 3435 02cc C224783C 		.long	1014506690
 3436              	# i:
 3437 02d0 634968E7 		.long	-412595869
 3438 02d4 40D7EE3F 		.long	1072617280
 3439              	# i:
 3440 02d8 C29CF591 		.long	-1846174526
 3441 02dc C7827E3C 		.long	1014923975
 3442              	# i:
 3443 02e0 3EDB4C3F 		.long	1062001470
 3444 02e4 44D3D13F 		.long	1070715716
 3445              	# i:
 3446 02e8 9E51131C 		.long	471028126
 3447 02ec D42067BC 		.long	-1134092076
 3448              	# i:
 3449 02f0 740BDFC8 		.long	-924906636
 3450 02f4 D8BBEE3F 		.long	1072610264
 3451              	# i:
 3452 02f8 77725E61 		.long	1633579639
 3453 02fc 8C6C7C3C 		.long	1014787212
 3454              	# i:
 3455 0300 069FD52E 		.long	785751814
 3456 0304 0694D23F 		.long	1070765062
 3457              	# i:
 3458 0308 2D61C4A2 		.long	-1564188371
 3459 030c 8DD275BC 		.long	-1133129075
 3460              	# i:
 3461 0310 DA2DC656 		.long	1455828442
 3462 0314 419FEE3F 		.long	1072602945
 3463              	# i:
 3464 0318 1EF8E3E2 		.long	-488376290
 3465 031c B160873C 		.long	1015505073
 3466              	# i:
 3467 0320 5281E1C2 		.long	-1025408686
 3468 0324 1054D33F 		.long	1070814224
 3469              	# i:
 3470 0328 62E0962F 		.long	798416994
 3471 032c 00CB73BC 		.long	-1133262080
 3472              	# i:
 3473 0330 0DD14CAB 		.long	-1421029107
 3474 0334 7B81EE3F 		.long	1072595323
 3475              	# i:
 3476 0338 0A5E6B68 		.long	1751866890
 3477 033c FE0A7DBC 		.long	-1132655874
 3478              	# i:
 3479 0340 01661794 		.long	-1810405887
 3480 0344 5C13D43F 		.long	1070863196
 3481              	# i:
 3482 0348 1825FA4A 		.long	1257907480
 3483 034c 7CC9703C 		.long	1014024572
 3484              	# i:
 3485 0350 12E148EC 		.long	-330768110
 3486 0354 8862EE3F 		.long	1072587400
 3487              	# i:
 3488 0358 547784F2 		.long	-226199724
 3489 035c 566B61BC 		.long	-1134466218
 3490              	# i:
 3491 0360 6AE77842 		.long	1115219818
 3492 0364 E2D1D43F 		.long	1070911970
 3493              	# i:
 3494 0368 58287918 		.long	410593368
 3495 036c 7241623C 		.long	1013072242
 3496              	# i:
 3497 0370 7EC12B4B 		.long	1261158782
 3498 0374 6A42EE3F 		.long	1072579178
 3499              	# i:
 3500 0378 82487489 		.long	-1988867966
 3501 037c 38878A3C 		.long	1015711544
 3502              	# i:
 3503 0380 DD1FAB75 		.long	1974149085
 3504 0384 9A8FD53F 		.long	1070960538
 3505              	# i:
 3506 0388 20F68CD5 		.long	-712182240
 3507 038c C0FD1EBC 		.long	-1138819648
 3508              	# i:
 3509 0390 E586F604 		.long	83265253
 3510 0394 2121EE3F 		.long	1072570657
 3511              	# i:
 3512 0398 2765126C 		.long	1813144871
 3513 039c C71480BC 		.long	-1132456761
 3514              	# i:
 3515 03a0 C6273FDD 		.long	-583063610
 3516 03a4 7D4CD63F 		.long	1071008893
 3517              	# i:
 3518 03a8 2141664A 		.long	1248215329
 3519 03ac 2B0D513C 		.long	1011944747
 3520              	# i:
 3521 03b0 2BBE2D62 		.long	1647164971
 3522 03b4 AEFEED3F 		.long	1072561838
 3523              	# i:
 3524 03b8 67554288 		.long	-2008918681
 3525 03bc EA1485BC 		.long	-1132129046
 3526              	# i:
 3527 03c0 9F45FA30 		.long	821708191
 3528 03c4 8508D73F 		.long	1071057029
 3529              	# i:
 3530 03c8 5D4C86E0 		.long	-528069539
 3531 03cc 194B74BC 		.long	-1133229287
 3532              	# i:
 3533 03d0 3CC2CCB6 		.long	-1228094916
 3534 03d4 13DBED3F 		.long	1072552723
 3535              	# i:
 3536 03d8 B37D10C6 		.long	-971997773
 3537 03dc 373C883C 		.long	1015561271
 3538              	# i:
 3539 03e0 E7CC1D31 		.long	824036583
 3540 03e4 A9C3D73F 		.long	1071104937
 3541              	# i:
 3542 03e8 D9E8F31E 		.long	519301337
 3543 03ec F2A3193C 		.long	1008313330
 3544              	# i:
 3545 03f0 9BA03862 		.long	1647878299
 3546 03f4 52B6ED3F 		.long	1072543314
 3547              	# i:
 3548 03f8 6094E6EA 		.long	-353987488
 3549 03fc E7DE7ABC 		.long	-1132798233
 3550              	# i:
 3551 0400 63A9AEA6 		.long	-1498502813
 3552 0404 E27DD83F 		.long	1071152610
 3553              	# i:
 3554 0408 10A6D5D3 		.long	-740973040
 3555 040c ED2C67BC 		.long	-1134088979
 3556              	# i:
 3557 0410 468D32CF 		.long	-818770618
 3558 0414 6B90ED3F 		.long	1072533611
 3559              	# i:
 3560 0418 C21A2310 		.long	270736066
 3561 041c E657743C 		.long	1014257638
 3562              	# i:
 3563 0420 D793BC63 		.long	1673302999
 3564 0424 2A37D93F 		.long	1071200042
 3565              	# i:
 3566 0428 B1D55A9E 		.long	-1638214223
 3567 042c 3184663C 		.long	1013351473
 3568              	# i:
 3569 0430 8BE6C973 		.long	1942611595
 3570 0434 6169ED3F 		.long	1072523617
 3571              	# i:
 3572 0438 553D39C6 		.long	-969327275
 3573 043c 618C7EBC 		.long	-1132557215
 3574              	# i:
 3575 0440 8AEDA843 		.long	1135144330
 3576 0444 79EFD93F 		.long	1071247225
 3577              	# i:
 3578 0448 ABDB0B29 		.long	688642987
 3579 044c 81DA663C 		.long	1013373569
 3580              	# i:
 3581 0450 3AC94DD1 		.long	-783431366
 3582 0454 3441ED3F 		.long	1072513332
 3583              	# i:
 3584 0458 F25AD295 		.long	-1781376270
 3585 045c 52EF84BC 		.long	-1132138670
 3586              	# i:
 3587 0460 CA3F6D2B 		.long	728580042
 3588 0464 C8A6DA3F 		.long	1071294152
 3589              	# i:
 3590 0468 F7CCE56E 		.long	1860553975
 3591 046c 105F7DBC 		.long	-1132634352
 3592              	# i:
 3593 0470 DC353E74 		.long	1950234076
 3594 0474 E717ED3F 		.long	1072502759
 3595              	# i:
 3596 0478 0A134035 		.long	893391626
 3597 047c DA0151BC 		.long	-1135541798
 3598              	# i:
 3599 0480 C05CE109 		.long	165764288
 3600 0484 105DDB3F 		.long	1071340816
 3601              	# i:
 3602 0488 834197CB 		.long	-879279741
 3603 048c 62B3653C 		.long	1013298018
 3604              	# i:
 3605 0490 73C73CF4 		.long	-197343373
 3606 0494 7AEDEC3F 		.long	1072491898
 3607              	# i:
 3608 0498 AE58ABB5 		.long	-1247061842
 3609 049c 6B7B5EBC 		.long	-1134658709
 3610              	# i:
 3611 04a0 E71E01D8 		.long	-671015193
 3612 04a4 4912DC3F 		.long	1071387209
 3613              	# i:
 3614 04a8 065251BB 		.long	-1152298490
 3615 04ac AA1378BC 		.long	-1132981334
 3616              	# i:
 3617 04b0 5CFCFCF3 		.long	-201524132
 3618 04b4 F0C1EC3F 		.long	1072480752
 3619              	# i:
 3620 04b8 ABF6683B 		.long	996734635
 3621 04bc 61577E3C 		.long	1014912865
 3622              	# i:
 3623 04c0 5EC43199 		.long	-1724791714
 3624 04c4 6EC6DC3F 		.long	1071433326
 3625              	# i:
 3626 04c8 8F7FC359 		.long	1505984399
 3627 04cc 0E85563C 		.long	1012303118
 3628              	# i:
 3629 04d0 F5113421 		.long	557060597
 3630 04d4 4B95EC3F 		.long	1072469323
 3631              	# i:
 3632 04d8 0366941E 		.long	513041923
 3633 04dc 76FB52BC 		.long	-1135412362
 3634              	# i:
 3635 04e0 89E3865B 		.long	1535566729
 3636 04e4 7779DD3F 		.long	1071479159
 3637              	# i:
 3638 04e8 7505BC87 		.long	-2017720971
 3639 04ec EC50753C 		.long	1014321388
 3640              	# i:
 3641 04f0 9B738834 		.long	881357723
 3642 04f4 8B67EC3F 		.long	1072457611
 3643              	# i:
 3644 04f8 5BFFC5C7 		.long	-943325349
 3645 04fc CA866D3C 		.long	1013810890
 3646              	# i:
 3647 0500 3BF60638 		.long	939980347
 3648 0504 5D2BDE3F 		.long	1071524701
 3649              	# i:
 3650 0508 41683C1D 		.long	490498113
 3651 050c 890D5E3C 		.long	1012796809
 3652              	# i:
 3653 0510 B1BD80F1 		.long	-243221071
 3654 0514 B238EC3F 		.long	1072445618
 3655              	# i:
 3656 0518 078D7C75 		.long	1971096839
 3657 051c B1E076BC 		.long	-1133059919
 3658              	# i:
 3659 0520 D678EF52 		.long	1391425750
 3660 0524 19DCDE3F 		.long	1071569945
 3661              	# i:
 3662 0528 E6DE3EC3 		.long	-1019289882
 3663 052c F7D07DBC 		.long	-1132605193
 3664              	# i:
 3665 0530 49557226 		.long	645027145
 3666 0534 C408EC3F 		.long	1072433348
 3667              	# i:
 3668 0538 46290ED8 		.long	-670160570
 3669 053c 7F155B3C 		.long	1012602239
 3670              	# i:
 3671 0540 BA9AF8DB 		.long	-604464454
 3672 0544 A48BDF3F 		.long	1071614884
 3673              	# i:
 3674 0548 B876B7C1 		.long	-1044941128
 3675 054c 1FEC32BC 		.long	-1137513441
 3676              	# i:
 3677 0550 2A956FAC 		.long	-1401973462
 3678 0554 C0D7EB3F 		.long	1072420800
 3679              	# i:
 3680 0558 0A70AC32 		.long	850161674
 3681 055c A72588BC 		.long	-1131928153
 3682              	# i:
 3683 0560 B73E4C87 		.long	-2025046345
 3684 0564 FC1CE03F 		.long	1071652092
 3685              	# i:
 3686 0568 8C36C2E7 		.long	-406702452
 3687 056c 354A73BC 		.long	-1133295051
 3688              	# i:
 3689 0570 D2903567 		.long	1731563730
 3690 0574 AAA5EB3F 		.long	1072407978
 3691              	# i:
 3692 0578 B6530737 		.long	923227062
 3693 057c 4EEA873C 		.long	1015540302
 3694              	# i:
 3695 0580 EEFF2299 		.long	-1725759506
 3696 0584 8773E03F 		.long	1071674247
 3697              	# i:
 3698 0588 6C404743 		.long	1128743020
 3699 058c 015A8ABC 		.long	-1131783679
 3700              	# i:
 3701 0590 3E6E1945 		.long	1159294526
 3702 0594 8372EB3F 		.long	1072394883
 3703              	# i:
 3704 0598 616D4E32 		.long	844000609
 3705 059c 9FC68BBC 		.long	-1131690337
 3706              	# i:
 3707 05a0 8F895D4D 		.long	1297975695
 3708 05a4 70C9E03F 		.long	1071696240
 3709              	# i:
 3710 05a8 B2E96EDE 		.long	-563156558
 3711 05ac D7D388BC 		.long	-1131883561
 3712              	# i:
 3713 05b0 1257F53E 		.long	1056266002
 3714 05b4 4D3EEB3F 		.long	1072381517
 3715              	# i:
 3716 05b8 93A411BF 		.long	-1089362797
 3717 05bc B8B68EBC 		.long	-1131497800
 3718              	# i:
 3719 05c0 234B1B54 		.long	1411074851
 3720 05c4 B31EE13F 		.long	1071718067
 3721              	# i:
 3722 05c8 F1E4AB69 		.long	1772872945
 3723 05cc 3BF28EBC 		.long	-1131482565
 3724              	# i:
 3725 05d0 00021558 		.long	1477771776
 3726 05d4 0A09EB3F 		.long	1072367882
 3727              	# i:
 3728 05d8 CEFC0F30 		.long	806354126
 3729 05dc DA2689BC 		.long	-1131862310
 3730              	# i:
 3731 05e0 49DBDE63 		.long	1675549513
 3732 05e4 4D73E13F 		.long	1071739725
 3733              	# i:
 3734 05e8 7505C5CC 		.long	-859503243
 3735 05ec F2EE87BC 		.long	-1131942158
 3736              	# i:
 3737 05f0 11D5219E 		.long	-1641949935
 3738 05f4 BCD2EA3F 		.long	1072353980
 3739              	# i:
 3740 05f8 48A5BE07 		.long	129934664
 3741 05fc BE7F84BC 		.long	-1132167234
 3742              	# i:
 3743 0600 C868AE39 		.long	967731400
 3744 0604 3BC7E13F 		.long	1071761211
 3745              	# i:
 3746 0608 00667F26 		.long	645883392
 3747 060c DD258B3C 		.long	1015752157
 3748              	# i:
 3749 0610 A3A10E29 		.long	688824739
 3750 0614 669BEA3F 		.long	1072339814
 3751              	# i:
 3752 0618 C8DAB6E8 		.long	-390669624
 3753 061c 30F6393C 		.long	1010431536
 3754              	# i:
 3755 0620 59EB3399 		.long	-1724650663
 3756 0624 791AE23F 		.long	1071782521
 3757              	# i:
 3758 0628 B28FC677 		.long	2009501618
 3759 062c B1A783BC 		.long	-1132222543
 3760              	# i:
 3761 0630 E2FA021B 		.long	453180130
 3762 0634 0963EA3F 		.long	1072325385
 3763              	# i:
 3764 0638 108D2452 		.long	1378127120
 3765 063c 11917EBC 		.long	-1132556015
 3766              	# i:
 3767 0640 DF12DD4C 		.long	1289556703
 3768 0644 056DE23F 		.long	1071803653
 3769              	# i:
 3770 0648 0C77F33E 		.long	1056143116
 3771 064c 74DA85BC 		.long	-1132078476
 3772              	# i:
 3773 0650 822746A0 		.long	-1606015102
 3774 0654 A729EA3F 		.long	1072310695
 3775              	# i:
 3776 0658 75F15D01 		.long	22933877
 3777 065c BB2871BC 		.long	-1133434693
 3778              	# i:
 3779 0660 EAF3FA25 		.long	637203434
 3780 0664 DBBEE23F 		.long	1071824603
 3781              	# i:
 3782 0668 46EE96C7 		.long	-946409914
 3783 066c 814951BC 		.long	-1135523455
 3784              	# i:
 3785 0670 94AF29EF 		.long	-282480748
 3786 0674 43EFE93F 		.long	1072295747
 3787              	# i:
 3788 0678 C24504B6 		.long	-1241233982
 3789 067c FC1D7B3C 		.long	1014701564
 3790              	# i:
 3791 0680 3570E1FC 		.long	-52334539
 3792 0684 F70FE33F 		.long	1071845367
 3793              	# i:
 3794 0688 6F4AF726 		.long	653740655
 3795 068c C6FC6EBC 		.long	-1133577018
 3796              	# i:
 3797 0690 4187F347 		.long	1207142209
 3798 0694 E0B3E93F 		.long	1072280544
 3799              	# i:
 3800 0698 74247186 		.long	-2039405452
 3801 069c E20E83BC 		.long	-1132261662
 3802              	# i:
 3803 06a0 F35906B1 		.long	-1324983821
 3804 06a4 5860E33F 		.long	1071865944
 3805              	# i:
 3806 06a8 E75758A3 		.long	-1554491417
 3807 06ac B3FC81BC 		.long	-1132331853
 3808              	# i:
 3809 06b0 42D7C7F4 		.long	-188229822
 3810 06b4 7E77E93F 		.long	1072265086
 3811              	# i:
 3812 06b8 5E6640A2 		.long	-1572837794
 3813 06bc 795481BC 		.long	-1132374919
 3814              	# i:
 3815 06c0 B9502029 		.long	689983673
 3816 06c4 FAAFE33F 		.long	1071886330
 3817              	# i:
 3818 06c8 644995E3 		.long	-476755612
 3819 06cc 253E7E3C 		.long	1014906405
 3820              	# i:
 3821 06d0 FB639249 		.long	1234330619
 3822 06d4 223AE93F 		.long	1072249378
 3823              	# i:
 3824 06d8 0BDF20A9 		.long	-1457463541
 3825 06dc 19D4833C 		.long	1015272473
 3826              	# i:
 3827 06e0 D4564553 		.long	1397053140
 3828 06e4 D9FEE33F 		.long	1071906521
 3829              	# i:
 3830 06e8 61508C60 		.long	1619808353
 3831 06ec 1669833C 		.long	1015245078
 3832              	# i:
 3833 06f0 0D94EFA3 		.long	-1544580083
 3834 06f4 CCFBE83F 		.long	1072233420
 3835              	# i:
 3836 06f8 F1F2869C 		.long	-1668877583
 3837 06fc A9DF66BC 		.long	-1134108759
 3838              	# i:
 3839 0700 D61D0925 		.long	621354454
 3840 0704 F34CE43F 		.long	1071926515
 3841              	# i:
 3842 0708 B3C6FD2C 		.long	754828979
 3843 070c 6A07683C 		.long	1013450602
 3844              	# i:
 3845 0710 4117156B 		.long	1796544321
 3846 0714 80BCE83F 		.long	1072217216
 3847              	# i:
 3848 0718 6D33D12E 		.long	785462125
 3849 071c E1C582BC 		.long	-1132280351
 3850              	# i:
 3851 0720 39099B9B 		.long	-1684338375
 3852 0724 449AE43F 		.long	1071946308
 3853              	# i:
 3854 0728 949B716D 		.long	1836161940
 3855 072c E17E82BC 		.long	-1132298527
 3856              	# i:
 3857 0730 BF2EBA0F 		.long	263859903
 3858 0734 407CE83F 		.long	1072200768
 3859              	# i:
 3860 0738 CD643F0C 		.long	205481165
 3861 073c BCDA82BC 		.long	-1132275012
 3862              	# i:
 3863 0740 E9E5E3BB 		.long	-1142692375
 3864 0744 CAE6E43F 		.long	1071965898
 3865              	# i:
 3866 0748 27B3CEED 		.long	-305220825
 3867 074c 93C2633C 		.long	1013170835
 3868              	# i:
 3869 0750 6E97FF0B 		.long	201299822
 3870 0754 0E3BE83F 		.long	1072184078
 3871              	# i:
 3872 0758 7534EAF8 		.long	-118868875
 3873 075c 20F476BC 		.long	-1133054944
 3874              	# i:
 3875 0760 9655A392 		.long	-1834789482
 3876 0764 8232E53F 		.long	1071985282
 3877              	# i:
 3878 0768 5702DA89 		.long	-1982201257
 3879 076c EB127ABC 		.long	-1132850453
 3880              	# i:
 3881 0770 711757E3 		.long	-480831631
 3882 0774 ECF8E73F 		.long	1072167148
 3883              	# i:
 3884 0778 17C993CE 		.long	-829175529
 3885 077c D8C889BC 		.long	-1131820840
 3886              	# i:
 3887 0780 A0EC8C34 		.long	881650848
 3888 0784 697DE53F 		.long	1072004457
 3889              	# i:
 3890 0788 B2FB2B99 		.long	-1725170766
 3891 078c 205787BC 		.long	-1131981024
 3892              	# i:
 3893 0790 AFAF6A22 		.long	577417135
 3894 0794 DFB5E73F 		.long	1072149983
 3895              	# i:
 3896 0798 D70ADFAC 		.long	-1394668841
 3897 079c 37F570BC 		.long	-1133447881
 3898              	# i:
 3899 07a0 8C0165BE 		.long	-1100676724
 3900 07a4 7BC7E53F 		.long	1072023419
 3901              	# i:
 3902 07a8 2AC30B9C 		.long	-1676950742
 3903 07ac EA69803C 		.long	1015048682
 3904              	# i:
 3905 07b0 6172035F 		.long	1594061409
 3906 07b4 E771E73F 		.long	1072132583
 3907              	# i:
 3908 07b8 8F06848D 		.long	-1920727409
 3909 07bc CECF753C 		.long	1014353870
 3910              	# i:
 3911 07c0 DF2C1D55 		.long	1427975391
 3912 07c4 B710E63F 		.long	1072042167
 3913              	# i:
 3914 07c8 372AFF52 		.long	1392454199
 3915 07cc B35172BC 		.long	-1133358669
 3916              	# i:
 3917 07d0 96FFEF37 		.long	938475414
 3918 07d4 082DE73F 		.long	1072114952
 3919              	# i:
 3920 07d8 5C911D0F 		.long	253595996
 3921 07dc EFD4803C 		.long	1015076079
 3922              	# i:
 3923 07e0 3D78F025 		.long	636516413
 3924 07e4 1959E63F 		.long	1072060697
 3925              	# i:
 3926 07e8 23DEF5FB 		.long	-67772893
 3927 07ec 643D8C3C 		.long	1015823716
 3928              	# i:
 3929 07f0 AFA8EA54 		.long	1424664751
 3930 07f4 44E7E63F 		.long	1072097092
 3931              	# i:
 3932 07f8 6E224EC8 		.long	-934403474
 3933 07fc 03BC8DBC 		.long	-1131561981
 3934              	# i:
 3935 0800 CD3B7F66 		.long	1719614413
 3936 0804 9EA0E63F 		.long	1072079006
 3937              	# i:
 3938 0808 5664B213 		.long	330458198
 3939 080c 34DD8BBC 		.long	-1131684556
 3940              	# i:
 3941 0810 CD3B7F66 		.long	1719614413
 3942 0814 9EA0E63F 		.long	1072079006
 3943              	# i:
 3944 0818 5664B213 		.long	330458198
 3945 081c 34DD8BBC 		.long	-1131684556
 3946              		.align 4
 3949              	c8:
 3950              	# i:
 3951 0820 1AA0011A 		.long	436314138
 3952 0824 A001FA3E 		.long	1056571808
 3953              		.align 4
 3956              	c6:
 3957              	# i:
 3958 0828 176CC116 		.long	381774871
 3959 082c 6CC156BF 		.long	-1084833428
 3960              		.align 4
 3963              	c4:
 3964              	# i:
 3965 0830 55555555 		.long	1431655765
 3966 0834 5555A53F 		.long	1067799893
 3967              		.align 4
 3970              	c2:
 3971              	# i:
 3972 0838 00000000 		.long	0
 3973 083c 0000E0BF 		.long	-1075838976
 3974              		.align 4
 3977              	s9:
 3978              	# i:
 3979 0840 34C756A5 		.long	-1521039564
 3980 0844 E31DC73E 		.long	1053236707
 3981              		.align 4
 3984              	s7:
 3985              	# i:
 3986 0848 1AA0011A 		.long	436314138
 3987 084c A0012ABF 		.long	-1087766112
 3988              		.align 4
 3991              	s5:
 3992              	# i:
 3993 0850 11111111 		.long	286331153
 3994 0854 1111813F 		.long	1065423121
 3995              		.align 4
 3998              	s3:
 3999              	# i:
 4000 0858 55555555 		.long	1431655765
 4001 085c 5555C5BF 		.long	-1077586603
 4002              		.comm	crlibm_second_step_taken,4,4
 4003              		.section	.rodata.cst8,"aM",@progbits,8
 4004              		.align 8
 4005              	.LC5:
 4006 0000 00000002 		.long	33554432
 4007 0004 0000A041 		.long	1101004800
 4008              		.align 8
 4009              	.LC15:
 4010 0008 83C8C96D 		.long	1841940611
 4011 000c 305F5440 		.long	1079271216
 4012              		.align 8
 4013              	.LC17:
 4014 0010 182D4454 		.long	1413754136
 4015 0014 FB2189BF 		.long	-1081531909
 4016              		.section	.rodata.cst16,"aM",@progbits,16
 4017              		.align 16
 4018              	.LC19:
 4019 0000 2A15444E 		.long	1313084714
 4020 0004 6E83F9A2 		.long	2734261102
 4021 0008 05400000 		.long	16389
 4022 000c 00000000 		.align 16
 4023              		.section	.rodata.cst4,"aM",@progbits,4
 4024              		.align 4
 4025              	.LC20:
 4026 0000 0000C059 		.long	1505755136
 4027              		.section	.rodata.cst8
 4028              		.align 8
 4029              	.LC26:
 4030 0018 00004454 		.long	1413742592
 4031 001c FB2189BF 		.long	-1081531909
 4032              		.section	.rodata.cst4
 4033              		.align 4
 4034              	.LC27:
 4035 0004 0060B4A8 		.long	2830393344
 4036              		.section	.rodata.cst8
 4037              		.align 8
 4038              	.LC30:
 4039 0020 075C1433 		.long	856972295
 4040 0024 26A621BC 		.long	-1138645466
 4041              		.align 8
 4042              	.LC32:
 4043 0028 00001433 		.long	856948736
 4044 002c 26A621BC 		.long	-1138645466
 4045              		.section	.rodata.cst4
 4046              		.align 4
 4047              	.LC33:
 4048 0008 000E388E 		.long	2386038272
 4049              		.section	.rodata.cst8
 4050              		.align 8
 4051              	.LC34:
 4052 0030 BC8FEDB7 		.long	3085799356
 4053 0034 7619AF38 		.long	950999414
 4054              		.align 8
 4055              	.LC35:
 4056 0038 00004054 		.long	1413480448
 4057 003c FB21893F 		.long	1065951739
 4058              		.align 8
 4059              	.LC36:
 4060 0040 3163621A 		.long	442655537
 4061 0044 61B460BD 		.long	-1117735839
 4062              		.section	.rodata.cst4
 4063              		.align 4
 4064              	.LC37:
 4065 000c D80F493C 		.long	1011421144
 4066              		.align 4
 4067              	.LC38:
 4068 0010 60882831 		.long	824739936
 4069              		.section	.rodata.cst8
 4070              		.align 8
 4071              	.LC39:
 4072 0048 749D393B 		.long	993631604
 4073 004c CB3DD73C 		.long	1020739019
 4074              		.section	.rodata.cst4
 4075              		.align 4
 4076              	.LC40:
 4077 0014 00000043 		.long	1124073472
 4078              		.align 4
 4079              	.LC41:
 4080 0018 0000003C 		.long	1006632960
 4081              		.section	.rodata.cst16
 4082              		.align 16
 4083              	.LC42:
 4084 0010 C85F5AD4 		.long	3562692552
 4085 0014 27B9C380 		.long	2160310567
 4086 0018 FF3F0000 		.long	16383
 4087 001c 00000000 		.align 16
 4088              		.align 16
 4089              	.LC43:
 4090 0020 96218E75 		.long	1972248982
 4091 0024 711B0D80 		.long	2148342641
 4092 0028 FF3F0000 		.long	16383
 4093 002c 00000000 		.align 16
 4094              		.align 16
 4095              	.LC44:
 4096 0030 FE5F75E4 		.long	3832897534
 4097 0034 48676080 		.long	2153801544
 4098 0038 FF3F0000 		.long	16383
 4099 003c 00000000 		.align 16
 4100              		.section	.text.__x86.get_pc_thunk.bx,"axG",@progbits,__x86.get_pc_thunk.bx,comdat
 4101              		.globl	__x86.get_pc_thunk.bx
 4102              		.hidden	__x86.get_pc_thunk.bx
 4104              	__x86.get_pc_thunk.bx:
 4105              	.LFB22:
 4106              		.cfi_startproc
 4107 0000 8B1C24   		movl	(%esp), %ebx	#,
 4108 0003 C3       		ret
 4109              		.cfi_endproc
 4110              	.LFE22:
 4111              		.text
 4112              	.Letext0:
 4113              		.file 2 "/usr/lib/gcc/x86_64-redhat-linux/4.8.3/include/stddef.h"
 4114              		.file 3 "/usr/include/bits/types.h"
 4115              		.file 4 "/usr/include/stdio.h"
 4116              		.file 5 "/usr/include/libio.h"
 4117              		.file 6 "scs.h"
 4118              		.file 7 "scs_private.h"
 4119              		.file 8 "crlibm_private.h"
 4120              		.file 9 "trigo_fast.h"
 4121              		.file 10 "coefpi2.h"
 4122              		.file 11 "<built-in>"
