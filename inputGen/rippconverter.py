#! /usr/bin/env python
#
# This script converts old-style RIPP blocks into new-style DYNK blocks
#

nTurns = -1

ifile = open("fort.3",'r')
ofile = open("fort.3.dynk",'w')

inBlock = False
blockName = None
blockLine = 0
ENDE = False

error = False

for l in ifile:
    if inBlock:
        #print blockLine, "'"+l[:-1]+"'"
        if l[:4] == "NEXT":
            inBlock = False
            blockName = None
            blockLine = 0
            ofile.write(l)
            continue
        
        if blockName == "TRAC":
            if blockLine == 1 and not ENDE:
                nTurns = int(l.split()[0])
                print "Got nTurns =", nTurns, "from TRAC block"
        
        if blockName == "RIPP":
            if nTurns == -1:
                print "Need TRAC block to initialize RIPP"
                error = True
                break
            print "Converting '"+l[:-1]+"':"
            ls = l.split()
            rName  = ls[0]
            rDepth = ls[1]
            rFreq  = ls[2]
            if len(ls) < 4:
                print "WARNING: RIPP phase not set for '"+rName+"', defaulting to 0.0"
                rPhase = "0.0" 
            else:
                rPhase = ls[3]
            if len(ls) < 5:
                print "WARNING: RIPP nrturn not set for '"+rName+"', defaulting to 0"
                rTurn = "0"
            else:
                rTurn = ls[4]

            FUN = "FUN RIPP-"+rName+" COSF_RIPP " + rDepth + " " + rFreq + " " + rPhase
            print FUN
            SET = "SET "+rName+" average_ms RIPP-"+rName+" 1 "+str(nTurns+int(rTurn))+" "+rTurn
            print SET

            ofile.write(FUN+"\n")
            ofile.write(SET+"\n")
        else:
            ofile.write(l)
        blockLine = blockLine+1
    else:
        if l[:4] in ("SING","BLOC","STRU","PRIN","DISP","TUNE","SYNC","ITER","FLUC","MULT","CHRO","TRAC","DIFF","LINE","LIMI","ORBI","INIT","COMB","SUBR","RESO","SEAR","ORGA","POST","RIPP","DECO","COMM","NORM","CORR","BEAM","TROM","COLL","DUMP"):
            blockName = l[:4]
            inBlock = True
            blockLine = 1
            #print blockName
            if l[:4] == "RIPP":
                ofile.write("DYNK (autogenerated from RIPP block by rippconverter.py)\n")
                ofile.write("/"+ l)
                ofile.write("NOFILE\n")
            else:
                ofile.write(l)
        elif l[:4] == "DYNK":
            print "ERROR, DYNK block found?"
            print l
            error=True
            break
        elif l[:4] == "ENDE":
            ofile.write(l)
            ENDE = True
        elif  l[:4] == "GEOM" or l[:4] == "FREE":
            ofile.write(l)
        elif l[:1] == "/":
            ofile.write(l)
        else:
            print "unknown line found outside block:"
            print l

ifile.close()
ofile.close()

if error:
    print "Failed."
    exit(1)

print "Done!"

print "Showing you 'diff fort.3 fort.3.dynk':"
from subprocess import call
call(["diff","fort.3","fort.3.dynk"])
